# Multi-stage production build for Bun API
FROM oven/bun:1-alpine AS base
WORKDIR /app

# Install security updates and required packages
RUN apk update && apk upgrade && \
    apk add --no-cache dumb-init wget && \
    rm -rf /var/cache/apk/*

# Create non-root user for security
RUN addgroup -g 1001 -S nodejs && \
    adduser -S bunuser -u 1001

# Dependencies stage
FROM base AS deps
COPY package*.json bun.lock ./
RUN bun install --frozen-lockfile --production

# Build stage
FROM base AS build
COPY package*.json bun.lock ./
RUN bun install --frozen-lockfile
COPY . .
RUN bun run build 2>/dev/null || echo "No build script found"

# Production stage
FROM base AS production
ENV NODE_ENV=production
ENV PORT=4000

# Copy dependencies
COPY --from=deps --chown=bunuser:nodejs /app/node_modules ./node_modules
COPY --from=build --chown=bunuser:nodejs /app/src ./src
COPY --from=build --chown=bunuser:nodejs /app/index.ts ./
COPY --from=build --chown=bunuser:nodejs /app/package.json ./

# Create uploads directory with proper permissions
RUN mkdir -p uploads && chown -R bunuser:nodejs uploads && chmod 755 uploads

# Switch to non-root user
USER bunuser

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
  CMD wget --no-verbose --tries=1 --spider http://localhost:4000/ || exit 1

EXPOSE 4000

# Use dumb-init to handle signals properly
ENTRYPOINT ["dumb-init", "--"]
CMD ["bun", "run", "test-server.ts"]