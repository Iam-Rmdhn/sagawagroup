name: Deploy to Production

on:
  workflow_run:
    workflows: ["CI Pipeline"]
    types: [completed]
    branches: [main]
  
  # Allow manual deployment
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
        - production
        - staging
      skip_tests:
        description: 'Skip deployment tests'
        required: false
        default: false
        type: boolean
  
  # Also trigger on push to main for immediate deployment  
  push:
    branches: [main]
    paths-ignore:
      - 'README.md'
      - 'docs/**'

env:
  DEPLOY_TIMEOUT: 600  # 10 minutes timeout

jobs:
  pre-deploy-checks:
    name: Pre-deployment Checks
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' || github.event_name == 'push' }}
    outputs:
      deployment-id: ${{ steps.generate-id.outputs.deployment-id }}
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Generate deployment ID
      id: generate-id
      run: |
        DEPLOYMENT_ID="deploy-$(date +%Y%m%d-%H%M%S)-${{ github.sha }}"
        echo "deployment-id=$DEPLOYMENT_ID" >> $GITHUB_OUTPUT
        echo "Generated deployment ID: $DEPLOYMENT_ID"
    
    - name: Check server connectivity
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        key: ${{ secrets.SSH_KEY }}
        port: ${{ secrets.PORT || '22' }}
        timeout: 30s
        script: |
          echo "Server connectivity check: OK"
          echo "Server time: $(date)"
          echo "Disk space: $(df -h /var/www)"
          echo "Memory: $(free -h)"

  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: pre-deploy-checks
    timeout-minutes: 15
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Download deployment package
      if: github.event_name == 'workflow_run'
      uses: actions/download-artifact@v4
      with:
        name: production-package-${{ github.sha }}
        path: ./deployment-package/
        github-token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Create deployment notification
      if: always()
      continue-on-error: true
      uses: rjstone/discord-webhook-notify@v1
      with:
        severity: info
        details: |
          🚀 **Deployment Started**
          Branch: ${{ github.ref_name }}
          Commit: ${{ github.sha }}
          Triggered by: ${{ github.actor }}
          ID: ${{ needs.pre-deploy-checks.outputs.deployment-id }}
        webhookUrl: ${{ secrets.DISCORD_WEBHOOK }}
    
    - name: Deploy to server
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        key: ${{ secrets.SSH_KEY }}
        port: ${{ secrets.PORT || '22' }}
        timeout: 10m
        command_timeout: 10m
        script: |
          set -e  # Exit on error
          
          echo "Starting deployment: ${{ needs.pre-deploy-checks.outputs.deployment-id }}"
          
          # Navigate to project directory
          cd /root/sagawagroup
          
          # Create deployment log
          LOG_FILE="/var/log/sagawagroup-deploy-${{ needs.pre-deploy-checks.outputs.deployment-id }}.log"
          echo "Deployment started at $(date)" | tee -a $LOG_FILE
          
          # Pull latest code
          echo "Pulling latest code..." | tee -a $LOG_FILE
          git fetch origin
          git reset --hard origin/main
          
          # Make deployment script executable
          chmod +x ./deploy-production.sh
          
          # Run deployment with enhanced options
          echo "Running deployment script..." | tee -a $LOG_FILE
          ./deploy-production.sh \
            --skip-ssl \
            --non-interactive \
            --log-file=$LOG_FILE \
            2>&1 | tee -a $LOG_FILE
          
          echo "Deployment script completed" | tee -a $LOG_FILE
    
    - name: Health check
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        key: ${{ secrets.SSH_KEY }}
        port: ${{ secrets.PORT || '22' }}
        timeout: 2m
        script: |
          echo "Running post-deployment health checks..."
          
          # Wait for services to start
          sleep 15
          
          # Check PM2 processes
          echo "PM2 Status:"
          pm2 status
          
          # Check if API is responding
          echo "Testing API health endpoint..."
          for i in {1..12}; do
            if curl -f -s --connect-timeout 5 http://localhost:5000/api/health > /dev/null; then
              echo "✅ API health check passed (attempt $i)"
              break
            else
              echo "❌ API health check failed (attempt $i/12)"
              if [ $i -eq 12 ]; then
                echo "API health check failed after 12 attempts"
                exit 1
              fi
              sleep 10
            fi
          done
          
          # Check Nginx status
          echo "Checking Nginx status..."
          systemctl status nginx --no-pager
          
          # Test main website
          echo "Testing main website..."
          curl -f -s --connect-timeout 10 https://www.sagawagroup.id > /dev/null && echo "✅ Website accessible" || echo "❌ Website not accessible"
          
          echo "All health checks completed successfully!"

  post-deploy:
    name: Post-deployment Tasks
    runs-on: ubuntu-latest
    needs: [deploy, pre-deploy-checks]
    if: always()
    
    steps:
    - name: Deployment success notification
      if: needs.deploy.result == 'success'
      uses: rjstone/discord-webhook-notify@v1
      with:
        severity: success
        details: |
          ✅ **Deployment Successful**
          ID: ${{ needs.pre-deploy-checks.outputs.deployment-id }}
          Branch: ${{ github.ref_name }}
          Commit: ${{ github.sha }}
          Website: https://www.sagawagroup.id
        webhookUrl: ${{ secrets.DISCORD_WEBHOOK }}
    
    - name: Deployment failure notification
      if: needs.deploy.result == 'failure'
      uses: rjstone/discord-webhook-notify@v1
      with:
        severity: failure
        details: |
          ❌ **Deployment Failed**
          ID: ${{ needs.pre-deploy-checks.outputs.deployment-id }}
          Branch: ${{ github.ref_name }}
          Commit: ${{ github.sha }}
          Please check the logs for details.
        webhookUrl: ${{ secrets.DISCORD_WEBHOOK }}
    
    - name: Cleanup old artifacts
      if: always()
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        key: ${{ secrets.SSH_KEY }}
        port: ${{ secrets.PORT || '22' }}
        script: |
          echo "Cleaning up old deployment artifacts..."
          
          # Remove old backup folders (keep last 5)
          cd /root
          ls -t sagawagroup-backup-* 2>/dev/null | tail -n +6 | xargs -r rm -rf
          
          # Remove old log files (keep last 10)
          cd /var/log
          ls -t sagawagroup-deploy-*.log 2>/dev/null | tail -n +11 | xargs -r rm -f
          
          echo "Cleanup completed"