---
// Admin Navbar Component - Modern Redesign
---

<nav class="fixed top-0 z-50 w-full bg-white shadow-lg border-b-4 border-gradient-to-r from-amber-500 via-orange-500 to-red-500">
    <!-- Gradient Border -->
    <div class="absolute bottom-0 left-0 right-0 h-1 bg-gradient-to-r from-amber-500 via-orange-500 to-red-500"></div>
    
    <div class="px-4 py-4 lg:px-6 lg:pl-4">
      <div class="flex items-center justify-between">
        <div class="flex items-center justify-start rtl:justify-end space-x-4">
          <!-- Menu Button - Now visible on all screen sizes -->
          <button id="sidebar-toggle" data-drawer-target="logo-sidebar" data-drawer-toggle="logo-sidebar" aria-controls="logo-sidebar" type="button" class="inline-flex items-center p-2 text-amber-600 rounded-xl hover:bg-amber-50 hover:text-orange-600 focus:outline-none focus:ring-4 focus:ring-amber-100 transition-all duration-200">
              <span class="sr-only">Toggle sidebar</span>
              <svg class="w-6 h-6" aria-hidden="true" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">
                 <path clip-rule="evenodd" fill-rule="evenodd" d="M2 4.75A.75.75 0 012.75 4h14.5a.75.75 0 010 1.5H2.75A.75.75 0 012 4.75zm0 10.5a.75.75 0 01.75-.75h7.5a.75.75 0 010 1.5h-7.5a.75.75 0 01-.75-.75zM2 10a.75.75 0 01.75-.75h14.5a.75.75 0 010 1.5H2.75A.75.75 0 012 10z"></path>
              </svg>
           </button>
          
          <!-- Logo and Brand -->
          <a href="/admin/dashboard" class="flex items-center space-x-3 group">
            <div class="relative">
              <div class="w-10 h-10 rounded-xl bg-gradient-to-br from-amber-400 to-orange-500 p-2 group-hover:from-orange-400 group-hover:to-red-500 transition-all duration-300 shadow-lg">
                <img src="/src/assets/img/logo_s.svg" alt="Sagawa Logo" class="w-full h-full object-contain filter brightness-0 invert">
              </div>
              <div class="absolute -inset-1 bg-gradient-to-r from-amber-400 to-orange-500 rounded-xl blur opacity-25 group-hover:opacity-40 transition duration-300"></div>
            </div>
            <div class="hidden sm:block">
              <h1 class="text-2xl font-bold bg-gradient-to-r from-amber-600 via-orange-600 to-red-600 bg-clip-text text-transparent group-hover:from-orange-600 group-hover:to-red-700 transition-all duration-300">
                Sagawa Admin
              </h1>
              <p class="text-xs text-amber-500 font-medium">Dashboard Panel</p>
            </div>
          </a>
        </div>
        <!-- Right Side - User Menu -->
        <div class="flex items-center space-x-4">
          
          <!-- User Profile Dropdown -->
          <div class="flex items-center relative">
            <div>
              <button type="button" id="user-menu-button" class="group flex items-center space-x-3 text-sm bg-gradient-to-br from-amber-100 to-orange-100 hover:from-orange-100 hover:to-red-100 rounded-xl p-2 focus:ring-4 focus:ring-amber-200 transition-all duration-200 shadow-md hover:shadow-lg" aria-expanded="false" data-dropdown-toggle="dropdown-user">
                <span class="sr-only">Open user menu</span>
                <div class="w-8 h-8 rounded-full bg-gradient-to-br from-amber-500 to-orange-600 group-hover:from-orange-500 group-hover:to-red-600 flex items-center justify-center text-white font-bold shadow-lg transition-all duration-200" id="user-avatar">
                  A
                </div>
                <div class="hidden md:block text-left">
                  <p class="text-sm font-semibold text-gray-800" id="user-name-display">Admin User</p>
                  <p class="text-xs text-amber-600" id="user-role-display">Administrator</p>
                </div>
                <svg class="w-4 h-4 text-amber-600 group-hover:text-orange-600 transition-colors" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
                </svg>
              </button>
            </div>
            
            <!-- Dropdown Menu -->
            <div class="z-50 hidden absolute right-0 top-full mt-3 w-64 bg-white divide-y divide-amber-100 rounded-2xl shadow-xl border border-amber-200 overflow-hidden" id="dropdown-user">
              <!-- User Info Header -->
              <div class="px-6 py-4 bg-gradient-to-r from-amber-50 to-orange-50" role="none">
                <div class="flex items-center space-x-3">
                  <div class="w-8 h-7 rounded-full bg-gradient-to-br from-amber-500 to-orange-600 flex items-center justify-center text-white font-bold text-lg shadow-lg" id="user-avatar-large">
                    A
                  </div>
                  <div>
                    <p class="text-base font-bold text-gray-900" role="none" id="user-name">Admin User</p>
                    <p class="text-sm text-amber-600 font-medium" role="none" id="user-email">admin@sagawa.com</p>
                    <p class="text-xs text-orange-500">Online</p>
                  </div>
                </div>
              </div>
              
              <!-- Menu Items -->
              <ul class="py-2" role="none">
                <li>
                  <a href="/" class="flex items-center px-6 py-3 text-sm text-gray-700 hover:bg-gradient-to-r hover:from-amber-50 hover:to-orange-50 hover:text-amber-800 transition-all duration-200 group" role="menuitem">
                    <div class="w-8 h-8 rounded-full bg-amber-100 group-hover:bg-amber-200 flex items-center justify-center mr-3 transition-colors">
                      <svg class="w-4 h-4 text-amber-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path fill-rule="evenodd" d="M11.293 3.293a1 1 0 0 1 1.414 0l6 6 2 2a1 1 0 0 1-1.414 1.414L19 12.414V19a2 2 0 0 1-2 2h-3a1 1 0 0 1-1-1v-3h-2v3a1 1 0 0 1-1 1H7a2 2 0 0 1-2-2v-6.586l-.293.293a1 1 0 0 1-1.414-1.414l2-2 6-6Z" clip-rule="evenodd"></path>
                      </svg>
                    </div>
                    <div>
                      <p class="font-medium">Beranda</p>
                      <p class="text-xs text-gray-500">Kembali ke halamna depan</p>
                    </div>
                  </a>
                </li>
              </ul>
              
              <!-- Logout Section -->
              <div class="py-2 bg-gradient-to-r from-red-50 to-orange-50">
                <button id="logout-btn" class="flex items-center w-full text-left px-6 py-3 text-sm text-red-700 hover:bg-red-100 hover:text-red-800 transition-all duration-200 group" role="menuitem">
                  <div class="w-8 h-8 rounded-full bg-red-100 group-hover:bg-red-200 flex items-center justify-center mr-3 transition-colors">
                    <svg class="w-4 h-4 text-red-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 16l4-4m0 0l-4-4m4 4H7m6 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h4a3 3 0 013 3v1"></path>
                    </svg>
                  </div>
                  <div>
                    <p class="font-medium">Sign Out</p>
                    <p class="text-xs text-red-500">Keluar dashboard admin</p>
                  </div>
                </button>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
</nav>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    // Load user information
    const userString = localStorage.getItem('adminUser');
    if (userString) {
      try {
        const user = JSON.parse(userString);
        
        // Update user name and email in dropdown
        const userNameEl = document.getElementById('user-name');
        const userEmailEl = document.getElementById('user-email');
        const userAvatarEl = document.getElementById('user-avatar');
        const userAvatarLargeEl = document.getElementById('user-avatar-large');
        const userNameDisplayEl = document.getElementById('user-name-display');
        
        const userName = user.nama || 'Admin User';
        const userEmail = user.email || 'admin@sagawa.com';
        const userInitial = userName[0].toUpperCase();
        
        if (userNameEl) userNameEl.textContent = userName;
        if (userEmailEl) userEmailEl.textContent = userEmail;
        if (userAvatarEl) userAvatarEl.textContent = userInitial;
        if (userAvatarLargeEl) userAvatarLargeEl.textContent = userInitial;
        if (userNameDisplayEl) userNameDisplayEl.textContent = userName;
        
      } catch (error) {
        console.error('Error parsing admin user data:', error);
      }
    }

    // Handle dropdown toggle with smooth animations
    const userMenuButton = document.getElementById('user-menu-button');
    const dropdownUser = document.getElementById('dropdown-user');
    
    if (userMenuButton && dropdownUser) {
      userMenuButton.addEventListener('click', function(e) {
        e.preventDefault();
        e.stopPropagation();
        
        // Toggle dropdown visibility with animation
        if (dropdownUser.classList.contains('hidden')) {
          dropdownUser.classList.remove('hidden');
          // Add animation classes
          dropdownUser.style.opacity = '0';
          dropdownUser.style.transform = 'translateY(-10px)';
          
          requestAnimationFrame(() => {
            dropdownUser.style.transition = 'all 0.2s cubic-bezier(0.4, 0, 0.2, 1)';
            dropdownUser.style.opacity = '1';
            dropdownUser.style.transform = 'translateY(0)';
          });
        } else {
          dropdownUser.style.transition = 'all 0.15s cubic-bezier(0.4, 0, 0.2, 1)';
          dropdownUser.style.opacity = '0';
          dropdownUser.style.transform = 'translateY(-10px)';
          
          setTimeout(() => {
            dropdownUser.classList.add('hidden');
          }, 150);
        }
        
        // Update aria-expanded attribute
        const isExpanded = !dropdownUser.classList.contains('hidden');
        userMenuButton.setAttribute('aria-expanded', isExpanded.toString());
      });

      // Close dropdown when clicking outside
      document.addEventListener('click', function(event) {
        const target = event.target as HTMLElement;
        if (target && !userMenuButton.contains(target) && !dropdownUser.contains(target)) {
          if (!dropdownUser.classList.contains('hidden')) {
            dropdownUser.style.transition = 'all 0.15s cubic-bezier(0.4, 0, 0.2, 1)';
            dropdownUser.style.opacity = '0';
            dropdownUser.style.transform = 'translateY(-10px)';
            
            setTimeout(() => {
              dropdownUser.classList.add('hidden');
            }, 150);
          }
          userMenuButton.setAttribute('aria-expanded', 'false');
        }
      });

      // Close dropdown when pressing Escape key
      document.addEventListener('keydown', function(event) {
        if (event.key === 'Escape' && !dropdownUser.classList.contains('hidden')) {
          dropdownUser.style.transition = 'all 0.15s cubic-bezier(0.4, 0, 0.2, 1)';
          dropdownUser.style.opacity = '0';
          dropdownUser.style.transform = 'translateY(-10px)';
          
          setTimeout(() => {
            dropdownUser.classList.add('hidden');
          }, 150);
          
          userMenuButton.setAttribute('aria-expanded', 'false');
          userMenuButton.focus();
        }
      });
    }

    // Handle logout without confirmation
    const logoutBtn = document.getElementById('logout-btn');
    if (logoutBtn) {
      // Ensure button is always clickable
      logoutBtn.style.pointerEvents = 'auto';
      logoutBtn.style.cursor = 'pointer';

      logoutBtn.addEventListener('click', function(e) {
        e.preventDefault();
        e.stopPropagation();

        // Double check button is not disabled
        if (logoutBtn.hasAttribute('disabled')) {
          logoutBtn.removeAttribute('disabled');
        }

        // Add loading state
        logoutBtn.innerHTML = `
          <div class="w-8 h-8 rounded-full bg-red-100 flex items-center justify-center mr-3">
            <svg class="w-4 h-4 text-red-600 animate-spin" fill="none" viewBox="0 0 24 24">
              <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
              <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
            </svg>
          </div>
          <div>
            <p class="font-medium">Signing out...</p>
            <p class="text-xs text-red-500">Please wait</p>
          </div>
        `;

        // Dispatch custom event for parent to handle
        setTimeout(() => {
          document.dispatchEvent(new CustomEvent('adminNavbarAction', {
            detail: { action: 'logout' }
          }));
        }, 1000);
      });
    }

    // Handle sidebar toggle with smooth transition
    // Add a small delay to ensure all elements are loaded
    setTimeout(() => {
      const sidebarToggle = document.getElementById('sidebar-toggle');
      const sidebar = document.getElementById('logo-sidebar');
      const backdrop = document.getElementById('sidebar-backdrop');
      
      if (sidebarToggle && sidebar) {
      // Initialize sidebar state
      let sidebarVisible = localStorage.getItem('sidebarVisible');
      
      // If no preference stored, default to visible on desktop/tablet, hidden on mobile
      if (sidebarVisible === null) {
        sidebarVisible = window.innerWidth >= 768 ? 'true' : 'false';
        localStorage.setItem('sidebarVisible', sidebarVisible);
      }
      
      // Apply initial state
      if (sidebarVisible === 'true') {
        sidebar.classList.remove('-translate-x-full');
        updateMainContentMargin(true);
      } else {
        sidebar.classList.add('-translate-x-full');
        updateMainContentMargin(false);
      }
      
      sidebarToggle.addEventListener('click', function(e) {
        e.preventDefault();
        e.stopPropagation();
        
        // Force clear any inline styles that might interfere
        sidebar.style.transition = 'transform 0.3s cubic-bezier(0.4, 0, 0.2, 1)';
        
        const isCurrentlyHidden = sidebar.classList.contains('-translate-x-full');
        
        if (isCurrentlyHidden) {
          // Show sidebar
          sidebar.classList.remove('-translate-x-full');
          // Force remove any conflicting inline styles
          sidebar.style.transform = '';
          localStorage.setItem('sidebarVisible', 'true');
          
          // Show backdrop on mobile
          if (backdrop && window.innerWidth < 768) {
            backdrop.classList.remove('hidden');
          }
          
          // Update main content margin and dispatch event
          setTimeout(() => {
            updateMainContentMargin(true);
            window.dispatchEvent(new CustomEvent('sidebarToggle', { 
              detail: { visible: true } 
            }));
          }, 50);
        } else {
          // Hide sidebar
          sidebar.classList.add('-translate-x-full');
          // Force ensure transform is applied
          sidebar.style.transform = '';
          localStorage.setItem('sidebarVisible', 'false');
          
          // Hide backdrop
          if (backdrop) {
            backdrop.classList.add('hidden');
          }
          
          // Update main content margin and dispatch event
          setTimeout(() => {
            updateMainContentMargin(false);
            window.dispatchEvent(new CustomEvent('sidebarToggle', { 
              detail: { visible: false } 
            }));
          }, 50);
        }
        
        // Debug: Check final state after a brief delay
        setTimeout(() => {
        }, 100);
      });
      
      // Handle window resize
      window.addEventListener('resize', function() {
        const currentVisible = !sidebar.classList.contains('-translate-x-full');
        updateMainContentMargin(currentVisible);
      });
      
      // Initial margin setup
      const initialVisible = !sidebar.classList.contains('-translate-x-full');
      updateMainContentMargin(initialVisible);
    } else {
      console.error('Sidebar toggle elements not found:', {
        sidebarToggle: !!sidebarToggle,
        sidebar: !!sidebar
      });
    }
    }, 100); // Small delay to ensure elements are loaded
    
    // Function to update main content margin
    function updateMainContentMargin(sidebarVisible: boolean) {
      
      const mainContent = document.querySelector('.dashboard-bg') || 
                         document.querySelector('[class*="sm:ml-"]') ||
                         document.querySelector('.p-4');
      
      if (mainContent) {
        // Remove existing margin classes
        mainContent.classList.remove('sm:ml-0', 'sm:ml-72');
        
        if (sidebarVisible && window.innerWidth >= 768) {
          // Desktop/tablet with sidebar visible
          mainContent.classList.add('sm:ml-72');
        } else {
          // Mobile or sidebar hidden
          mainContent.classList.add('sm:ml-0');
        }
      } else {
      }
    }

    // Add scroll effect to navbar
    let lastScrollY = window.scrollY;
    window.addEventListener('scroll', () => {
      const navbar = document.querySelector('nav');
      if (navbar) {
        if (window.scrollY > lastScrollY && window.scrollY > 100) {
          // Scrolling down - hide navbar
          navbar.style.transform = 'translateY(-100%)';
        } else {
          // Scrolling up - show navbar
          navbar.style.transform = 'translateY(0)';
        }
        lastScrollY = window.scrollY;
        
        // Add shadow on scroll
        if (window.scrollY > 0) {
          navbar.classList.add('shadow-xl');
        } else {
          navbar.classList.remove('shadow-xl');
        }
      }
    });

    // Expose functions globally for external access
    (window as any).adminNavbar = {
      updateUserInfo: function(user: any) {
        const userNameEl = document.getElementById('user-name');
        const userEmailEl = document.getElementById('user-email');
        const userAvatarEl = document.getElementById('user-avatar');
        const userAvatarLargeEl = document.getElementById('user-avatar-large');
        const userNameDisplayEl = document.getElementById('user-name-display');
        
        const userName = user.nama || 'Admin User';
        const userEmail = user.email || 'admin@sagawa.com';
        const userInitial = userName[0].toUpperCase();
        
        if (userNameEl) userNameEl.textContent = userName;
        if (userEmailEl) userEmailEl.textContent = userEmail;
        if (userAvatarEl) userAvatarEl.textContent = userInitial;
        if (userAvatarLargeEl) userAvatarLargeEl.textContent = userInitial;
        if (userNameDisplayEl) userNameDisplayEl.textContent = userName;
      },
      
      showNotification: function(message: string, type: string = 'success') {
        // Create toast notification
        const toast = document.createElement('div');
        toast.className = `fixed top-20 right-4 z-60 max-w-sm p-4 rounded-xl shadow-lg transform translate-x-full transition-all duration-300 ${
          type === 'success' ? 'bg-green-100 text-green-800 border border-green-200' :
          type === 'error' ? 'bg-red-100 text-red-800 border border-red-200' :
          'bg-amber-100 text-amber-800 border border-amber-200'
        }`;
        
        toast.innerHTML = `
          <div class="flex items-center space-x-2">
            <div class="w-5 h-5 rounded-full ${
              type === 'success' ? 'bg-green-500' :
              type === 'error' ? 'bg-red-500' :
              'bg-amber-500'
            } flex items-center justify-center">
              <svg class="w-3 h-3 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
              </svg>
            </div>
            <p class="font-medium">${message}</p>
          </div>
        `;
        
        document.body.appendChild(toast);
        
        // Show toast
        requestAnimationFrame(() => {
          toast.style.transform = 'translateX(0)';
        });
        
        // Hide toast after 3 seconds
        setTimeout(() => {
          toast.style.transform = 'translateX(full)';
          setTimeout(() => {
            document.body.removeChild(toast);
          }, 300);
        }, 3000);
      }
    };
  });
</script>

<style>
  /* Add smooth transitions */
  nav {
    transition: transform 0.3s cubic-bezier(0.4, 0, 0.2, 1), box-shadow 0.3s ease;
  }
  
  /* Custom scrollbar for dropdown if needed */
  #dropdown-user {
    scrollbar-width: thin;
    scrollbar-color: rgb(245 158 11) transparent;
  }
  
  #dropdown-user::-webkit-scrollbar {
    width: 4px;
  }
  
  #dropdown-user::-webkit-scrollbar-track {
    background: transparent;
  }
  
  #dropdown-user::-webkit-scrollbar-thumb {
    background-color: rgb(245 158 11);
    border-radius: 2px;
  }
  
  /* Hover effects for menu items */
  .menu-item-hover {
    position: relative;
    overflow: hidden;
  }
  
  .menu-item-hover::before {
    content: '';
    position: absolute;
    left: 0;
    top: 0;
    width: 0;
    height: 100%;
    background: linear-gradient(90deg, rgb(251 191 36), rgb(249 115 22));
    transition: width 0.3s ease;
    z-index: -1;
  }
  
  .menu-item-hover:hover::before {
    width: 100%;
  }
  
  /* Gradient border animation */
  @keyframes gradient-x {
    0%, 100% {
      transform: translateX(-100%);
    }
    50% {
      transform: translateX(100%);
    }
  }
  
  .gradient-border::after {
    content: '';
    position: absolute;
    bottom: 0;
    left: 0;
    right: 0;
    height: 1px;
    background: linear-gradient(90deg, transparent, rgb(245 158 11), rgb(249 115 22), rgb(239 68 68), transparent);
    animation: gradient-x 3s ease infinite;
  }
</style>