---
import Layout from '../layouts/Layout.astro';
import contohMitra from '../assets/img/contoh-mitra.png';
---

<Layout title="Form Pendaftaran Mitra">
  <div class="min-h-screen bg-gray-50 py-8">
    <div class="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8">
      <!-- Progress Bar -->
      <div class="mb-8">
        <div class="flex items-center justify-center">
          <div class="flex items-center">
            <!-- Step 1 -->
            <div class="flex items-center">
              <div id="step-1" class="w-10 h-10 bg-blue-600 text-white rounded-full flex items-center justify-center font-semibold">
                1
              </div>
              <div class="ml-2 text-sm font-medium text-blue-600">Isi Form</div>
            </div>
            
            <!-- Line -->
            <div class="w-16 h-1 bg-gray-300 mx-4"></div>
            
            <!-- Step 2 -->
            <div class="flex items-center">
              <div id="step-2" class="w-10 h-10 bg-gray-300 text-gray-600 rounded-full flex items-center justify-center font-semibold">
                2
              </div>
              <div class="ml-2 text-sm font-medium text-gray-600">Konfirmasi</div>
            </div>
            
            <!-- Line -->
            <div class="w-16 h-1 bg-gray-300 mx-4"></div>
            
            <!-- Step 3 -->
            <div class="flex items-center">
              <div id="step-3" class="w-10 h-10 bg-gray-300 text-gray-600 rounded-full flex items-center justify-center font-semibold">
                3
              </div>
              <div class="ml-2 text-sm font-medium text-gray-600">Selesai</div>
            </div>
          </div>
        </div>
      </div>

      <!-- Form Container -->
      <div class="bg-white rounded-lg shadow-lg p-6">
        <!-- Step 1: Form Data -->
        <div id="form-step-1" class="space-y-8">
          <!-- Pilih Sistem Kemitraan -->
          <div>
            <div class="flex items-center mb-4 relative">
              <h3 class="text-lg font-semibold text-gray-800">Pilih Sistem Kemitraan</h3>
              <button type="button" id="info-sistem-kemitraan" class="info-button ml-2 focus:outline-none hover:text-blue-600 transition-colors">
                <svg class="w-5 h-5 text-gray-400 hover:text-blue-600" fill="currentColor" viewBox="0 0 20 20">
                  <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-8-3a1 1 0 00-.867.5 1 1 0 11-1.731-1A3 3 0 0113 8a3.001 3.001 0 01-2 2.83V11a1 1 0 11-2 0v-1a1 1 0 011-1 1 1 0 100-2zm0 8a1 1 0 100-2 1 1 0 000 2z" clip-rule="evenodd"></path>
                </svg>
              </button>
              <!-- Tooltip for Sistem Kemitraan -->
              <div id="tooltip-sistem-kemitraan" class="hidden absolute left-0 top-8 mt-2 p-4 bg-white border border-gray-200 rounded-lg shadow-lg z-10 max-w-sm">
                <div class="relative">
                  <button type="button" class="close-tooltip absolute top-0 right-0 -mt-2 -mr-2 text-gray-400 hover:text-gray-600">
                    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                    </svg>
                  </button>
                  <h4 class="font-semibold text-gray-800 mb-2">Sistem Kemitraan</h4>
                  <p class="text-sm text-gray-600">
                    Untuk Sistem Kemitraan anda dapat memilih:<br>
                    • <strong>Autopilot:</strong> Sistem dikelola penuh oleh tim Sagawa Group<br>
                    • <strong>Semi Autopilot:</strong> Sistem dikelola bersama antara mitra dan tim Sagawa Group<br>
                    • <strong>Self Managed:</strong> Sistem dikelola penuh oleh mitra
                  </p>
                  <p>--------------------------------------------------------------------</p>
                  <p class="text-sm text-gray-600">
                    <strong>Untuk PIC/Sales</strong><br>
                    Anda dapat mengisikan dengan nama Sales yang menangani anda
                  </p>
                </div>
              </div>
            </div>
            
            <div class="grid grid-cols-1 lg:grid-cols-3 gap-4 mb-4">
              <div class="flex items-center">
                <input id="autopilot" name="sistemKemitraan" type="radio" value="Autopilot" class="w-4 h-4 text-blue-600 bg-gray-100 border-gray-300 focus:ring-blue-500">
                <label for="autopilot" class="ml-2 text-sm font-medium text-gray-700">Autopilot</label>
              </div>
              <div class="flex items-center">
                <input id="semi-autopilot" name="sistemKemitraan" type="radio" value="Semi Autopilot" class="w-4 h-4 text-blue-600 bg-gray-100 border-gray-300 focus:ring-blue-500">
                <label for="semi-autopilot" class="ml-2 text-sm font-medium text-gray-700">Semi Autopilot</label>
              </div>
              <div class="flex items-center">
                <input id="self-managed" name="sistemKemitraan" type="radio" value="Self Managed" class="w-4 h-4 text-blue-600 bg-gray-100 border-gray-300 focus:ring-blue-500">
                <label for="self-managed" class="ml-2 text-sm font-medium text-gray-700">Self Managed</label>
              </div>
            </div>

            <input type="text" id="sales" placeholder="PIC/Sales" class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent">
          </div>

          <!-- Pilih Paket Usaha -->
          <div>
            <div class="flex items-center justify-between mb-4">
              <h3 class="text-lg font-semibold text-gray-800">Pilih Paket Usaha</h3>
              <button id="backToPackageBtn" onclick="window.history.back()" class="hidden px-4 py-2 text-sm bg-gray-500 text-white rounded-lg hover:bg-gray-600 transition-colors focus:outline-none focus:ring-2 focus:ring-gray-500 focus:ring-offset-2">
                <svg class="w-4 h-4 inline mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19l-7-7m0 0l7-7m-7 7h18"></path>
                </svg>
                Ubah Pilihan Paket
              </button>
            </div>
            <select id="paketUsaha" class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent bg-white">
              <option value="">Pilih Paket usaha*</option>
              <option value="Kagawa Coffee Corner" data-original="100000000" data-discounted="89000000">
                Kagawa Coffee Corner - Rp 100.000.000 → Rp 89.000.000
              </option>
              <option value="Kagawa Ricebowl" data-original="75000000" data-discounted="50000000">
                Kagawa Ricebowl - Rp 75.000.000 → Rp 50.000.000
              </option>
              <option value="Kagawa Coffee & Ricebowl Corner" data-original="175000000" data-discounted="139000000">
                Kagawa Coffee & Ricebowl Corner - Rp 175.000.000 → Rp 139.000.000
              </option>
              <option value="RM Nusantara" data-original="100000000" data-discounted="89000000">
                RM Nusantara (WarNas/WarTeg, Mas Gaw & RM Sunda) - Rp 100.000.000 → Rp 89.000.000
              </option>
              <option value="Independent Brand" data-original="70000000" data-discounted="49000000">
                Independent Brand - Rp 70.000.000 → Rp 49.000.000
              </option>
            </select>
            
            <!-- Price Display -->
            <div id="priceDisplay" class="mt-4 p-4 bg-gradient-to-r from-red-50 to-green-50 rounded-lg border hidden">
              <div class="text-center">
                <p class="text-sm text-gray-600 mb-2">Harga Paket Kemitraan yang Dipilih :</p>
                <div class="flex items-center justify-center space-x-4">
                  <span id="originalPrice" class="text-lg text-gray-500 line-through"></span>
                  <svg class="w-5 h-5 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 7l5 5m0 0l-5 5m5-5H6"></path>
                  </svg>
                  <span id="discountedPrice" class="text-2xl font-bold text-green-600"></span>
                </div>
                <p class="text-xs text-green-600 mt-1">Anda Hemat <span id="savingsAmount"></span></p>
              </div>
            </div>
          </div>

          <!-- Data Diri Mitra -->
          <div>
            <div class="flex items-center mb-4 relative">
              <h3 class="text-lg font-semibold text-gray-800">Data Diri Mitra</h3>
              <button type="button" id="info-data-diri" class="info-button ml-2 focus:outline-none hover:text-blue-600 transition-colors">
                <svg class="w-5 h-5 text-gray-400 hover:text-blue-600" fill="currentColor" viewBox="0 0 20 20">
                  <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-8-3a1 1 0 00-.867.5 1 1 0 11-1.731-1A3 3 0 0113 8a3.001 3.001 0 01-2 2.83V11a1 1 0 11-2 0v-1a1 1 0 011-1 1 1 0 100-2zm0 8a1 1 0 100-2 1 1 0 000 2z" clip-rule="evenodd"></path>
                </svg>
              </button>
              <!-- Tooltip for Data Diri Mitra -->
              <div id="tooltip-data-diri" class="hidden absolute left-0 top-8 mt-2 p-4 bg-white border border-gray-200 rounded-lg shadow-lg z-10 max-w-sm">
                <div class="relative">
                  <button type="button" class="close-tooltip absolute top-0 right-0 -mt-2 -mr-2 text-gray-400 hover:text-gray-600">
                    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                    </svg>
                  </button>
                  <h4 class="font-semibold text-gray-800 mb-2">Data Diri Mitra</h4>
                  <p class="text-sm text-gray-600">
                    Silakan lengkapi data diri Anda dengan benar:<br>
                    • <strong>Nama Mitra:</strong> Nama lengkap sesuai KTP<br>
                    • <strong>Alamat:</strong> Alamat lengkap dan jelas<br>
                    • <strong>No HP:</strong> Nomor yang dapat dihubungi<br>
                    • <strong>Email:</strong> Email aktif untuk komunikasi & Verifikasi<br>
                    • <strong>Foto KTP, Foto NPWP dan Foto Mitra:</strong> Upload ketiga foto tersebut dengan kolase yang dijadikan satu 
                  </p>
                  <p class="text-sm text-gray-600 mb-2"><strong>Seperti contoh :</strong></p>
                  <img src={contohMitra.src} alt="Contoh Foto Kolase Mitra" class="w-full max-w-xs rounded-lg border border-gray-200 mb-2" />
                </div>
              </div>
            </div>
            
            <div class="space-y-4">
              <input type="text" id="namaMitra" placeholder="Nama Mitra*" class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent">
              
              <input type="text" id="alamatMitra" placeholder="Alamat Mitra*" class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent">
              
              <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                <input type="tel" id="noHp" placeholder="No HP*" class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent">
                <input type="email" id="email" placeholder="Email*" class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent">
              </div>
            </div>
            
            <!-- File Upload Section -->
            <div class="mt-4">
              <p class="text-sm text-red-500 mb-4">(Sertakan foto KTP, Foto NPWP & Foto Mitra)</p>
              
              <div id="documentsUploadArea" class="border-2 border-dashed border-gray-300 rounded-lg p-8 text-center transition-all duration-200 hover:border-blue-400 hover:bg-blue-50/30">
                <svg class="w-12 h-12 text-gray-400 mx-auto mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12"></path>
                </svg>
                <p class="text-gray-600 font-medium">Upload Dokumen</p>
                <p class="text-sm text-gray-500 mb-2">Foto KTP, Foto NPWP & Foto Mitra yang dijadikan satu</p>
                <p class="text-xs text-gray-400 mb-4">Maksimal 2MB • JPG, PNG, PDF</p>
                <input type="file" id="documentsUpload" accept="image/*,application/pdf" class="hidden">
                <button type="button" id="documentsUploadBtn" class="mt-2 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2">
                  <svg class="w-4 h-4 inline mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4"></path>
                  </svg>
                  Pilih File
                </button>
              </div>
              
              <!-- Documents Preview -->
              <div id="documentsPreview" class="mt-4 hidden">
                <h4 class="text-sm font-medium text-gray-700 mb-2">File Terpilih:</h4>
                <div id="documentsFileList" class="space-y-2"></div>
              </div>
            </div>
          </div>

          <!-- Nilai Paket Usaha -->
          <div>
            <h3 class="text-lg font-semibold text-gray-800 mb-4">Nilai Paket Usaha</h3>
            
            <div class="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
              <div class="flex items-center">
                <input id="dp" name="nilaiPaket" type="radio" value="DP" class="w-4 h-4 text-blue-600 bg-gray-100 border-gray-300 focus:ring-blue-500">
                <label for="dp" class="ml-2 text-sm font-medium text-gray-700">DP</label>
              </div>
              <div class="flex items-center">
                <input id="full-payment" name="nilaiPaket" type="radio" value="Full Payment" class="w-4 h-4 text-blue-600 bg-gray-100 border-gray-300 focus:ring-blue-500">
                <label for="full-payment" class="ml-2 text-sm font-medium text-gray-700">Full Payment</label>
              </div>
            </div>
            
            <!-- Payment Cards -->
            <div class="grid grid-cols-1 md:grid-cols-3 gap-4 mb-6">
              <!-- DP Card -->
              <div id="dp-card" class="border border-gray-300 rounded-lg p-4 text-center opacity-50">
                <h4 class="font-semibold text-gray-800">DP</h4>
                <p class="text-2xl font-bold text-gray-600" id="dp-amount"></p>
              </div>
              
              <!-- Full Payment Card -->
              <div id="full-card" class="border border-gray-300 rounded-lg p-4 text-center opacity-50">
                <h4 class="font-semibold text-gray-800">Full Payment</h4>
                <div class="space-y-1">
                  <p class="line-through text-gray-400" id="original-price"></p>
                  <p class="text-2xl font-bold text-gray-600" id="discounted-price"></p>
                </div>
              </div>
              
              <!-- Kekurangan Card -->
              <div id="kekurangan-card" class="border border-gray-300 rounded-lg p-4 text-center opacity-50">
                <h4 class="font-semibold text-gray-800">Kekurangan</h4>
                <p class="text-2xl font-bold text-gray-600" id="kekurangan-amount"></p>
              </div>
            </div>
            
            <!-- Payment Info -->
            <div class="bg-gray-50 rounded-lg p-4 mb-4">
              <p class="text-sm text-gray-700 mb-2">Pembayaran dapat dilakukan melalui rekening:</p>
              <div class="space-y-1">
                <p class="font-semibold text-red-600">A.N Iman Wahyudi (OWNER)</p>
                <p class="font-semibold text-red-600">Bank Central Asia (BCA)</p>
                <p class="font-semibold text-red-600">No. Rekening: 540-607-5938</p>
                <p class="text-xs text-gray-600">*Sebelum melakukan transfer, pastikan bahwa nominal yang dibayarkan tidak salah</p>
                <p class="text-xs text-red-600">(Sertakan bukti transfer)</p>
              </div>
            </div>
            
            <!-- Payment Amount Display -->
            <div class="bg-blue-50 rounded-lg p-4 mb-4">
              <p class="text-lg font-semibold text-blue-800">Yang Harus anda bayarkan</p>
              <div class="flex justify-between items-center mt-2">
                <span class="text-2xl font-bold text-blue-600" id="final-payment"></span>
              </div>
            </div>
            
            <!-- Bukti Transfer Upload -->
            <div id="buktiTransferUploadArea" class="border-2 border-dashed border-gray-300 rounded-lg p-8 text-center transition-all duration-200 hover:border-blue-400 hover:bg-blue-50/30">
              <svg class="w-12 h-12 text-gray-400 mx-auto mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12"></path>
              </svg>
              <p class="text-gray-600 font-medium">Upload Bukti Transfer</p>
              <p class="text-sm text-gray-500 mb-2">JPG, PNG, atau PDF</p>
              <p class="text-xs text-gray-400 mb-4">Maksimal 5MB</p>
              <input type="file" id="buktiTransfer" accept="image/*,application/pdf" class="hidden">
              <button type="button" id="buktiTransferUploadBtn" class="mt-2 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2">
                <svg class="w-4 h-4 inline mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4"></path>
                </svg>
                Pilih File Bukti Transfer
              </button>
            </div>
            
            <!-- Bukti Transfer Preview -->
            <div id="buktiTransferPreview" class="mt-4 hidden">
              <h4 class="text-sm font-medium text-gray-700 mb-2">File Bukti Transfer:</h4>
              <div id="buktiTransferInfo" class="p-3 bg-gray-50 rounded-lg"></div>
            </div>
          </div>

          <!-- Sumber Dana -->
          <div>
            <div class="flex items-center mb-4 relative">
              <h3 class="text-lg font-semibold text-gray-800">Sumber Dana</h3>
              <button type="button" id="info-sumber-dana" class="info-button ml-2 focus:outline-none hover:text-blue-600 transition-colors">
                <svg class="w-5 h-5 text-gray-400 hover:text-blue-600" fill="currentColor" viewBox="0 0 20 20">
                  <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-8-3a1 1 0 00-.867.5 1 1 0 11-1.731-1A3 3 0 0113 8a3.001 3.001 0 01-2 2.83V11a1 1 0 11-2 0v-1a1 1 0 011-1 1 1 0 100-2zm0 8a1 1 0 100-2 1 1 0 000 2z" clip-rule="evenodd"></path>
                </svg>
              </button>
              <!-- Tooltip for Sumber Dana -->
              <div id="tooltip-sumber-dana" class="hidden absolute left-0 top-8 mt-2 p-4 bg-white border border-gray-200 rounded-lg shadow-lg z-10 max-w-sm">
                <div class="relative">
                  <button type="button" class="close-tooltip absolute top-0 right-0 -mt-2 -mr-2 text-gray-400 hover:text-gray-600">
                    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                    </svg>
                  </button>
                  <h4 class="font-semibold text-gray-800 mb-2">Sumber Dana</h4>
                  <p class="text-sm text-gray-600">
                    Informasi rekening pengirim dana kemitraan:<br>
                    • <strong>Nama Pengirim:</strong> Nama sesuai rekening bank<br>
                    • <strong>No Rekening:</strong> Nomor rekening pengirim<br>
                    • <strong>Bank:</strong> Nama bank pengirim<br><br>
                    <strong>Penting:</strong> Data ini harus sesuai dengan bukti transfer yang diupload.
                  </p>
                </div>
              </div>
            </div>
            
            <div class="space-y-4">
              <input type="text" id="namaPengirim" placeholder="Nama Pengirim*" class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent">
              
              <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                <input type="text" id="noRekPengirim" placeholder="No Rek pengirim*" class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent">
                <input type="text" id="bankPengirim" placeholder="Bank Pengirim*" class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent">
              </div>
            </div>
            
            <div class="mt-4">
              <p class="text-xs text-red-600">Perhatian!</p>
              <p class="text-xs text-gray-600">Jika uang yang telah di bayarkan tidak dapat di kembalikan apabila proses survey lokasi telah dilakukan. Namun, apabila belum dilakukan survey, pengembalian DP sebesar 50% masih dimungkinkan*</p>
            </div>
          </div>

          <!-- Next Button -->
          <div class="flex justify-between items-center">

            <button id="nextBtn" type="button" class="px-8 py-3 bg-gray-400 text-white rounded-lg font-semibold cursor-not-allowed transition-colors" disabled>
              Next
            </button>
          </div>
        </div>

        <!-- Step 2: Konfirmasi (Hidden initially) -->
        <div id="form-step-2" class="hidden space-y-6">
          <h2 class="text-2xl font-bold text-gray-800 mb-6">Konfirmasi Data Pendaftaran</h2>
          
          <div id="confirmationData" class="space-y-6">
            <!-- Data akan diisi oleh JavaScript -->
          </div>
          
          <div class="flex justify-between">
            <button id="backBtn" type="button" class="px-8 py-3 bg-gray-300 text-gray-700 rounded-lg font-semibold hover:bg-gray-200 transition-colors">
              Kembali
            </button>
            <button id="submitBtn" type="button" class="px-8 py-3 bg-blue-600 text-white rounded-lg font-semibold hover:bg-blue-700 transition-colors">
              Kirim Formulir
            </button>
          </div>
        </div>

        <!-- Step 3: Success (Hidden initially) -->
        <div id="form-step-3" class="hidden text-center py-12">
          <svg class="w-20 h-20 text-green-500 mx-auto mb-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
          </svg>
          <h2 class="text-3xl font-bold text-gray-800 mb-4">Terima Kasih!</h2>
          <p class="text-lg text-gray-600 mb-6">Kamu telah mengirimkan formulir pendaftaran, silakan tunggu</p>
          <p class="text-sm text-gray-500">Tim kami akan menghubungi Anda dalam 1-2 hari kerja.</p>
        </div>
      </div>
    </div>
  </div>
</Layout>

<script>
// Package prices with original and discounted prices
const packagePrices = {
  "Kagawa Coffee Corner": { original: 100000000, discounted: 89000000 },
  "Kagawa Ricebowl": { original: 75000000, discounted: 50000000 },
  "Kagawa Coffee & Ricebowl Corner": { original: 175000000, discounted: 139000000 },
  "RM Nusantara": { original: 100000000, discounted: 89000000 },
  "Independent Brand": { original: 70000000, discounted: 49000000 }
};

// DP fixed amount (5 million for all packages)
const DP_FIXED_AMOUNT = 5000000;

// Current date for discount calculation (15/08/2025 = 15825)
const currentDate = new Date();
const dayDiscount = parseInt(currentDate.getDate().toString() + (currentDate.getMonth() + 1).toString().padStart(2, '0') + currentDate.getFullYear().toString().slice(-2));

let selectedPackage = '';
let packagePrice = 0;
let paymentType = '';

let validationTimeout: ReturnType<typeof setTimeout> | null = null;

// Form validation function with throttling
function checkFormValidation() {
  // Clear previous timeout
  if (validationTimeout) {
    clearTimeout(validationTimeout);
  }
  
  // Set a small delay to avoid too frequent calls
  validationTimeout = setTimeout(() => {
    performValidation();
  }, 100);
}

function performValidation() {
  const nextBtn = document.getElementById('nextBtn') as HTMLButtonElement;
  if (!nextBtn) {
    return;
  }

  // Required fields (excluding Sales which is optional)
  const requiredFields = [
    { name: 'sistemKemitraan', type: 'radio' },
    { name: 'paketUsaha', type: 'select' },
    { name: 'namaMitra', type: 'input' },
    { name: 'alamatMitra', type: 'input' },
    { name: 'noHp', type: 'input' },
    { name: 'email', type: 'input' },
    { name: 'nilaiPaket', type: 'radio' },
    { name: 'namaPengirim', type: 'input' },
    { name: 'noRekPengirim', type: 'input' },
    { name: 'bankPengirim', type: 'input' }
  ];
  
  let allValid = true;
  let invalidFields: string[] = [];
  let fieldDetails: any = {};
  
  // Check each required field
  for (const field of requiredFields) {
    let isValid = false;
    let value = '';
    let element = null;
    
    if (field.type === 'radio') {
      const radioElements = document.querySelectorAll(`input[name="${field.name}"]:checked`);
      isValid = radioElements.length > 0;
      value = radioElements.length > 0 ? (radioElements[0] as HTMLInputElement).value : '';
      element = radioElements[0] || document.querySelector(`input[name="${field.name}"]`);
    } else if (field.type === 'select') {
      const selectElement = document.getElementById(field.name) as HTMLSelectElement;
      element = selectElement;
      value = selectElement?.value || '';
      isValid = value.trim() !== '' && value !== 'Pilih Paket Usaha' && value !== '';
    } else {
      const inputElement = document.getElementById(field.name) as HTMLInputElement;
      element = inputElement;
      value = inputElement?.value || '';
      isValid = value.trim() !== '';
    }
    
    fieldDetails[field.name] = { 
      value, 
      isValid, 
      element: element ? 'found' : 'NOT FOUND',
      actualValue: value || 'EMPTY'
    };
    
    if (!isValid) {
      allValid = false;
      invalidFields.push(field.name);
    }
  
  }
  
  // Check file uploads
  const documentsInput = document.getElementById('documentsUpload') as HTMLInputElement;
  const buktiTransferInput = document.getElementById('buktiTransfer') as HTMLInputElement;
  
  const hasDocuments = documentsInput?.files && documentsInput.files.length > 0;
  const hasBuktiTransfer = buktiTransferInput?.files && buktiTransferInput.files.length > 0;

  
  if (!hasDocuments) {
    allValid = false;
    invalidFields.push('documents');
  }
  
  if (!hasBuktiTransfer) {
    allValid = false;
    invalidFields.push('buktiTransfer');
  }
  
  // Update button state
  if (allValid) {
    nextBtn.disabled = false;
    nextBtn.classList.remove('bg-gray-400', 'cursor-not-allowed');
    nextBtn.classList.add('bg-gray-800', 'hover:bg-gray-700', 'cursor-pointer');
  } else {
    nextBtn.disabled = true;
    nextBtn.classList.remove('bg-gray-800', 'hover:bg-gray-700', 'cursor-pointer');
    nextBtn.classList.add('bg-gray-400', 'cursor-not-allowed');
  }
}

// Make performValidation globally accessible for debugging
(window as any).performValidation = performValidation;

// File preview functions
function displayDocumentsPreview(files: FileList | null) {
  const previewContainer = document.getElementById('documentsPreview');
  const fileListContainer = document.getElementById('documentsFileList');
  
  if (!files || files.length === 0) {
    previewContainer?.classList.add('hidden');
    return;
  }
  
  previewContainer?.classList.remove('hidden');
  if (fileListContainer) {
    fileListContainer.innerHTML = '';
  }
  
  // Only show the first file (KTP)
  const file = files[0];
  
  // Check file size (max 2MB)
  if (file.size > 2 * 1024 * 1024) {
    alert('Ukuran file terlalu besar. Maksimal 2MB per file.');
    const fileInput = document.getElementById('documentsUpload') as HTMLInputElement;
    if (fileInput) fileInput.value = '';
    previewContainer?.classList.add('hidden');
    return;
  }
  
  const fileItem = document.createElement('div');
  fileItem.className = 'flex items-center justify-between p-3 bg-blue-50 rounded-lg';
  
  const fileInfo = document.createElement('div');
  fileInfo.className = 'flex items-center space-x-3';
  
  // File icon
  const icon = document.createElement('div');
  icon.className = 'w-8 h-8 bg-blue-100 rounded flex items-center justify-center';
  icon.innerHTML = '<svg class="w-4 h-4 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 21h10a2 2 0 002-2V9.414a1 1 0 00-.293-.707l-5.414-5.414A1 1 0 0012.586 1H7a2 2 0 00-2 2v16a2 2 0 002 2z"></path></svg>';
  
  const details = document.createElement('div');
  details.innerHTML = `
    <p class="text-sm font-medium text-gray-800">Foto KTP: ${file.name}</p>
    <p class="text-xs text-gray-500">${formatFileSize(file.size)}</p>
  `;
  
  fileInfo.appendChild(icon);
  fileInfo.appendChild(details);
  
  // Remove button
  const removeBtn = document.createElement('button');
  removeBtn.type = 'button';
  removeBtn.className = 'text-red-500 hover:text-red-700';
  removeBtn.setAttribute('data-action', 'remove-document');
  removeBtn.setAttribute('data-index', '0');
  removeBtn.innerHTML = '<svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path></svg>';
  
  fileItem.appendChild(fileInfo);
  fileItem.appendChild(removeBtn);
  fileListContainer?.appendChild(fileItem);
}

function displayBuktiTransferPreview(file: File | null) {
  const previewContainer = document.getElementById('buktiTransferPreview');
  const infoContainer = document.getElementById('buktiTransferInfo');
  
  if (!file) {
    previewContainer?.classList.add('hidden');
    return;
  }
  
  previewContainer?.classList.remove('hidden');
  if (infoContainer) {
    infoContainer.innerHTML = `
      <div class="flex items-center justify-between">
        <div class="flex items-center space-x-3">
          <div class="w-8 h-8 bg-green-100 rounded flex items-center justify-center">
            <svg class="w-4 h-4 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 21h10a2 2 0 002-2V9.414a1 1 0 00-.293-.707l-5.414-5.414A1 1 0 0012.586 1H7a2 2 0 00-2 2v16a2 2 0 002 2z"></path>
            </svg>
          </div>
          <div>
            <p class="text-sm font-medium text-gray-800">${file.name}</p>
            <p class="text-xs text-gray-500">${formatFileSize(file.size)}</p>
          </div>
        </div>
        <button type="button" data-action="remove-bukti-transfer" class="text-red-500 hover:text-red-700">
          <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
          </svg>
        </button>
      </div>
    `;
  }
}

function formatFileSize(bytes: number): string {
  if (bytes === 0) return '0 Bytes';
  const k = 1024;
  const sizes = ['Bytes', 'KB', 'MB', 'GB'];
  const i = Math.floor(Math.log(bytes) / Math.log(k));
  return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
}

function removeDocumentFile(index: number) {
  const input = document.getElementById('documentsUpload') as HTMLInputElement;
  if (!input) return;
  
  const dt = new DataTransfer();
  
  Array.from(input.files || []).forEach((file, i) => {
    if (i !== index) {
      dt.items.add(file);
    }
  });
  
  input.files = dt.files;
  displayDocumentsPreview(input.files);
}

function removeBuktiTransferFile() {
  const input = document.getElementById('buktiTransfer') as HTMLInputElement;
  if (input) {
    input.value = '';
    displayBuktiTransferPreview(null);
  }
  checkFormValidation();
}

// Event listeners for file inputs
document.addEventListener('DOMContentLoaded', function() {
  const documentsInput = document.getElementById('documentsUpload') as HTMLInputElement;
  const buktiTransferInput = document.getElementById('buktiTransfer') as HTMLInputElement;
  
  // Upload button event listeners
  const documentsUploadBtn = document.getElementById('documentsUploadBtn');
  const buktiTransferUploadBtn = document.getElementById('buktiTransferUploadBtn');
  
  documentsUploadBtn?.addEventListener('click', () => {
    documentsInput?.click();
  });
  
  buktiTransferUploadBtn?.addEventListener('click', () => {
    buktiTransferInput?.click();
  });
  
  documentsInput?.addEventListener('change', function() {
    displayDocumentsPreview(this.files);
    
    // Update upload area appearance
    const uploadArea = document.getElementById('documentsUploadArea');
    if (uploadArea) {
      if (this.files && this.files.length > 0) {
        uploadArea.classList.remove('border-gray-300');
        uploadArea.classList.add('border-green-400', 'bg-green-50');
      } else {
        uploadArea.classList.remove('border-green-400', 'bg-green-50');
        uploadArea.classList.add('border-gray-300');
      }
    }
    
    // Check form validation after file upload
    checkFormValidation();
  });
  
  buktiTransferInput?.addEventListener('change', function() {
    const file = this.files?.[0] || null;
    displayBuktiTransferPreview(file);
    
    // Update upload area appearance
    const uploadArea = document.getElementById('buktiTransferUploadArea');
    if (uploadArea) {
      if (file) {
        uploadArea.classList.remove('border-gray-300');
        uploadArea.classList.add('border-green-400', 'bg-green-50');
      } else {
        uploadArea.classList.remove('border-green-400', 'bg-green-50');
        uploadArea.classList.add('border-gray-300');
      }
    }
    
    // Check form validation after file upload
    checkFormValidation();
  });
  
  // Add debug check button
  const checkFormBtn = document.getElementById('checkFormBtn');
  checkFormBtn?.addEventListener('click', () => {
    performValidation();
  });
  
  // Setup info tooltips
  setupInfoTooltips();
  
  // Add event listeners to all form inputs for real-time validation
  const formInputs = [
    '#paketUsaha',
    '#sales',
    '#namaMitra',
    '#alamatMitra', 
    '#noHp',
    '#email',
    '#namaPengirim',
    '#noRekPengirim',
    '#bankPengirim'
  ];
  
  formInputs.forEach(selector => {
    const elements = document.querySelectorAll(selector);
    elements.forEach(element => {
      element.addEventListener('change', checkFormValidation);
      element.addEventListener('input', checkFormValidation);
      // For select elements, also listen to blur
      if (element.tagName === 'SELECT') {
        element.addEventListener('blur', checkFormValidation);
      }
    });
  });
  
  // Add specific event listeners for radio buttons
  document.querySelectorAll('input[name="sistemKemitraan"]').forEach(radio => {
    radio.addEventListener('change', function(this: HTMLInputElement) {
      checkFormValidation();
    });
  });
  
  document.querySelectorAll('input[name="nilaiPaket"]').forEach(radio => {
    radio.addEventListener('change', function(this: HTMLInputElement) {
      checkFormValidation();
    });
  });
  
  // Initial validation check
  checkFormValidation();
  
  // Event delegation for dynamic buttons
  document.addEventListener('click', function(e) {
    const target = e.target as HTMLElement;
    
    // Handle remove bukti transfer button
    if (target.closest('[data-action="remove-bukti-transfer"]')) {
      e.preventDefault();
      removeBuktiTransferFile();
    }
    
    // Handle remove document file button  
    if (target.closest('[data-action="remove-document"]')) {
      e.preventDefault();
      const index = parseInt(target.closest('[data-action="remove-document"]')?.getAttribute('data-index') || '0');
      removeDocumentFile(index);
    }
  });
});

// Format currency
function formatCurrency(amount: number) {
  return new Intl.NumberFormat('id-ID', {
    style: 'currency',
    currency: 'IDR',
    minimumFractionDigits: 0
  }).format(amount).replace('IDR', 'Rp.');
}

// Update package selection
const paketUsahaElement = document.getElementById('paketUsaha') as HTMLSelectElement;
paketUsahaElement?.addEventListener('change', function() {
  console.log('Package selection changed to:', this.value);
  selectedPackage = this.value;
  const priceData = packagePrices[selectedPackage as keyof typeof packagePrices];
  console.log('Price data from event listener:', priceData);
  packagePrice = priceData ? priceData.discounted : 0;
  
  // Update price display
  updatePriceDisplay(priceData);
  updatePaymentCards();
  checkFormValidation();
});

function updatePriceDisplay(priceData: { original: number, discounted: number } | undefined) {
  console.log('updatePriceDisplay called with:', priceData);
  const priceDisplay = document.getElementById('priceDisplay');
  const originalPriceEl = document.getElementById('originalPrice');
  const discountedPriceEl = document.getElementById('discountedPrice');
  const savingsAmountEl = document.getElementById('savingsAmount');
  
  console.log('Price display elements:', {
    priceDisplay: !!priceDisplay,
    originalPriceEl: !!originalPriceEl,
    discountedPriceEl: !!discountedPriceEl,
    savingsAmountEl: !!savingsAmountEl
  });
  
  if (!priceData || !priceDisplay || !originalPriceEl || !discountedPriceEl || !savingsAmountEl) {
    console.log('Hiding price display - missing data or elements');
    priceDisplay?.classList.add('hidden');
    return;
  }
  
  const savings = priceData.original - priceData.discounted;
  
  originalPriceEl.textContent = formatCurrency(priceData.original);
  discountedPriceEl.textContent = formatCurrency(priceData.discounted);
  savingsAmountEl.textContent = formatCurrency(savings);
  
  console.log('Showing price display');
  priceDisplay.classList.remove('hidden');
}

// Update payment type selection
document.querySelectorAll('input[name="nilaiPaket"]').forEach(radio => {
  radio.addEventListener('change', function(this: HTMLInputElement) {
    paymentType = this.value;
    updatePaymentCards();
    checkFormValidation();
  });
});

function updatePaymentCards() {
  if (!packagePrice) return;

  const dpAmount = DP_FIXED_AMOUNT; // Fixed 5 million
  const discountedFullPrice = packagePrice - dayDiscount;
  const kekurangan = packagePrice - dpAmount;

  // Update DP card
  const dpAmountElement = document.getElementById('dp-amount');
  if (dpAmountElement) {
    dpAmountElement.textContent = formatCurrency(dpAmount);
  }
  
  // Update Full Payment card
  const originalPriceElement = document.getElementById('original-price');
  const discountedPriceElement = document.getElementById('discounted-price');
  if (originalPriceElement) {
    originalPriceElement.textContent = formatCurrency(packagePrice);
  }
  if (discountedPriceElement) {
    discountedPriceElement.textContent = formatCurrency(discountedFullPrice);
  }
  
  // Update Kekurangan card
  const kekuranganAmountElement = document.getElementById('kekurangan-amount');
  if (kekuranganAmountElement) {
    kekuranganAmountElement.textContent = formatCurrency(kekurangan);
  }
  
  // Update final payment amount
  let finalAmount = 0;
  const dpCard = document.getElementById('dp-card');
  const fullCard = document.getElementById('full-card');
  const kekuranganCard = document.getElementById('kekurangan-card');
  
  if (paymentType === 'DP') {
    finalAmount = dpAmount - dayDiscount;
    dpCard?.classList.remove('opacity-50');
    fullCard?.classList.add('opacity-50');
    kekuranganCard?.classList.remove('opacity-50');
  } else if (paymentType === 'Full Payment') {
    finalAmount = discountedFullPrice;
    dpCard?.classList.add('opacity-50');
    fullCard?.classList.remove('opacity-50');
    kekuranganCard?.classList.add('opacity-50');
  }
  
  const finalPaymentElement = document.getElementById('final-payment');
  if (finalPaymentElement) {
    finalPaymentElement.textContent = formatCurrency(Math.max(0, finalAmount));
  }
}

// Bank validation using Fuse.js (placeholder - you'll need to import the actual validator)
async function validateBank(bankInput: string) {
  // This would call your bank validator API
  // For now, let's simulate it
  const commonBanks: { [key: string]: string } = {
  };
  
  const lowerInput = bankInput.toLowerCase();
  return commonBanks[lowerInput] || bankInput;
}

// Form navigation
const nextBtn = document.getElementById('nextBtn');
nextBtn?.addEventListener('click', function() {
  if (validateStep1()) {
    showConfirmation();
    updateProgressBar(2);
  }
});

const backBtn = document.getElementById('backBtn');
backBtn?.addEventListener('click', function() {
  const step1Element = document.getElementById('form-step-1');
  const step2Element = document.getElementById('form-step-2');
  
  step2Element?.classList.add('hidden');
  step1Element?.classList.remove('hidden');
  updateProgressBar(1);
});

const submitBtn = document.getElementById('submitBtn');
submitBtn?.addEventListener('click', async function() {
  await submitForm();
  const step2Element = document.getElementById('form-step-2');
  const step3Element = document.getElementById('form-step-3');
  
  step2Element?.classList.add('hidden');
  step3Element?.classList.remove('hidden');
  updateProgressBar(3);
});

function validateStep1() {
  // Required fields (excluding jenisUsaha/PIC Sales which is optional)
  const required = ['sistemKemitraan', 'paketUsaha', 'namaMitra', 'alamatMitra', 'noHp', 'email', 'nilaiPaket', 'namaPengirim', 'noRekPengirim', 'bankPengirim'];
  
  for (let field of required) {
    let element: HTMLInputElement | null = null;
    
    // Handle radio buttons differently
    if (field === 'sistemKemitraan' || field === 'nilaiPaket') {
      element = document.querySelector(`input[name="${field}"]:checked`) as HTMLInputElement;
    } else {
      element = document.getElementById(field) as HTMLInputElement;
    }
    
    if (!element || !element.value.trim()) {
      alert(`Field ${field} harus diisi`);
      if (field !== 'sistemKemitraan' && field !== 'nilaiPaket') {
        element = document.getElementById(field) as HTMLInputElement;
        element?.focus();
      }
      return false;
    }
  }
  
  // Check file uploads
  const documentsUpload = document.getElementById('documentsUpload') as HTMLInputElement;
  const buktiTransfer = document.getElementById('buktiTransfer') as HTMLInputElement;
  
  if (!documentsUpload?.files?.length) {
    alert('Silakan upload dokumen KTP, NPWP & foto diri mitra');
    document.getElementById('documentsUploadArea')?.scrollIntoView({ behavior: 'smooth' });
    return false;
  }
  
  if (!buktiTransfer?.files?.length) {
    alert('Silakan upload bukti transfer');
    document.getElementById('buktiTransferUploadArea')?.scrollIntoView({ behavior: 'smooth' });
    return false;
  }
  
  // Validate file types and sizes
  const allowedTypes = ['image/jpeg', 'image/jpg', 'image/png', 'application/pdf'];
  const maxSize = 5 * 1024 * 1024; // 5MB
  
  // Check documents
  for (let i = 0; i < documentsUpload.files.length; i++) {
    const file = documentsUpload.files[i];
    if (!allowedTypes.includes(file.type)) {
      alert(`File ${file.name} tidak didukung. Gunakan format JPG, PNG, atau PDF`);
      return false;
    }
    if (file.size > maxSize) {
      alert(`File ${file.name} terlalu besar. Maksimal 5MB per file`);
      return false;
    }
  }
  
  // Check bukti transfer
  const buktiFile = buktiTransfer.files[0];
  if (!allowedTypes.includes(buktiFile.type)) {
    alert(`File bukti transfer tidak didukung. Gunakan format JPG, PNG, atau PDF`);
    return false;
  }
  if (buktiFile.size > maxSize) {
    alert(`File bukti transfer terlalu besar. Maksimal 5MB`);
    return false;
  }
  
  return true;
}

function showConfirmation() {
  const formData = collectFormData();
  const confirmationHTML = generateConfirmationHTML(formData);
  const confirmationElement = document.getElementById('confirmationData');
  
  if (confirmationElement) {
    confirmationElement.innerHTML = confirmationHTML;
  }
  
  const step1Element = document.getElementById('form-step-1');
  const step2Element = document.getElementById('form-step-2');
  
  if (step1Element && step2Element) {
    step1Element.classList.add('hidden');
    step2Element.classList.remove('hidden');
  }
}

function collectFormData() {
  const sistemKemitraanElement = document.querySelector('input[name="sistemKemitraan"]:checked') as HTMLInputElement;
  const salesElement = document.getElementById('sales') as HTMLInputElement;
  const paketUsahaElement = document.getElementById('paketUsaha') as HTMLSelectElement;
  const namaMitraElement = document.getElementById('namaMitra') as HTMLInputElement;
  const alamatMitraElement = document.getElementById('alamatMitra') as HTMLInputElement;
  const noHpElement = document.getElementById('noHp') as HTMLInputElement;
  const emailElement = document.getElementById('email') as HTMLInputElement;
  const nilaiPaketElement = document.querySelector('input[name="nilaiPaket"]:checked') as HTMLInputElement;
  const namaPengirimElement = document.getElementById('namaPengirim') as HTMLInputElement;
  const noRekPengirimElement = document.getElementById('noRekPengirim') as HTMLInputElement;
  const bankPengirimElement = document.getElementById('bankPengirim') as HTMLInputElement;
  const documentsElement = document.getElementById('documentsUpload') as HTMLInputElement;
  const buktiTransferElement = document.getElementById('buktiTransfer') as HTMLInputElement;

  return {
    sistemKemitraan: sistemKemitraanElement?.value || '',
    sales: salesElement?.value || '',
    paketUsaha: paketUsahaElement?.value || '',
    namaMitra: namaMitraElement?.value || '',
    alamatMitra: alamatMitraElement?.value || '',
    noHp: noHpElement?.value || '',
    email: emailElement?.value || '',
    nilaiPaket: nilaiPaketElement?.value || '',
    namaPengirim: namaPengirimElement?.value || '',
    noRekPengirim: noRekPengirimElement?.value || '',
    bankPengirim: bankPengirimElement?.value || '',
    documentsFiles: documentsElement?.files || null,
    buktiTransferFile: buktiTransferElement?.files?.[0] || null
  };
}

function generateConfirmationHTML(data: any) {
  const dpAmount = DP_FIXED_AMOUNT; // Fixed 5 million
  const discountedFullPrice = packagePrice - dayDiscount;
  const finalAmount = data.nilaiPaket === 'DP' ? dpAmount - dayDiscount : discountedFullPrice;
  
  // Get original price for display
  const priceData = packagePrices[data.paketUsaha as keyof typeof packagePrices];
  const originalPrice = priceData ? priceData.original : packagePrice;
  
  // Generate files list HTML
  let documentsHTML = '';
  if (data.documentsFiles && data.documentsFiles.length > 0) {
    const file = data.documentsFiles[0] as File; // Only handle first file (KTP)
    documentsHTML = `
      <div class="flex items-center space-x-2">
        <svg class="w-4 h-4 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 21h10a2 2 0 002-2V9.414a1 1 0 00-.293-.707l-5.414-5.414A1 1 0 0012.586 1H7a2 2 0 00-2 2v16a2 2 0 002 2z"></path>
        </svg>
        <span class="text-sm text-gray-600">Foto KTP: ${file.name} (${formatFileSize(file.size)})</span>
      </div>
    `;
  }
  
  return `
    <div class="space-y-6">
      <div class="bg-gray-50 p-4 rounded-lg">
        <h3 class="font-semibold text-gray-800 mb-2">Sistem Kemitraan</h3>
        <p class="text-gray-600">${data.sistemKemitraan}</p>
        <p class="text-gray-600">PIC/Sales: ${data.sales}</p>
      </div>
      
      <div class="bg-gray-50 p-4 rounded-lg">
        <h3 class="font-semibold text-gray-800 mb-2">Paket Usaha</h3>
        <p class="text-gray-600">${data.paketUsaha}</p>
        <p class="text-gray-600">
          Harga: <span style="text-decoration: line-through; color: #999;">${formatCurrency(originalPrice)}</span> 
          <strong style="color: #dc2626;">${formatCurrency(packagePrice)}</strong>
        </p>
      </div>
      
      <div class="bg-gray-50 p-4 rounded-lg">
        <h3 class="font-semibold text-gray-800 mb-2">Data Diri Mitra</h3>
        <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div>
            <label class="text-sm font-medium text-gray-600">Nama:</label>
            <input type="text" value="${data.namaMitra}" class="w-full mt-1 px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500" id="confirm-nama">
          </div>
          <div>
            <label class="text-sm font-medium text-gray-600">Email:</label>
            <input type="email" value="${data.email}" class="w-full mt-1 px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500" id="confirm-email">
          </div>
          <div>
            <label class="text-sm font-medium text-gray-600">Alamat:</label>
            <input type="text" value="${data.alamatMitra}" class="w-full mt-1 px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500" id="confirm-alamat">
          </div>
          <div>
            <label class="text-sm font-medium text-gray-600">No HP:</label>
            <input type="tel" value="${data.noHp}" class="w-full mt-1 px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500" id="confirm-hp">
          </div>
        </div>
      </div>
      
      <div class="bg-gray-50 p-4 rounded-lg">
        <h3 class="font-semibold text-gray-800 mb-2">Dokumen Terupload</h3>
        <div class="space-y-2">
          <div>
            <p class="text-sm font-medium text-gray-700">Dokumen KTP:</p>
            <div class="ml-4 space-y-1">
              ${documentsHTML}
            </div>
          </div>
          <div>
            <p class="text-sm font-medium text-gray-700">Bukti Transfer:</p>
            <div class="ml-4 flex items-center space-x-2">
              <svg class="w-4 h-4 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 21h10a2 2 0 002-2V9.414a1 1 0 00-.293-.707l-5.414-5.414A1 1 0 0012.586 1H7a2 2 0 00-2 2v16a2 2 0 002 2z"></path>
              </svg>
              <span class="text-sm text-gray-600">${data.buktiTransferFile ? `${data.buktiTransferFile.name} (${formatFileSize(data.buktiTransferFile.size)})` : 'Tidak ada'}</span>
            </div>
          </div>
        </div>
      </div>
      
      <div class="bg-gray-50 p-4 rounded-lg">
        <h3 class="font-semibold text-gray-800 mb-2">Pembayaran</h3>
        <p class="text-gray-600">Metode: ${data.nilaiPaket}</p>
        <p class="text-lg font-semibold text-blue-600">Total Bayar: ${formatCurrency(Math.max(0, finalAmount))}</p>
      </div>
      
      <div class="bg-gray-50 p-4 rounded-lg">
        <h3 class="font-semibold text-gray-800 mb-2">Sumber Dana</h3>
        <p class="text-gray-600">Nama: ${data.namaPengirim}</p>
        <p class="text-gray-600">No Rekening: ${data.noRekPengirim}</p>
        <p class="text-gray-600">Bank: ${data.bankPengirim}</p>
      </div>
    </div>
  `;
}

async function submitForm() {
  try {
    const formData = collectFormData();
    
    // Update data with confirmation changes
    const confirmNamaElement = document.getElementById('confirm-nama') as HTMLInputElement;
    const confirmEmailElement = document.getElementById('confirm-email') as HTMLInputElement;
    const confirmAlamatElement = document.getElementById('confirm-alamat') as HTMLInputElement;
    const confirmHpElement = document.getElementById('confirm-hp') as HTMLInputElement;
    
    formData.namaMitra = confirmNamaElement?.value || formData.namaMitra;
    formData.email = confirmEmailElement?.value || formData.email;
    formData.alamatMitra = confirmAlamatElement?.value || formData.alamatMitra;
    formData.noHp = confirmHpElement?.value || formData.noHp;
    
    // Validate bank name
    formData.bankPengirim = await validateBank(formData.bankPengirim);
    
    // Calculate final amounts
    const dpAmount = DP_FIXED_AMOUNT; // Fixed 5 million
    const discountedFullPrice = packagePrice - dayDiscount;
    const finalAmount = formData.nilaiPaket === 'DP' ? dpAmount - dayDiscount : discountedFullPrice;
    
    // Prepare form data for submission
    const submitData = new FormData();
    
    // Add all form fields except files
    const formFields = [
      'sistemKemitraan', 'paketUsaha', 'namaMitra', 
      'alamatMitra', 'noHp', 'email', 'nilaiPaket', 'namaPengirim', 
      'noRekPengirim', 'bankPengirim', 'sales'
    ];
    
    formFields.forEach(key => {
      if (formData[key as keyof typeof formData] && typeof formData[key as keyof typeof formData] === 'string') {
        submitData.append(key, formData[key as keyof typeof formData] as string);
      }
    });
    
    // Also send sales as jenisUsaha for backward compatibility
    submitData.append('jenisUsaha', formData.sales || '');
    
    // Get original price for backend
    const priceData = packagePrices[formData.paketUsaha as keyof typeof packagePrices];
    const originalPrice = priceData ? priceData.original : packagePrice;
    
    // Add calculated values
    submitData.append('hargaPaket', packagePrice.toString()); // Current discounted price
    submitData.append('hargaAsli', originalPrice.toString()); // Original price
    submitData.append('nominalDP', dpAmount.toString());
    submitData.append('nominalFull', discountedFullPrice.toString());
    submitData.append('kekurangan', (packagePrice - dpAmount).toString());
    submitData.append('diskonHarian', dayDiscount.toString());
    submitData.append('yangHarusDibayar', Math.max(0, finalAmount).toString());
    
    // Add files
    if (formData.documentsFiles && formData.documentsFiles.length > 0) {
      // Only send the first file (KTP)
      submitData.append('documents', formData.documentsFiles[0]);
    }
    if (formData.buktiTransferFile) {
      submitData.append('buktiTransfer', formData.buktiTransferFile);
    }
    
    // Submit to backend
    console.log('Submitting form data to backend...');
    console.log('Submit data entries:', Array.from(submitData.entries()));
    
    const API_URL = import.meta.env.PUBLIC_API_URL || 'http://localhost:9999';
    const response = await fetch(`${API_URL}/api/mitra/register`, {
      method: 'POST',
      body: submitData
    });
    
    console.log('Response status:', response.status);
    const responseText = await response.text();
    console.log('Response text:', responseText);
    
    if (!response.ok) {
      const errorData = responseText ? JSON.parse(responseText) : {};
      const errorMessage = errorData.error || errorData.details || 'Gagal mengirim formulir';
      throw new Error(errorMessage);
    }

    console.log('Form submitted successfully');
    
    // Move to step 3 (success)
    updateProgressBar(3);
    document.getElementById('form-step-2')?.classList.add('hidden');
    document.getElementById('form-step-3')?.classList.remove('hidden');
    
  } catch (error) {
    console.error('Error submitting form:', error);
    const errorMessage = error instanceof Error ? error.message : 'Terjadi kesalahan saat mengirim formulir';
    alert(`Error: ${errorMessage}`);
  }
}

function updateProgressBar(step: number) {
  for (let i = 1; i <= 3; i++) {
    const stepElement = document.getElementById(`step-${i}`);
    const labelElement = stepElement?.nextElementSibling as HTMLElement;
    
    if (stepElement && labelElement) {
      if (i <= step) {
        stepElement.classList.remove('bg-gray-300', 'text-gray-600');
        stepElement.classList.add('bg-blue-600', 'text-white');
        labelElement.classList.remove('text-gray-600');
        labelElement.classList.add('text-blue-600');
      } else {
        stepElement.classList.remove('bg-blue-600', 'text-white');
        stepElement.classList.add('bg-gray-300', 'text-gray-600');
        labelElement.classList.remove('text-blue-600');
        labelElement.classList.add('text-gray-600');
      }
    }
  }
}

// Function to get URL parameters and set form values
function initializeFromURLParams() {
  const urlParams = new URLSearchParams(window.location.search);
  const paketParam = urlParams.get('paket');
  
  console.log('URL param paket:', paketParam);
  
  if (paketParam) {
    const selectElement = document.getElementById('paketUsaha') as HTMLSelectElement;
    if (selectElement) {
      // Find the matching option value
      let matchingValue = '';
      
      switch (paketParam) {
        case 'Kagawa Rice Bowl':
          matchingValue = 'Kagawa Ricebowl';
          break;
        case 'Kagawa Coffee Corner':
          matchingValue = 'Kagawa Coffee Corner';
          break;
        case 'Kagawa Coffee & Rice Bowl Corner':
          matchingValue = 'Kagawa Coffee & Ricebowl Corner';
          break;
        case 'RM Nusantara':
          matchingValue = 'RM Nusantara';
          break;
        case 'Independent Brand':
          matchingValue = 'Independent Brand';
          break;
        default:
          matchingValue = paketParam;
      }
      
      console.log('Matching value:', matchingValue);
      console.log('Available packages:', Object.keys(packagePrices));
      
      // Set the select value
      if (matchingValue) {
        selectElement.value = matchingValue;
        console.log('Select value set to:', selectElement.value);
        
        // Make select readonly/disabled with better styling
        selectElement.disabled = true;
        selectElement.style.backgroundColor = '#f9fafb';
        selectElement.style.color = '#6b7280';
        selectElement.style.cursor = 'not-allowed';
        selectElement.style.borderColor = '#d1d5db';
        
        // Add disabled class for better styling
        selectElement.classList.add('bg-gray-50', 'text-gray-500', 'cursor-not-allowed');
        
        // Add hidden input to ensure form data is submitted correctly
        const hiddenInput = document.createElement('input');
        hiddenInput.type = 'hidden';
        hiddenInput.name = 'paketUsaha';
        hiddenInput.value = matchingValue;
        selectElement.parentNode?.appendChild(hiddenInput);
        
        // Show the back button
        const backBtn = document.getElementById('backToPackageBtn');
        if (backBtn) {
          backBtn.classList.remove('hidden');
        }
        
        // Add a visual indicator that shows this was pre-selected
        const parentDiv = selectElement.parentNode as HTMLElement;
        if (parentDiv) {
          // Create info message
          const infoDiv = document.createElement('div');
          infoDiv.className = 'mt-2 p-3 bg-blue-50 border border-blue-200 rounded-lg flex items-center space-x-2';
          infoDiv.innerHTML = `
            <svg class="w-5 h-5 text-blue-500" fill="currentColor" viewBox="0 0 20 20">
              <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z" clip-rule="evenodd"></path>
            </svg>
            <div>
              <p class="text-sm font-medium text-blue-800">Paket telah dipilih: ${matchingValue}</p>
              <p class="text-xs text-blue-600">Klik tombol "Ubah Pilihan Paket" di atas untuk mengubah pilihan</p>
            </div>
          `;
          
          // Insert after the select element
          selectElement.parentNode?.insertBefore(infoDiv, selectElement.nextSibling);
        }
        
        // Trigger change event to update price display
        // Use setTimeout to ensure event listeners are attached
        setTimeout(() => {
          console.log('Dispatching change event...');
          const event = new Event('change', { bubbles: true });
          selectElement.dispatchEvent(event);
          
          // Also manually trigger the update as fallback
          selectedPackage = matchingValue;
          const priceData = packagePrices[selectedPackage as keyof typeof packagePrices];
          console.log('Manual fallback - selectedPackage:', selectedPackage);
          console.log('Manual fallback - priceData:', priceData);
          if (priceData) {
            packagePrice = priceData.discounted;
            updatePriceDisplay(priceData);
            updatePaymentCards();
            console.log('Manual price update completed');
          } else {
            console.error('No price data found for package:', selectedPackage);
          }
        }, 100);
      }
    }
  }
}

// Initialize form when DOM is loaded
document.addEventListener('DOMContentLoaded', function() {
  initializeFromURLParams();
});

// Setup info tooltips
function setupInfoTooltips() {
  // Get all info buttons
  const infoButtons = document.querySelectorAll('.info-button');
  
  infoButtons.forEach(button => {
    const buttonId = button.getAttribute('id');
    if (!buttonId) return;
    
    // Extract the tooltip ID from button ID (e.g., 'info-sistem-kemitraan' -> 'tooltip-sistem-kemitraan')
    const tooltipId = buttonId.replace('info-', 'tooltip-');
    const tooltip = document.getElementById(tooltipId);
    
    if (!tooltip) return;
    
    // Show tooltip on click
    button.addEventListener('click', (e) => {
      e.preventDefault();
      e.stopPropagation();
      
      // Hide all other tooltips first
      document.querySelectorAll('[id^="tooltip-"]').forEach(t => {
        if (t.id !== tooltipId) {
          t.classList.add('hidden');
        }
      });
      
      // Toggle current tooltip
      tooltip.classList.toggle('hidden');
    });
    
    // Close tooltip when close button is clicked
    const closeBtn = tooltip.querySelector('.close-tooltip');
    if (closeBtn) {
      closeBtn.addEventListener('click', (e) => {
        e.preventDefault();
        e.stopPropagation();
        tooltip.classList.add('hidden');
      });
    }
  });
  
  // Close tooltips when clicking outside
  document.addEventListener('click', (e) => {
    const target = e.target as HTMLElement;
    
    // Don't close if clicking on info button or inside tooltip
    if (target.closest('.info-button') || target.closest('[id^="tooltip-"]')) {
      return;
    }
    
    // Close all tooltips
    document.querySelectorAll('[id^="tooltip-"]').forEach(tooltip => {
      tooltip.classList.add('hidden');
    });
  });
  
  // Close tooltips on escape key
  document.addEventListener('keydown', (e) => {
    if (e.key === 'Escape') {
      document.querySelectorAll('[id^="tooltip-"]').forEach(tooltip => {
        tooltip.classList.add('hidden');
      });
    }
  });
}
</script>