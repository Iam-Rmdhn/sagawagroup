---
import Layout from '../layouts/Layout.astro';
import contohMitra from '../assets/img/contoh-mitra.png';
---

<Layout title="Form Pendaftaran Mitra">
  <!-- Modern Form Styles -->
  <style>
    /* Animated blob animation */
    @keyframes blob {
      0% { transform: translate(0px, 0px) scale(1); }
      33% { transform: translate(30px, -50px) scale(1.1); }
      66% { transform: translate(-20px, 20px) scale(0.9); }
      100% { transform: translate(0px, 0px) scale(1); }
    }
    
    .animate-blob {
      animation: blob 7s infinite;
    }
    
    .animation-delay-2000 {
      animation-delay: 2s;
    }
    
    .animation-delay-4000 {
      animation-delay: 4s;
    }
    
    .animation-delay-6000 {
      animation-delay: 6s;
    }
    
    /* Enhanced form styling */
    .form-container {
      background: linear-gradient(135deg, rgba(255, 255, 255, 0.95) 0%, rgba(251, 191, 36, 0.02) 100%);
      backdrop-filter: blur(10px);
      border: 1px solid rgba(251, 191, 36, 0.1);
    }
    
    .form-container:hover {
      border-color: rgba(251, 191, 36, 0.2);
      box-shadow: 0 20px 25px -5px rgba(251, 191, 36, 0.1), 0 10px 10px -5px rgba(251, 191, 36, 0.04);
    }

    /* Mobile responsive improvements */
    @media (max-width: 640px) {
      .animate-blob {
        display: none; /* Hide animated blobs on mobile for performance */
      }
      
      .mobile-stack {
        flex-direction: column;
        gap: 0.75rem;
      }
      
      .mobile-center {
        text-align: center;
      }
      
      .mobile-full-width {
        width: 100%;
      }
      
      /* Responsive text sizing */
      .text-mobile-lg { font-size: 1.125rem; }
      .text-mobile-xl { font-size: 1.25rem; }
      .text-mobile-2xl { font-size: 1.5rem; }
      .text-mobile-3xl { font-size: 1.875rem; }
      
      /* Mobile form adjustments */
      .form-container {
        margin: 0.5rem;
        padding: 1rem !important;
      }
      
      /* Mobile upload areas */
      .upload-area-mobile {
        padding: 1.5rem 1rem !important;
      }
      
      /* Mobile tooltips */
      .tooltip-mobile {
        position: fixed !important;
        top: 50% !important;
        left: 50% !important;
        transform: translate(-50%, -50%) !important;
        max-width: calc(100vw - 2rem) !important;
        max-height: calc(100vh - 4rem) !important;
        overflow-y: auto;
        z-index: 50 !important;
      }
    }

    /* Input sanitization indicators - hidden for security */
    .input-sanitized {
      /* No visual feedback to hide sanitization from users */
    }

    .input-error {
      /* No visual feedback to hide sanitization from users */
    }

    .sanitization-notice {
      background: linear-gradient(135deg, #fef3c7, #fde68a);
      border: 1px solid #f59e0b;
      border-radius: 8px;
      padding: 12px;
      margin-top: 8px;
      font-size: 14px;
      color: #92400e;
    }

    .sanitization-notice.success {
      background: linear-gradient(135deg, #d1fae5, #a7f3d0);
      border-color: #10b981;
      color: #065f46;
    }

    /* Mobile-friendly dropdown styles */
    @media (max-width: 640px) {
      select {
        font-size: 16px !important; /* Prevents zoom on iOS */
        min-height: 44px; /* Better touch target */
      }
      
      select option {
        padding: 12px 8px;
        font-size: 14px;
        line-height: 1.4;
      }
    }
    
    /* Enhanced dropdown appearance */
    select:focus + div svg {
      transform: rotate(180deg);
      transition: transform 0.2s ease;
    }
    
    select:not(:focus) + div svg {
      transition: transform 0.2s ease;
    }

    /* Mobile package modal styles */
    .package-option:active {
      background-color: #fef3c7;
      transform: scale(0.98);
    }

    .package-option h4 {
      color: #374151;
    }

    .package-option:hover h4 {
      color: #1f2937;
    }

    /* Mobile package selector button active state */
    #mobilePaketSelector:active {
      transform: scale(0.98);
    }

    #mobilePaketSelector[disabled="true"] {
      cursor: not-allowed;
      background-color: #f3f4f6;
      border-color: #d1d5db;
      pointer-events: none;
    }

    #mobilePaketSelector[disabled="true"]:hover {
      background-color: #f3f4f6;
      border-color: #d1d5db;
    }

    #desktopPaketSelector[disabled="true"] {
      cursor: not-allowed;
      background-color: #f3f4f6;
      border-color: #d1d5db;
      pointer-events: none;
    }

    #desktopPaketSelector[disabled="true"]:hover {
      background-color: #f3f4f6;
      border-color: #d1d5db;
    }

    /* Desktop custom dropdown styles */
    #desktopDropdownMenu.desktop-dropdown-open {
      opacity: 1;
      visibility: visible;
      transform: scale(1);
    }

    #desktopDropdownArrow.desktop-dropdown-open {
      transform: rotate(180deg);
    }

    .desktop-package-option:active {
      transform: scale(0.98);
    }

    .desktop-package-option.selected {
      background: linear-gradient(to right, #fef3c7, #fed7aa);
      border-left: 4px solid #f59e0b;
    }

    .desktop-package-option.selected .w-4 {
      border-color: #f59e0b;
    }

    .desktop-package-option.selected .w-2 {
      opacity: 1;
    }

    /* Smooth scrollbar for dropdown */
    #desktopDropdownMenu::-webkit-scrollbar {
      width: 6px;
    }

    #desktopDropdownMenu::-webkit-scrollbar-track {
      background: #f1f5f9;
      border-radius: 3px;
    }

    #desktopDropdownMenu::-webkit-scrollbar-thumb {
      background: #d97706;
      border-radius: 3px;
    }

    #desktopDropdownMenu::-webkit-scrollbar-thumb:hover {
      background: #b45309;
    }

    /* Locked package styles */
    .package-option[disabled="true"],
    .desktop-package-option[disabled="true"] {
      background-color: #f9fafb;
      color: #9ca3af;
      cursor: not-allowed;
      pointer-events: none;
    }

    .package-option[disabled="true"] h4,
    .desktop-package-option[disabled="true"] h4 {
      color: #9ca3af;
    }

    .package-option[disabled="true"] .text-green-600,
    .desktop-package-option[disabled="true"] .text-green-600 {
      color: #d1d5db;
    }

    /* Selected and locked package highlight */
    .package-locked-selected {
      background: linear-gradient(135deg, #fef3c7, #fed7aa) !important;
      border-left: 4px solid #f59e0b !important;
      position: relative;
    }

    .package-locked-selected::after {
      content: 'âœ“';
      position: absolute;
      top: 0.5rem;
      right: 0.5rem;
      background: #059669;
      color: white;
      border-radius: 50%;
      width: 1.5rem;
      height: 1.5rem;
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 0.75rem;
      font-weight: bold;
    }
  </style>

  <div class="min-h-screen bg-gradient-to-br from-amber-50 via-orange-50 to-amber-100 relative overflow-hidden">
    <!-- Animated Background Elements -->
    <div class="absolute inset-0 overflow-hidden">
      <div class="absolute top-10 left-10 w-72 h-72 bg-amber-200/30 rounded-full mix-blend-multiply filter blur-xl animate-blob"></div>
      <div class="absolute top-0 right-4 w-72 h-72 bg-orange-200/30 rounded-full mix-blend-multiply filter blur-xl animate-blob animation-delay-2000"></div>
      <div class="absolute -bottom-8 left-20 w-72 h-72 bg-yellow-200/30 rounded-full mix-blend-multiply filter blur-xl animate-blob animation-delay-4000"></div>
      <div class="absolute bottom-10 right-10 w-72 h-72 bg-amber-300/20 rounded-full mix-blend-multiply filter blur-xl animate-blob animation-delay-6000"></div>
    </div>
    
    <div class="relative z-10 max-w-4xl mx-auto px-2 sm:px-4 lg:px-8 py-4 sm:py-8">
      <!-- Breadcrumb -->
      <nav class="flex mb-4 sm:mb-8 overflow-x-auto" aria-label="Breadcrumb">
        <ol class="inline-flex items-center space-x-1 md:space-x-3 bg-white/80 backdrop-blur-sm rounded-xl px-3 sm:px-6 py-2 sm:py-3 border border-amber-200/50 min-w-max">
          <li class="inline-flex items-center flex-shrink-0">
            <a href="/" class="inline-flex items-center text-xs sm:text-sm font-medium text-gray-700 hover:text-amber-600 transition-colors duration-200">
              <svg class="w-3 h-3 sm:w-4 sm:h-4 me-2 sm:me-2.5 flex-shrink-0" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 20 20">
                <path d="m19.707 9.293-2-2-7-7a1 1 0 0 0-1.414 0l-7 7-2 2a1 1 0 0 0 1.414 1.414L2 10.414V18a2 2 0 0 0 2 2h3a1 1 0 0 0 1-1v-4a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1v4a1 1 0 0 0 1 1h3a2 2 0 0 0 2-2v-7.586l.293.293a1 1 0 0 0 1.414-1.414Z"/>
              </svg>
              <span class="truncate">Beranda</span>
            </a>
          </li>
          <li class="flex-shrink-0">
            <div class="flex items-center">
              <svg class="rtl:rotate-180 w-2 h-2 sm:w-3 sm:h-3 text-amber-400 mx-1 flex-shrink-0" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 6 10">
                <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m1 9 4-4-4-4"/>
              </svg>
              <a href="/mitra" class="ml-1 text-xs sm:text-sm font-medium text-gray-700 hover:text-amber-600 md:ml-2 transition-colors duration-200 truncate">
                Kemitraan
              </a>
            </div>
          </li>
          <li aria-current="page" class="flex-shrink-0">
            <div class="flex items-center">
              <svg class="rtl:rotate-180 w-2 h-2 sm:w-3 sm:h-3 text-amber-400 mx-1 flex-shrink-0" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 6 10">
                <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m1 9 4-4-4-4"/>
              </svg>
              <span class="ml-1 text-xs sm:text-sm font-semibold text-amber-600 md:ml-2 truncate">Form Pendaftaran</span>
            </div>
          </li>
        </ol>
      </nav>

      <!-- Page Title -->
      <div class="text-center mb-4 sm:mb-8">
        <div class="inline-block bg-white/60 backdrop-blur-sm rounded-2xl px-4 sm:px-8 py-4 sm:py-6 shadow-xl border border-amber-200/30">
          <h1 class="text-xl sm:text-2xl lg:text-3xl font-bold bg-gradient-to-r from-amber-600 via-orange-600 to-amber-700 bg-clip-text text-transparent mb-2 sm:mb-3">
            Form Pendaftaran Mitra
          </h1>
          <p class="text-sm sm:text-base lg:text-lg text-gray-700">Bergabunglah dengan keluarga besar Sagawa Group dan wujudkan impian bisnis Anda!</p>
        </div>
      </div>

      <!-- Progress Bar -->
      <div class="mb-6 px-4">
        <!-- Mobile Progress Bar -->
        <div class="block sm:hidden">
          <div class="bg-white/90 backdrop-blur-sm rounded-xl p-4 shadow-lg">
            <!-- Progress Track -->
            <div class="relative mb-4">
              <div class="h-2 bg-gray-200 rounded-full overflow-hidden">
                <div id="mobile-progress-fill" class="h-full bg-gradient-to-r from-amber-500 to-orange-600 rounded-full transition-all duration-500 ease-out" style="width: 33.33%"></div>
              </div>
              <!-- Step indicators -->
              <div class="absolute top-0 left-0 w-full flex justify-between transform -translate-y-1">
                <div id="mobile-step-1" class="w-4 h-4 bg-gradient-to-r from-amber-500 to-orange-600 rounded-full shadow-sm border-2 border-white"></div>
                <div id="mobile-step-2" class="w-4 h-4 bg-gray-300 rounded-full shadow-sm border-2 border-white"></div>
                <div id="mobile-step-3" class="w-4 h-4 bg-gray-300 rounded-full shadow-sm border-2 border-white"></div>
              </div>
            </div>
            <!-- Step Labels -->
            <div class="flex justify-between text-xs font-medium">
              <span id="mobile-label-1" class="text-amber-600">Isi Form</span>
              <span id="mobile-label-2" class="text-gray-400">Konfirmasi</span>
              <span id="mobile-label-3" class="text-gray-400">Selesai</span>
            </div>
          </div>
        </div>

        <!-- Desktop Progress Bar -->
        <div class="hidden sm:block">
          <div class="bg-white/90 backdrop-blur-sm rounded-2xl px-8 py-5 shadow-lg max-w-2xl mx-auto">
            <div class="flex items-center justify-between">
              <!-- Step 1 -->
              <div class="flex items-center space-x-3">
                <div id="desktop-step-1" class="w-10 h-10 bg-gradient-to-r from-amber-500 to-orange-600 text-white rounded-full flex items-center justify-center font-semibold shadow-md text-sm">
                  1
                </div>
                <span id="desktop-label-1" class="text-sm font-medium text-amber-600">Isi Form</span>
              </div>
              
              <!-- Progress Line 1 -->
              <div class="flex-1 mx-4">
                <div class="h-1.5 bg-gray-200 rounded-full overflow-hidden">
                  <div id="desktop-progress-1" class="h-full bg-gradient-to-r from-amber-500 to-orange-600 rounded-full transition-all duration-500 ease-out" style="width: 100%"></div>
                </div>
              </div>
              
              <!-- Step 2 -->
              <div class="flex items-center space-x-3">
                <div id="desktop-step-2" class="w-10 h-10 bg-gray-200 text-gray-500 rounded-full flex items-center justify-center font-semibold shadow-sm text-sm border-2 border-gray-300">
                  2
                </div>
                <span id="desktop-label-2" class="text-sm font-medium text-gray-400">Konfirmasi</span>
              </div>
              
              <!-- Progress Line 2 -->
              <div class="flex-1 mx-4">
                <div class="h-1.5 bg-gray-200 rounded-full overflow-hidden">
                  <div id="desktop-progress-2" class="h-full bg-gradient-to-r from-amber-500 to-orange-600 rounded-full transition-all duration-500 ease-out" style="width: 0%"></div>
                </div>
              </div>
              
              <!-- Step 3 -->
              <div class="flex items-center space-x-3">
                <div id="desktop-step-3" class="w-10 h-10 bg-gray-200 text-gray-500 rounded-full flex items-center justify-center font-semibold shadow-sm text-sm border-2 border-gray-300">
                  3
                </div>
                <span id="desktop-label-3" class="text-sm font-medium text-gray-400">Selesai</span>
              </div>
            </div>
          </div>
        </div>

      <!-- Form Container -->
      <div class="form-container rounded-xl p-3 mt-3 sm:p-3 transition-all duration-300">

        <!-- Step 1: Form Data -->
        <div id="form-step-1" class="space-y-6 sm:space-y-8">
          <!-- Pilih Sistem Kemitraan -->
          <div>
            <div class="flex items-center mb-3 sm:mb-4 relative">
              <h3 class="text-base sm:text-lg font-semibold text-gray-800">Pilih Sistem Kemitraan</h3>
              <button type="button" id="info-sistem-kemitraan" class="info-button ml-2 focus:outline-none hover:text-amber-600 transition-colors flex-shrink-0">
                <svg class="w-4 h-4 sm:w-5 sm:h-5 text-gray-400 hover:text-amber-600" fill="currentColor" viewBox="0 0 20 20">
                  <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-8-3a1 1 0 00-.867.5 1 1 0 11-1.731-1A3 3 0 0113 8a3.001 3.001 0 01-2 2.83V11a1 1 0 11-2 0v-1a1 1 0 011-1 1 1 0 100-2zm0 8a1 1 0 100-2 1 1 0 000 2z" clip-rule="evenodd"></path>
                </svg>
              </button>
              <!-- Tooltip for Sistem Kemitraan -->
              <div id="tooltip-sistem-kemitraan" class="hidden absolute left-0 top-8 mt-2 p-4 bg-white border border-gray-200 rounded-lg shadow-lg z-10 max-w-sm sm:max-w-md">
                <div class="relative">
                  <button type="button" class="close-tooltip absolute top-0 right-0 -mt-2 -mr-2 text-gray-400 hover:text-gray-600">
                    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                    </svg>
                  </button>
                  <h4 class="font-semibold text-red-800 mb-2 text-sm sm:text-base">Sistem Kemitraan</h4>
                  <p class="text-xs sm:text-sm text-gray-600">
                    Untuk Sistem Kemitraan anda dapat memilih:<br>
                    â€¢ <strong>Autopilot:</strong> Sistem dikelola penuh oleh tim Sagawa Group<br>
                    â€¢ <strong>Semi Autopilot:</strong> Sistem dikelola bersama antara mitra dan tim Sagawa Group<br>
                    â€¢ <strong>Self Managed:</strong> Sistem dikelola penuh oleh mitra
                  </p>
                  <p class="text-xs sm:text-sm">--------------------------------------------------------------------</p>
                  <p class="text-xs sm:text-sm text-gray-600">
                    <strong>Untuk PIC/Sales</strong><br>
                    Anda dapat mengisikan dengan nama Sales yang menangani anda
                  </p>
                </div>
              </div>
            </div>
            
            <div class="grid grid-cols-1 sm:grid-cols-3 gap-3 sm:gap-4 mb-4">
              <div class="flex items-center">
                <input id="autopilot" name="sistemKemitraan" type="radio" value="Autopilot" class="w-4 h-4 text-amber-600 bg-gray-100 border-gray-300 focus:ring-amber-500 flex-shrink-0">
                <label for="autopilot" class="ml-2 text-sm font-medium text-gray-700">Autopilot</label>
              </div>
              <div class="flex items-center">
                <input id="semi-autopilot" name="sistemKemitraan" type="radio" value="Semi Autopilot" class="w-4 h-4 text-amber-600 bg-gray-100 border-gray-300 focus:ring-amber-500 flex-shrink-0">
                <label for="semi-autopilot" class="ml-2 text-sm font-medium text-gray-700">Semi Autopilot</label>
              </div>
              <div class="flex items-center">
                <input id="self-managed" name="sistemKemitraan" type="radio" value="Self Managed" class="w-4 h-4 text-amber-600 bg-gray-100 border-gray-300 focus:ring-amber-500 flex-shrink-0">
                <label for="self-managed" class="ml-2 text-sm font-medium text-gray-700">Self Managed</label>
              </div>
            </div>

            <input type="text" id="sales" placeholder="PIC/Sales" class="w-full px-3 sm:px-4 py-2 sm:py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-amber-500 focus:border-transparent text-sm sm:text-base">
          </div>

          <!-- Pilih Paket Usaha -->
          <div>
            <div class="flex flex-col sm:flex-row items-start sm:items-center justify-between mb-3 sm:mb-4 gap-2">
              <h3 class="text-base sm:text-lg font-semibold text-gray-800">Pilih Paket Usaha</h3>
              <button id="backToPackageBtn" onclick="window.history.back()" class="hidden px-3 sm:px-4 py-2 text-xs sm:text-sm bg-amber-500 text-white rounded-lg hover:bg-amber-600 transition-colors focus:outline-none focus:ring-2 focus:ring-amber-500 focus:ring-offset-2 w-full sm:w-auto">
                <svg class="w-3 h-3 sm:w-4 sm:h-4 inline mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19l-7-7m0 0l7-7m-7 7h18"></path>
                </svg>
                Ubah Pilihan Paket
              </button>
            </div>
            
            <!-- Mobile Package Selection Button -->
            <div class="block sm:hidden">
              <button id="mobilePaketSelector" type="button" class="w-full px-4 py-4 border-2 border-gray-300 rounded-xl bg-white text-left focus:ring-2 focus:ring-amber-500 focus:border-transparent transition-all duration-200 hover:border-amber-400 hover:bg-amber-50/30">
                <div class="flex justify-between items-center">
                  <span id="mobilePaketText" class="text-gray-500 font-medium">Pilih Paket usaha*</span>
                  <svg class="w-5 h-5 text-amber-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
                  </svg>
                </div>
              </button>
            </div>

            <!-- Desktop Package Selection Dropdown -->
            <div class="hidden sm:block relative">
              <!-- Custom Dropdown Button -->
              <button id="desktopPaketSelector" type="button" class="w-full px-4 py-4 border border-gray-300 rounded-xl bg-white text-left focus:ring-2 focus:ring-amber-500 focus:border-transparent transition-all duration-200 hover:border-amber-400 hover:bg-amber-50/30 shadow-sm hover:shadow-md">
                <div class="flex justify-between items-center">
                  <span id="desktopPaketText" class="text-gray-500 font-medium">Pilih Paket usaha*</span>
                  <svg id="desktopDropdownArrow" class="w-5 h-5 text-amber-500 transition-transform duration-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
                  </svg>
                </div>
              </button>

              <!-- Custom Dropdown Menu -->
              <div id="desktopDropdownMenu" class="absolute top-full left-0 w-full mt-2 bg-white border border-gray-200 rounded-xl shadow-xl z-50 opacity-0 invisible transform -translate-y-2 transition-all duration-300 ease-out max-h-80 overflow-y-auto">
                <!-- Package Options -->
                <div class="divide-y divide-gray-50">
                  <!-- Kagawa Coffee Corner -->
                  <button type="button" data-package="Kagawa Coffee Corner" data-original="100000000" data-discounted="89000000" class="desktop-package-option w-full text-left px-4 py-4 hover:bg-gradient-to-r hover:from-amber-50 hover:to-orange-50 transition-all duration-200 group">
                    <div class="flex justify-between items-center">
                      <div class="flex-1">
                        <h4 class="font-semibold text-gray-800 text-sm group-hover:text-amber-800 transition-colors">Kagawa Coffee Corner</h4>
                        <div class="flex items-center space-x-2 mt-1">
                          <span class="text-xs text-gray-400 line-through">Rp 100.000.000</span>
                          <span class="text-xs text-green-600 font-medium">â†’ Rp 89.000.000</span>
                        </div>
                        <p class="text-xs text-green-600 mt-0.5">Hemat Rp 11.000.000</p>
                      </div>
                      <div class="w-4 h-4 border-2 border-gray-300 rounded-full group-hover:border-amber-500 transition-colors flex items-center justify-center">
                        <div class="w-2 h-2 bg-amber-500 rounded-full opacity-0 group-hover:opacity-100 transition-opacity"></div>
                      </div>
                    </div>
                  </button>

                  <!-- Kagawa Ricebowl -->
                  <button type="button" data-package="Kagawa Ricebowl" data-original="75000000" data-discounted="50000000" class="desktop-package-option w-full text-left px-4 py-4 hover:bg-gradient-to-r hover:from-amber-50 hover:to-orange-50 transition-all duration-200 group">
                    <div class="flex justify-between items-center">
                      <div class="flex-1">
                        <h4 class="font-semibold text-gray-800 text-sm group-hover:text-amber-800 transition-colors">Kagawa Ricebowl</h4>
                        <div class="flex items-center space-x-2 mt-1">
                          <span class="text-xs text-gray-400 line-through">Rp 75.000.000</span>
                          <span class="text-xs text-green-600 font-medium">â†’ Rp 50.000.000</span>
                        </div>
                        <p class="text-xs text-green-600 mt-0.5">Hemat Rp 25.000.000</p>
                      </div>
                      <div class="w-4 h-4 border-2 border-gray-300 rounded-full group-hover:border-amber-500 transition-colors flex items-center justify-center">
                        <div class="w-2 h-2 bg-amber-500 rounded-full opacity-0 group-hover:opacity-100 transition-opacity"></div>
                      </div>
                    </div>
                  </button>

                  <!-- Kagawa Coffee & Ricebowl Corner -->
                  <button type="button" data-package="Kagawa Coffee & Ricebowl Corner" data-original="175000000" data-discounted="139000000" class="desktop-package-option w-full text-left px-4 py-4 hover:bg-gradient-to-r hover:from-amber-50 hover:to-orange-50 transition-all duration-200 group">
                    <div class="flex justify-between items-center">
                      <div class="flex-1">
                        <h4 class="font-semibold text-gray-800 text-sm group-hover:text-amber-800 transition-colors">Kagawa Coffee & Ricebowl Corner</h4>
                        <div class="flex items-center space-x-2 mt-1">
                          <span class="text-xs text-gray-400 line-through">Rp 175.000.000</span>
                          <span class="text-xs text-green-600 font-medium">â†’ Rp 139.000.000</span>
                        </div>
                        <p class="text-xs text-green-600 mt-0.5">Hemat Rp 36.000.000</p>
                      </div>
                      <div class="w-4 h-4 border-2 border-gray-300 rounded-full group-hover:border-amber-500 transition-colors flex items-center justify-center">
                        <div class="w-2 h-2 bg-amber-500 rounded-full opacity-0 group-hover:opacity-100 transition-opacity"></div>
                      </div>
                    </div>
                  </button>

                  <!-- RM Nusantara -->
                  <button type="button" data-package="RM Nusantara" data-original="100000000" data-discounted="89000000" class="desktop-package-option w-full text-left px-4 py-4 hover:bg-gradient-to-r hover:from-amber-50 hover:to-orange-50 transition-all duration-200 group">
                    <div class="flex justify-between items-center">
                      <div class="flex-1">
                        <h4 class="font-semibold text-gray-800 text-sm group-hover:text-amber-800 transition-colors">RM Nusantara</h4>
                        <div class="text-xs text-gray-500 mt-0.5">WarNas, Mas Gaw & Masakan Mas Gawa</div>
                        <div class="flex items-center space-x-2 mt-1">
                          <span class="text-xs text-gray-400 line-through">Rp 100.000.000</span>
                          <span class="text-xs text-green-600 font-medium">â†’ Rp 89.000.000</span>
                        </div>
                        <p class="text-xs text-green-600 mt-0.5">Hemat Rp 11.000.000</p>
                      </div>
                      <div class="w-4 h-4 border-2 border-gray-300 rounded-full group-hover:border-amber-500 transition-colors flex items-center justify-center">
                        <div class="w-2 h-2 bg-amber-500 rounded-full opacity-0 group-hover:opacity-100 transition-opacity"></div>
                      </div>
                    </div>
                  </button>

                  <!-- Independent Brand -->
                  <button type="button" data-package="Independent Brand" data-original="70000000" data-discounted="49000000" class="desktop-package-option w-full text-left px-4 py-4 hover:bg-gradient-to-r hover:from-amber-50 hover:to-orange-50 transition-all duration-200 group">
                    <div class="flex justify-between items-center">
                      <div class="flex-1">
                        <h4 class="font-semibold text-gray-800 text-sm group-hover:text-amber-800 transition-colors">Independent Brand</h4>
                        <div class="flex items-center space-x-2 mt-1">
                          <span class="text-xs text-gray-400 line-through">Rp 70.000.000</span>
                          <span class="text-xs text-green-600 font-medium">â†’ Rp 49.000.000</span>
                        </div>
                        <p class="text-xs text-green-600 mt-0.5">Hemat Rp 21.000.000</p>
                      </div>
                      <div class="w-4 h-4 border-2 border-gray-300 rounded-full group-hover:border-amber-500 transition-colors flex items-center justify-center">
                        <div class="w-2 h-2 bg-amber-500 rounded-full opacity-0 group-hover:opacity-100 transition-opacity"></div>
                      </div>
                    </div>
                  </button>
                </div>
              </div>

              <!-- Hidden select for form compatibility -->
              <select id="paketUsaha" class="hidden">
                <option value="">Pilih Paket usaha*</option>
                <option value="Kagawa Coffee Corner" data-original="100000000" data-discounted="89000000">
                  Kagawa Coffee Corner - Rp 89 Jt (Hemat 11 Jt)
                </option>
                <option value="Kagawa Ricebowl" data-original="75000000" data-discounted="50000000">
                  Kagawa Ricebowl - Rp 50 Jt (Hemat 25 Jt)
                </option>
                <option value="Kagawa Coffee & Ricebowl Corner" data-original="175000000" data-discounted="139000000">
                  Kagawa Coffee & Ricebowl - Rp 139 Jt (Hemat 36 Jt)
                </option>
                <option value="RM Nusantara" data-original="100000000" data-discounted="89000000">
                  RM Nusantara - Rp 89 Jt (Hemat 11 Jt)
                </option>
                <option value="Independent Brand" data-original="70000000" data-discounted="49000000">
                  Independent Brand - Rp 49 Jt (Hemat 21 Jt)
                </option>
              </select>
            </div>
            
            <!-- RM Nusantara Sub Options -->
            <div id="rmNusantaraOptions" class="mt-4 p-3 sm:p-4 bg-amber-50 rounded-lg border border-amber-200 hidden">
              <h4 class="text-sm sm:text-base font-semibold text-gray-800 mb-2 sm:mb-3">Pilih Sub Menu RM Nusantara*</h4>
              <div class="space-y-2">
                <div class="flex items-center">
                  <input id="warnas" name="rmNusantaraSubMenu" type="radio" value="WarNas" class="w-4 h-4 text-amber-600 bg-gray-100 border-gray-300 focus:ring-amber-500 flex-shrink-0">
                  <label for="warnas" class="ml-2 text-sm font-medium text-gray-700">WarNas</label>
                </div>
                <div class="flex items-center">
                  <input id="mas-gaw" name="rmNusantaraSubMenu" type="radio" value="Mas Gaw" class="w-4 h-4 text-amber-600 bg-gray-100 border-gray-300 focus:ring-amber-500 flex-shrink-0">
                  <label for="mas-gaw" class="ml-2 text-sm font-medium text-gray-700">Mas Gaw</label>
                </div>
                <div class="flex items-center">
                  <input id="masakan-mas-gawa" name="rmNusantaraSubMenu" type="radio" value="Masakan Mas Gawa" class="w-4 h-4 text-amber-600 bg-gray-100 border-gray-300 focus:ring-amber-500 flex-shrink-0">
                  <label for="masakan-mas-gawa" class="ml-2 text-sm font-medium text-gray-700">Masakan Mas Gawa</label>
                </div>
              </div>
            </div>
            
            <!-- Price Display -->
            <div id="priceDisplay" class="mt-4 p-3 sm:p-4 bg-gradient-to-r from-red-50 to-green-50 rounded-lg border hidden">
              <div class="text-center">
                <p class="text-xs sm:text-sm text-gray-600 mb-2">Harga Paket Kemitraan yang Dipilih :</p>
                <div class="flex flex-col sm:flex-row items-center justify-center space-y-2 sm:space-y-0 sm:space-x-4">
                  <span id="originalPrice" class="text-base sm:text-lg text-gray-500 line-through"></span>
                  <svg class="w-4 h-4 sm:w-5 sm:h-5 text-green-600 hidden sm:block" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 7l5 5m0 0l-5 5m5-5H6"></path>
                  </svg>
                  <span id="discountedPrice" class="text-xl sm:text-2xl font-bold text-green-600"></span>
                </div>
                <p class="text-xs text-green-600 mt-1">Anda Hemat <span id="savingsAmount"></span></p>
              </div>
            </div>
          </div>

          <!-- Data Diri Mitra -->
          <div>
            <div class="flex items-center mb-3 sm:mb-4 relative">
              <h3 class="text-base sm:text-lg font-semibold text-gray-800">Data Diri Mitra</h3>
              <button type="button" id="info-data-diri" class="info-button ml-2 focus:outline-none hover:text-amber-600 transition-colors flex-shrink-0">
                <svg class="w-4 h-4 sm:w-5 sm:h-5 text-gray-400 hover:text-amber-600" fill="currentColor" viewBox="0 0 20 20">
                  <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-8-3a1 1 0 00-.867.5 1 1 0 11-1.731-1A3 3 0 0113 8a3.001 3.001 0 01-2 2.83V11a1 1 0 11-2 0v-1a1 1 0 011-1 1 1 0 100-2zm0 8a1 1 0 100-2 1 1 0 000 2z" clip-rule="evenodd"></path>
                </svg>
              </button>
              <!-- Tooltip for Data Diri Mitra -->
              <div id="tooltip-data-diri" class="hidden absolute left-0 top-8 mt-2 p-4 bg-white border border-gray-200 rounded-lg shadow-lg z-10 max-w-sm sm:max-w-md">
                <div class="relative">
                  <button type="button" class="close-tooltip absolute top-0 right-0 -mt-2 -mr-2 text-gray-400 hover:text-gray-600">
                    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                    </svg>
                  </button>
                  <h4 class="font-semibold text-red-800 mb-2 text-sm sm:text-base">Data Diri Mitra</h4>
                    <p class="text-xs sm:text-sm text-gray-600">
                        Mohon lengkapi data diri Anda dengan informasi yang akurat:<br>
                        <br>
                        &bull; <strong>Nama Lengkap Mitra:</strong> Cantumkan nama lengkap Anda sesuai yang tertera di Kartu Tanda Penduduk (KTP).<br>
                        &bull; <strong>Alamat:</strong> Sertakan alamat domisili Anda secara lengkap dan jelas.<br>
                        &bull; <strong>Nomor Telepon Seluler (HP):</strong> Masukkan nomor yang aktif dan mudah dihubungi untuk keperluan komunikasi.<br>
                        &bull; <strong>Alamat Email:</strong> Gunakan alamat email yang masih aktif dan sering Anda periksa, karena akan digunakan untuk keperluan komunikasi serta verifikasi.<br>
                        &bull; <strong>Dokumen Foto:</strong> Silakan unggah foto KTP, NPWP, dan foto diri Anda (swafoto) dalam format kolase. Pastikan foto-foto tersebut terlihat jelas dan tidak buram.
                    </p>
                  <p class="text-xs sm:text-sm text-gray-600 mb-2"><strong>Seperti contoh :</strong></p>
                  <img src={contohMitra.src} alt="Contoh Foto Kolase Mitra" class="w-full max-w-xs rounded-lg border border-gray-200 mb-2" />
                </div>
              </div>
            </div>
            
            <div class="space-y-3 sm:space-y-4">
              <input type="text" id="namaMitra" placeholder="Nama Mitra*" class="w-full px-3 sm:px-4 py-2 sm:py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-amber-500 focus:border-transparent text-sm sm:text-base">
              
              <input type="text" id="alamatMitra" placeholder="Alamat Mitra*" class="w-full px-3 sm:px-4 py-2 sm:py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-amber-500 focus:border-transparent text-sm sm:text-base">
              
              <div class="grid grid-cols-1 sm:grid-cols-2 gap-3 sm:gap-4">
                <input type="tel" id="noHp" placeholder="No HP*" class="w-full px-3 sm:px-4 py-2 sm:py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-amber-500 focus:border-transparent text-sm sm:text-base">
                <input type="text" id="email" placeholder="Email*" class="w-full px-3 sm:px-4 py-2 sm:py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-amber-500 focus:border-transparent text-sm sm:text-base">
              </div>
            </div>
            
            <!-- File Upload Section -->
            <div class="mt-4">
              <p class="text-xs sm:text-sm text-red-500 mb-2">(Sertakan foto KTP, Foto NPWP & Foto Mitra dalam 1 file dokument)</p>
              
              <div id="documentsUploadArea" class="border-2 border-dashed border-gray-300 rounded-lg p-3 text-center transition-all duration-200 hover:border-amber-400 hover:bg-amber-50/30 cursor-pointer">
                <div class="flex items-center justify-center space-x-2">
                  <svg class="w-5 h-5 text-gray-400" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" viewBox="0 0 24 24">
                    <path d="M12 13v8"/>
                    <path d="M4 14.899A7 7 0 1 1 15.71 8h1.79a4.5 4.5 0 0 1 2.5 8.242"/>
                    <path d="m8 17 4-4 4 4"/>
                  </svg>
                  <div class="text-left">
                    <p class="text-gray-600 font-medium text-sm">Upload Dokumen Mitra</p>
                    <p class="text-xs text-gray-400">KTP, NPWP, Foto Mitra â€¢ Max 2MB</p>
                  </div>
                </div>
                <input type="file" id="documentsUpload" accept="image/jpeg,image/jpg,image/png" class="hidden">
                <button type="button" id="documentsUploadBtn" class="mt-2 px-3 py-1.5 bg-amber-500 text-white rounded text-xs hover:bg-amber-600 transition-colors">
                  Pilih File
                </button>
              </div>
              
              <!-- Documents Preview -->
              <div id="documentsPreview" class="mt-2 hidden">
                <div id="documentsFileList"></div>
              </div>
            </div>
          </div>

          <!-- Nilai Paket Usaha -->
          <div>
            <h3 class="text-base sm:text-lg font-semibold text-gray-800 mb-3 sm:mb-4">Nilai Paket Usaha</h3>
            
            <div class="grid grid-cols-1 sm:grid-cols-2 gap-3 sm:gap-4 mb-4">
              <div class="flex items-center">
                <input id="dp" name="nilaiPaket" type="radio" value="DP" class="w-4 h-4 text-amber-600 bg-gray-100 border-gray-300 focus:ring-amber-500 flex-shrink-0">
                <label for="dp" class="ml-2 text-sm font-medium text-gray-700">Down Payment</label>
              </div>
              <div class="flex items-center">
                <input id="full-payment" name="nilaiPaket" type="radio" value="Full Payment" class="w-4 h-4 text-amber-600 bg-gray-100 border-gray-300 focus:ring-amber-500 flex-shrink-0">
                <label for="full-payment" class="ml-2 text-sm font-medium text-gray-700">Full Payment</label>
              </div>
            </div>
            
            <!-- Payment Cards -->
            <div class="grid grid-cols-1 sm:grid-cols-3 gap-3 sm:gap-4 mb-4 sm:mb-6">
              <!-- DP Card -->
              <div id="dp-card" class="border border-gray-300 rounded-lg p-3 sm:p-4 text-center opacity-50">
                <h4 class="font-semibold text-gray-800 text-sm sm:text-base">Down Payment</h4>
                <p class="text-lg sm:text-2xl font-bold text-gray-600" id="dp-amount"></p>
              </div>
              
              <!-- Full Payment Card -->
              <div id="full-card" class="border border-gray-300 rounded-lg p-3 sm:p-4 text-center opacity-50">
                <h4 class="font-semibold text-gray-800 text-sm sm:text-base">Full Payment</h4>
                <div class="space-y-1">
                  <p class="line-through text-gray-400 text-sm sm:text-base" id="original-price"></p>
                  <p class="text-lg sm:text-2xl font-bold text-gray-600" id="discounted-price"></p>
                </div>
              </div>
              
              <!-- Kekurangan Card -->
              <div id="kekurangan-card" class="border border-gray-300 rounded-lg p-3 sm:p-4 text-center opacity-50 sm:col-span-1 col-span-1">
                <h4 class="font-semibold text-red-600 text-sm sm:text-base">Kekurangan</h4>
                <p class="text-lg sm:text-2xl font-bold text-red-500" id="kekurangan-amount"></p>
              </div>
            </div>
            
            <!-- Payment Info -->
            <div class="bg-gray-50 rounded-lg p-3 sm:p-4 mb-4">
              <p class="text-xs sm:text-sm text-gray-700 mb-2">Pembayaran dapat dilakukan melalui rekening:</p>
              <div class="space-y-1">
                <p class="font-semibold text-red-600 text-xs sm:text-sm">A.N Iman Wahyudi (OWNER)</p>
                <p class="font-semibold text-red-600 text-xs sm:text-sm">Bank Central Asia (BCA)</p>
                <p class="font-semibold text-red-600 text-xs sm:text-sm">No. Rekening: 540-607-5938</p>
                <p class="text-xs text-gray-600">*Sebelum melakukan transfer, pastikan bahwa nominal yang dibayarkan tidak salah</p>
                <p class="text-xs text-red-600">(Sertakan bukti transfer)</p>
              </div>
            </div>
            
            <!-- Payment Amount Display -->
            <div class="bg-green-50 rounded-lg p-3 sm:p-4 mb-4 border border-green-200">
              <p class="text-base sm:text-lg font-semibold text-green-800">Yang Harus anda bayarkan</p>
              <div class="flex justify-between items-center mt-2">
                <span class="text-xl sm:text-2xl font-bold text-green-600" id="final-payment"></span>
              </div>
            </div>
            
            <!-- Bukti Transfer Upload -->
            <div id="buktiTransferUploadArea" class="border-2 border-dashed border-gray-300 rounded-lg p-3 text-center transition-all duration-200 hover:border-amber-400 hover:bg-amber-50/30 cursor-pointer">
              <div class="flex items-center justify-center space-x-2">
                <svg class="w-5 h-5 text-gray-400" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" viewBox="0 0 24 24">
                  <path d="M12 13v8"/>
                  <path d="M4 14.899A7 7 0 1 1 15.71 8h1.79a4.5 4.5 0 0 1 2.5 8.242"/>
                  <path d="m8 17 4-4 4 4"/>
                </svg>
                <div class="text-left">
                  <p class="text-gray-600 font-medium text-sm">Upload Bukti Transfer</p>
                  <p class="text-xs text-gray-400">JPG, PNG â€¢ Max 5MB</p>
                </div>
              </div>
              <input type="file" id="buktiTransfer" accept="image/jpeg,image/jpg,image/png" class="hidden">
              <button type="button" id="buktiTransferUploadBtn" class="mt-2 px-3 py-1.5 bg-amber-500 text-white rounded text-xs hover:bg-amber-600 transition-colors">
                Pilih File
              </button>
            </div>
            
            <!-- Bukti Transfer Preview -->
            <div id="buktiTransferPreview" class="mt-2 hidden">
              <div id="buktiTransferInfo"></div>
            </div>
          </div>

          <!-- Sumber Dana -->
          <div>
            <div class="flex items-center mb-3 sm:mb-4 relative">
              <h3 class="text-base sm:text-lg font-semibold text-gray-800">Sumber Dana</h3>
              <button type="button" id="info-sumber-dana" class="info-button ml-2 focus:outline-none hover:text-amber-600 transition-colors flex-shrink-0">
                <svg class="w-4 h-4 sm:w-5 sm:h-5 text-gray-400 hover:text-amber-600" fill="currentColor" viewBox="0 0 20 20">
                  <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-8-3a1 1 0 00-.867.5 1 1 0 11-1.731-1A3 3 0 0113 8a3.001 3.001 0 01-2 2.83V11a1 1 0 11-2 0v-1a1 1 0 011-1 1 1 0 100-2zm0 8a1 1 0 100-2 1 1 0 000 2z" clip-rule="evenodd"></path>
                </svg>
              </button>
              <!-- Tooltip for Sumber Dana -->
              <div id="tooltip-sumber-dana" class="hidden absolute left-0 top-8 mt-2 p-4 bg-white border border-gray-200 rounded-lg shadow-lg z-10 max-w-sm sm:max-w-md">
                <div class="relative">
                  <button type="button" class="close-tooltip absolute top-0 right-0 -mt-2 -mr-2 text-gray-400 hover:text-gray-600">
                    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                    </svg>
                  </button>
                  <h4 class="font-semibold text-gray-800 mb-2 text-sm sm:text-base">Sumber Dana</h4>
                  <p class="text-xs sm:text-sm text-gray-600">
                    Informasi rekening pengirim dana kemitraan:<br>
                    â€¢ <strong>Nama Pengirim:</strong> Nama sesuai rekening bank<br>
                    â€¢ <strong>No Rekening:</strong> Nomor rekening pengirim<br>
                    â€¢ <strong>Bank:</strong> Nama bank pengirim<br><br>
                    <p class="text-xs text-red-600"><strong>Penting:</strong> Data ini harus sesuai dengan bukti transfer yang diupload.</p>
                  </p>
                </div>
              </div>
            </div>
            
            <div class="space-y-3 sm:space-y-4">
              <input type="text" id="namaPengirim" placeholder="Nama Pengirim*" class="w-full px-3 sm:px-4 py-2 sm:py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-amber-500 focus:border-transparent text-sm sm:text-base">
              
              <div class="grid grid-cols-1 sm:grid-cols-2 gap-3 sm:gap-4">
                <input type="text" id="noRekPengirim" placeholder="No Rek pengirim*" class="w-full px-3 sm:px-4 py-2 sm:py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-amber-500 focus:border-transparent text-sm sm:text-base">
                <input type="text" id="bankPengirim" placeholder="Bank Pengirim*" class="w-full px-3 sm:px-4 py-2 sm:py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-amber-500 focus:border-transparent text-sm sm:text-base">
              </div>
            </div>
            
            <div class="mt-4">
              <p class="text-xs text-red-600">Perhatian!</p>
              <p class="text-xs text-gray-600">Jika uang yang telah di bayarkan tidak dapat di kembalikan apabila proses survey lokasi telah dilakukan. Namun, apabila belum dilakukan survey, pengembalian DP sebesar 50% masih dimungkinkan*</p>
            </div>
          </div>

          <!-- Next Button -->
          <div class="flex flex-col sm:flex-row justify-between items-stretch sm:items-center gap-3">
            <div class="hidden sm:block"></div> <!-- Spacer for desktop -->
            <button id="nextBtn" type="button" class="px-6 sm:px-8 py-3 bg-gray-400 text-white rounded-lg font-semibold cursor-not-allowed transition-colors w-full sm:w-auto text-sm sm:text-base" disabled>
              Next
            </button>
          </div>
        </div>

        <!-- Step 2: Konfirmasi (Hidden initially) -->
        <div id="form-step-2" class="hidden space-y-4 sm:space-y-6">
          <h2 class="text-xl sm:text-2xl font-bold text-gray-800 mb-4 sm:mb-6 text-center">Konfirmasi Data Pendaftaran</h2>
          
          <div id="confirmationData" class="space-y-4 sm:space-y-6">
            <!-- Data akan diisi oleh JavaScript -->
          </div>
          
          <div class="flex flex-col sm:flex-row justify-between gap-3 sm:gap-4">
            <button id="backBtn" type="button" class="px-6 sm:px-8 py-3 bg-gray-300 text-gray-700 rounded-lg font-semibold hover:bg-gray-200 transition-colors w-full sm:w-auto text-sm sm:text-base">
              Kembali
            </button>
            <button id="submitBtn" type="button" class="px-6 sm:px-8 py-3 bg-gradient-to-r from-amber-500 to-orange-600 text-white rounded-xl font-semibold hover:from-amber-600 hover:to-orange-700 transition-all duration-200 shadow-lg hover:shadow-xl transform hover:-translate-y-0.5 w-full sm:w-auto text-sm sm:text-base">
              Kirim Formulir
            </button>
          </div>
        </div>

        <!-- Step 3: Success (Hidden initially) -->
        <div id="form-step-3" class="hidden text-center py-8 sm:py-12">
          <svg class="w-16 h-16 sm:w-20 sm:h-20 text-green-500 mx-auto mb-4 sm:mb-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
          </svg>
          <h2 class="text-2xl sm:text-3xl font-bold text-gray-800 mb-3 sm:mb-4">Terima Kasih!</h2>
          <p class="text-base sm:text-lg text-gray-600 mb-4 sm:mb-6 px-4">Formulir pendaftaran mitra anda berhasil terkirim, silakan tunggu </p>
          <p class="text-xs sm:text-sm text-gray-500 mb-4 px-4">Tim kami akan menghubungi Anda dalam 1-2 hari kerja.</p>
          
          <!-- Countdown and Redirect Message -->
          <div class="bg-blue-50 border border-blue-200 rounded-lg p-4 mx-4 sm:mx-8">
            <div class="flex items-center justify-center space-x-2">
              <svg class="w-5 h-5 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
              </svg>
              <p class="text-sm text-blue-700">
                Anda akan diarahkan ke halaman utama dalam 
                <span id="countdown" class="font-bold text-blue-800">5</span> detik
              </p>
            </div>
            <button id="redirectNow" class="mt-3 px-4 py-2 bg-blue-600 text-white text-sm rounded-lg hover:bg-blue-700 transition-colors">
              Kembali Sekarang
            </button>
          </div>
        </div>
      </div>
    </div>

    <!-- Mobile Package Selection Modal -->
    <div id="mobilePackageModal" class="fixed inset-0 bg-gray-900 bg-opacity-50 z-50 hidden sm:hidden">
      <div class="flex items-center justify-center min-h-screen p-4">
        <div class="bg-white rounded-xl w-full max-w-sm mx-auto shadow-2xl max-h-[80vh] overflow-hidden">
          <!-- Modal Header -->
          <div class="bg-gradient-to-r from-amber-500 to-orange-600 px-6 py-4">
            <div class="flex justify-between items-center">
              <h3 class="text-lg font-semibold text-white">Pilih Paket Usaha</h3>
              <button id="closeMobilePackageModal" class="text-white hover:text-gray-200 transition-colors">
                <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                </svg>
              </button>
            </div>
          </div>

          <!-- Modal Content -->
          <div class="overflow-y-auto max-h-[60vh]">
            <!-- Package Options -->
            <div class="divide-y divide-gray-100">
              <!-- Kagawa Coffee Corner -->
              <button type="button" data-package="Kagawa Coffee Corner" data-original="100000000" data-discounted="89000000" class="package-option w-full text-left px-6 py-4 hover:bg-amber-50 transition-colors">
                <div class="flex justify-between items-center">
                  <div class="flex-1">
                    <h4 class="font-semibold text-gray-800 text-sm">Kagawa Coffee Corner</h4>
                    <div class="flex items-center space-x-2 mt-1">
                      <span class="text-xs text-gray-400 line-through">Rp 100.000.000</span>
                      <span class="text-xs text-green-600 font-medium">â†’ Rp 89.000.000</span>
                    </div>
                    <p class="text-xs text-green-600 mt-0.5">Hemat Rp 11.000.000</p>
                  </div>
                  <svg class="w-4 h-4 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
                  </svg>
                </div>
              </button>

              <!-- Kagawa Ricebowl -->
              <button type="button" data-package="Kagawa Ricebowl" data-original="75000000" data-discounted="50000000" class="package-option w-full text-left px-6 py-4 hover:bg-amber-50 transition-colors">
                <div class="flex justify-between items-center">
                  <div class="flex-1">
                    <h4 class="font-semibold text-gray-800 text-sm">Kagawa Ricebowl</h4>
                    <div class="flex items-center space-x-2 mt-1">
                      <span class="text-xs text-gray-400 line-through">Rp 75.000.000</span>
                      <span class="text-xs text-green-600 font-medium">â†’ Rp 50.000.000</span>
                    </div>
                    <p class="text-xs text-green-600 mt-0.5">Hemat Rp 25.000.000</p>
                  </div>
                  <svg class="w-4 h-4 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
                  </svg>
                </div>
              </button>

              <!-- Kagawa Coffee & Ricebowl Corner -->
              <button type="button" data-package="Kagawa Coffee & Ricebowl Corner" data-original="175000000" data-discounted="139000000" class="package-option w-full text-left px-6 py-4 hover:bg-amber-50 transition-colors">
                <div class="flex justify-between items-center">
                  <div class="flex-1">
                    <h4 class="font-semibold text-gray-800 text-sm">Kagawa Coffee & Ricebowl Corner</h4>
                    <div class="flex items-center space-x-2 mt-1">
                      <span class="text-xs text-gray-400 line-through">Rp 175.000.000</span>
                      <span class="text-xs text-green-600 font-medium">â†’ Rp 139.000.000</span>
                    </div>
                    <p class="text-xs text-green-600 mt-0.5">Hemat Rp 36.000.000</p>
                  </div>
                  <svg class="w-4 h-4 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
                  </svg>
                </div>
              </button>

              <!-- RM Nusantara -->
              <button type="button" data-package="RM Nusantara" data-original="100000000" data-discounted="89000000" class="package-option w-full text-left px-6 py-4 hover:bg-amber-50 transition-colors">
                <div class="flex justify-between items-center">
                  <div class="flex-1">
                    <h4 class="font-semibold text-gray-800 text-sm">RM Nusantara</h4>
                    <div class="text-xs text-gray-500 mt-0.5">WarNas, Mas Gaw & Masakan Mas Gawa</div>
                    <div class="flex items-center space-x-2 mt-1">
                      <span class="text-xs text-gray-400 line-through">Rp 100.000.000</span>
                      <span class="text-xs text-green-600 font-medium">â†’ Rp 89.000.000</span>
                    </div>
                    <p class="text-xs text-green-600 mt-0.5">Hemat Rp 11.000.000</p>
                  </div>
                  <svg class="w-4 h-4 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
                  </svg>
                </div>
              </button>

              <!-- Independent Brand -->
              <button type="button" data-package="Independent Brand" data-original="70000000" data-discounted="49000000" class="package-option w-full text-left px-6 py-4 hover:bg-amber-50 transition-colors">
                <div class="flex justify-between items-center">
                  <div class="flex-1">
                    <h4 class="font-semibold text-gray-800 text-sm">Independent Brand</h4>
                    <div class="flex items-center space-x-2 mt-1">
                      <span class="text-xs text-gray-400 line-through">Rp 70.000.000</span>
                      <span class="text-xs text-green-600 font-medium">â†’ Rp 49.000.000</span>
                    </div>
                    <p class="text-xs text-green-600 mt-0.5">Hemat Rp 21.000.000</p>
                  </div>
                  <svg class="w-4 h-4 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
                  </svg>
                </div>
              </button>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</Layout>

<script>
// Input Sanitization System
class InputSanitizer {
  /**
   * Sanitize text input - remove dangerous characters and normalize
   */
  static sanitizeText(input: string): string {
    if (!input || typeof input !== 'string') return '';

    return input
      // Remove null bytes and control characters
      .replace(/[\x00-\x1F\x7F]/g, '')
      // Remove potential script tags and HTML
      .replace(/<script\b[^<]*(?:(?!<\/script>)<[^<]*)*<\/script>/gi, '')
      .replace(/<[^>]*>/g, '')
      // Remove SQL injection patterns
      .replace(/('|(\\x27)|(\\x2D\\x2D)|(\\#)|(\\x23)|(\;)|(\\x3B)|(\%3B)|(\%23)|(\%27)|(\%22)|(\%3C)|(\%3E)|(\%28)|(\%29)|(\%7B)|(\%7D)|(\%5B)|(\%5D)|(\%3A)|(\%40)|(\%2C)|(\%3F)|(\%26)|(\%3D)|(\%2B)|(\%24)|(\%7C)|(\%2E)|(\%2F)|(\%5C))/gi, '')
      // Remove multiple spaces
      .replace(/\s+/g, ' ')
      // Trim whitespace
      .trim()
      // Limit length to prevent buffer overflow
      .substring(0, 500);
  }

  /**
   * Sanitize email input - less aggressive for real-time input
   */
  static sanitizeEmail(input: string, strict: boolean = false): string {
    if (!input || typeof input !== 'string') return '';

    let sanitized = input
      .toLowerCase()
      .trim()
      // Remove dangerous characters
      .replace(/[<>'"&\\]/g, '');

    // For real-time input, be very permissive
    if (!strict) {
      // Allow almost any character during typing, only remove the most dangerous ones
      sanitized = sanitized.replace(/[<>'"&\\]/g, '');
      // Don't restrict characters during typing - let users type freely
    } else {
      // For strict validation, be more restrictive
      sanitized = sanitized.replace(/[^a-zA-Z0-9@._\-]/g, '');

      // Validate complete email format only in strict mode
      const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
      if (!emailRegex.test(sanitized)) {
        return '';
      }
    }

    return sanitized;
  }

  /**
   * Validate email format (separate from sanitization)
   */
  static validateEmailFormat(email: string): boolean {
    if (!email || typeof email !== 'string') return false;

    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    return emailRegex.test(email.trim());
  }

  /**
   * Sanitize phone number input
   */
  static sanitizePhone(input: string): string {
    if (!input || typeof input !== 'string') return '';

    return input
      // Remove all non-numeric characters except + and spaces
      .replace(/[^0-9+\s-()]/g, '')
      // Remove multiple spaces
      .replace(/\s+/g, ' ')
      // Trim and limit length
      .trim()
      .substring(0, 20);
  }

  /**
   * Sanitize account number input
   */
  static sanitizeAccountNumber(input: string): string {
    if (!input || typeof input !== 'string') return '';

    return input
      // Remove all non-numeric characters
      .replace(/[^0-9]/g, '')
      // Limit length for account numbers
      .substring(0, 30);
  }

  /**
   * Sanitize bank name input
   */
  static sanitizeBankName(input: string, strict: boolean = false): string {
    if (!input || typeof input !== 'string') return '';

    if (!strict) {
      // During typing, don't sanitize at all - let users type freely
      return input;
    }

    // For strict validation, apply full sanitization
    return input
      // Remove dangerous characters
      .replace(/[<>'"&\\]/g, '')
      // Allow only letters, spaces, dots, and hyphens
      .replace(/[^a-zA-Z\s.-]/g, '')
      // Remove multiple spaces
      .replace(/\s+/g, ' ')
      // Trim and limit length
      .trim()
      .substring(0, 100);
  }

  /**
   * Sanitize address input
   */
  static sanitizeAddress(input: string, strict: boolean = false): string {
    if (!input || typeof input !== 'string') return '';

    if (!strict) {
      // During typing, don't sanitize at all - let users type freely
      return input;
    }

    // For strict validation, apply full sanitization
    return input
      // Remove dangerous characters
      .replace(/[<>'"&\\]/g, '')
      // Allow common address characters
      .replace(/[^\w\s.,/-]/g, '')
      // Remove multiple spaces
      .replace(/\s+/g, ' ')
      // Trim and limit length
      .trim()
      .substring(0, 300);
  }

  /**
   * Sanitize name input
   */
  static sanitizeName(input: string, strict: boolean = false): string {
    if (!input || typeof input !== 'string') return '';

    if (!strict) {
      // During typing, don't sanitize at all - let users type freely
      return input;
    }

    // For strict validation, apply full sanitization
    return input
      // Remove dangerous characters
      .replace(/[<>'"&\\]/g, '')
      // Allow only letters, spaces, dots, apostrophes, and hyphens
      .replace(/[^a-zA-Z\s.'â€™-]/g, '')
      // Remove multiple spaces
      .replace(/\s+/g, ' ')
      // Trim and limit length
      .trim()
      .substring(0, 100);
  }

  /**
   * Sanitize select/option values
   */
  static sanitizeSelectValue(input: string, allowedValues: string[]): string {
    if (!input || typeof input !== 'string') return '';

    const sanitized = input.trim();
    return allowedValues.includes(sanitized) ? sanitized : '';
  }

  /**
   * Sanitize radio button values
   */
  static sanitizeRadioValue(input: string, allowedValues: string[]): string {
    if (!input || typeof input !== 'string') return '';

    const sanitized = input.trim();
    return allowedValues.includes(sanitized) ? sanitized : '';
  }

  /**
   * Validate file upload
   */
  static validateFile(file: File, allowedTypes: string[], maxSize: number): { valid: boolean; error?: string } {
    if (!file) {
      return { valid: false, error: 'File tidak ditemukan' };
    }

    // Check file type
    if (!allowedTypes.includes(file.type)) {
      return { valid: false, error: `Tipe file tidak didukung. Hanya menerima format JPG atau PNG` };
    }

    // Check file size
    if (file.size > maxSize) {
      const maxSizeMB = (maxSize / (1024 * 1024)).toFixed(1);
      return { valid: false, error: `Ukuran file terlalu besar. Maksimal ${maxSizeMB}MB` };
    }

    // Check for dangerous file names
    const dangerousPatterns = /(\.\.|\/|\\|script|exe|bat|cmd|com|pif|scr|vbs|js|jar|java|class|php|asp|jsp|pl|cgi|py|rb|sh)$/i;
    if (dangerousPatterns.test(file.name)) {
      return { valid: false, error: 'Nama file tidak aman' };
    }

    return { valid: true };
  }

  /**
   * Sanitize all form data
   */
  static sanitizeFormData(formData: any): any {
    const sanitized = { ...formData };

    // Define allowed values for select and radio inputs
    const allowedPaketUsaha = [
      'Kagawa Coffee Corner',
      'Kagawa Ricebowl',
      'Kagawa Coffee & Ricebowl Corner',
      'RM Nusantara',
      'Independent Brand'
    ];

    const allowedSistemKemitraan = ['Autopilot', 'Semi Autopilot', 'Self Managed'];
    const allowedNilaiPaket = ['DP', 'Full Payment'];
    const allowedRmNusantaraSubMenu = ['WarNas', 'Mas Gaw', 'Masakan Mas Gawa'];

    // Sanitize each field
    sanitized.namaMitra = this.sanitizeName(formData.namaMitra || '', true); // Strict validation for final data
    sanitized.alamatMitra = this.sanitizeAddress(formData.alamatMitra || '', true); // Strict validation for final data
    sanitized.noHp = this.sanitizePhone(formData.noHp || '');
    sanitized.email = this.sanitizeEmail(formData.email || '', true); // Strict validation for final data
    sanitized.sales = this.sanitizeText(formData.sales || '');
    sanitized.namaPengirim = this.sanitizeName(formData.namaPengirim || '', true); // Strict validation for final data
    sanitized.noRekPengirim = this.sanitizeAccountNumber(formData.noRekPengirim || '');
    sanitized.bankPengirim = this.sanitizeBankName(formData.bankPengirim || '', true); // Strict validation for final data

    // Sanitize select and radio values
    sanitized.paketUsaha = this.sanitizeSelectValue(formData.paketUsaha || '', allowedPaketUsaha);
    sanitized.sistemKemitraan = this.sanitizeRadioValue(formData.sistemKemitraan || '', allowedSistemKemitraan);
    sanitized.nilaiPaket = this.sanitizeRadioValue(formData.nilaiPaket || '', allowedNilaiPaket);
    sanitized.rmNusantaraSubMenu = this.sanitizeRadioValue(formData.rmNusantaraSubMenu || '', allowedRmNusantaraSubMenu);

    return sanitized;
  }
}

// Real-time input sanitization
function setupInputSanitization() {
  // Text inputs that need sanitization
  const textInputs = [
    { id: 'namaMitra', sanitizer: InputSanitizer.sanitizeName, label: 'Nama Mitra' },
    { id: 'alamatMitra', sanitizer: InputSanitizer.sanitizeAddress, label: 'Alamat Mitra' },
    { id: 'noHp', sanitizer: InputSanitizer.sanitizePhone, label: 'No HP' },
    { id: 'email', sanitizer: (input: string) => InputSanitizer.sanitizeEmail(input, false), label: 'Email' },
    { id: 'sales', sanitizer: InputSanitizer.sanitizeText, label: 'PIC/Sales' },
    { id: 'namaPengirim', sanitizer: InputSanitizer.sanitizeName, label: 'Nama Pengirim' },
    { id: 'noRekPengirim', sanitizer: InputSanitizer.sanitizeAccountNumber, label: 'No Rek Pengirim' },
    { id: 'bankPengirim', sanitizer: InputSanitizer.sanitizeBankName, label: 'Bank Pengirim' }
  ];

  // Setup real-time sanitization for text inputs
  textInputs.forEach(({ id, sanitizer, label }) => {
    const element = document.getElementById(id) as HTMLInputElement;
    if (element) {
      element.addEventListener('input', function(e) {
        const target = e.target as HTMLInputElement;
        const originalValue = target.value;

        // Only sanitize if there are potentially dangerous characters
        const hasDangerousChars = /[<>'"&\\]/.test(originalValue);

        if (hasDangerousChars) {
          try {
            const sanitizedValue = sanitizer(originalValue, false); // Non-strict during typing

            // Only update if value actually changed (dangerous characters were removed)
            if (originalValue !== sanitizedValue) {
              const cursorPosition = target.selectionStart;
              target.value = sanitizedValue;
              // Restore cursor position
              if (cursorPosition !== null) {
                target.setSelectionRange(cursorPosition, cursorPosition);
              }
              showSanitizationFeedback(target, 'sanitized', ``);
            }
          } catch (error) {
            console.error(``, error);
            // If sanitization fails, allow the input as-is
            showSanitizationFeedback(target, 'error', ``);
          }
        }
        // If no dangerous characters, do nothing - let user type freely
      });

      element.addEventListener('paste', function(e) {
        // Allow paste, then check for dangerous characters
        setTimeout(() => {
          const target = e.target as HTMLInputElement;
          const originalValue = target.value;

          // Only sanitize if there are potentially dangerous characters
          const hasDangerousChars = /[<>'"&\\]/.test(originalValue);

          if (hasDangerousChars) {
            const sanitizedValue = sanitizer(originalValue, false); // Non-strict for paste

            if (originalValue !== sanitizedValue) {
              target.value = sanitizedValue;
              showSanitizationFeedback(target, 'sanitized', `${label} telah dibersihkan untuk keamanan`);
            }
          }
        }, 0);
      });

      element.addEventListener('blur', function(e) {
        const target = e.target as HTMLInputElement;
        if (target.value.length > 0) {
          // Use strict sanitization on blur for final validation
          const sanitizedValue = sanitizer(target.value, true);
          if (target.value !== sanitizedValue) {
            target.value = sanitizedValue;
          }

          if (target.value === sanitizedValue) {
            // For email, also check format on blur
            if (id === 'email') {
              if (InputSanitizer.validateEmailFormat(target.value)) {
                showSanitizationFeedback(target, 'valid', `${label} valid`);
              } else {
                showSanitizationFeedback(target, 'error', `${label} format tidak valid`);
              }
            } else {
              showSanitizationFeedback(target, 'valid', `${label} valid`);
            }
          }
        }
      });
    }
  });

  // Setup file input validation
  const documentsInput = document.getElementById('documentsUpload') as HTMLInputElement;
  const buktiTransferInput = document.getElementById('buktiTransfer') as HTMLInputElement;

  const allowedTypes = ['image/jpeg', 'image/jpg', 'image/png'];
  const maxSize = 5 * 1024 * 1024; // 5MB

  if (documentsInput) {
    documentsInput.addEventListener('change', function() {
      if (this.files && this.files.length > 0) {
        const file = this.files[0];
        const validation = InputSanitizer.validateFile(file, allowedTypes, maxSize);

        if (!validation.valid) {
          alert(`File dokumen tidak dapat diproses. Pastikan file dalam format JPG atau PNG dan ukuran tidak melebihi 5MB.`);
          this.value = '';
          displayDocumentsPreview(null);
          checkFormValidation();
        } else {
          // No feedback for valid files
        }
      }
    });
  }

  if (buktiTransferInput) {
    buktiTransferInput.addEventListener('change', function() {
      if (this.files && this.files.length > 0) {
        const file = this.files[0];
        const validation = InputSanitizer.validateFile(file, allowedTypes, maxSize);

        if (!validation.valid) {
          alert(`File bukti transfer tidak dapat diproses. Pastikan file dalam format JPG atau PNG dan ukuran tidak melebihi 5MB.`);
          this.value = '';
          displayBuktiTransferPreview(null);
          checkFormValidation();
        } else {
          // No feedback for valid files
        }
      }
    });
  }
}

// Function to show sanitization feedback
function showSanitizationFeedback(element: HTMLElement, type: 'valid' | 'sanitized' | 'error', message: string) {
  // Remove existing feedback
  const existingFeedback = element.parentNode?.querySelector('.sanitization-notice');
  if (existingFeedback) {
    existingFeedback.remove();
  }

  // Remove existing classes
  element.classList.remove('input-sanitized', 'input-error');

  // Add appropriate class for visual feedback only (no text notification)
  if (type === 'sanitized' || type === 'valid') {
    element.classList.add('input-sanitized');
  } else if (type === 'error') {
    element.classList.add('input-error');
  }

  // Auto-remove visual feedback after 2 seconds
  setTimeout(() => {
    element.classList.remove('input-sanitized', 'input-error');
  }, 2000);
}

// Enhanced form validation with sanitization
function validateStep1WithSanitization() {
  // Required fields (excluding Sales which is optional)
  const required = ['sistemKemitraan', 'paketUsaha', 'namaMitra', 'alamatMitra', 'noHp', 'email', 'nilaiPaket', 'namaPengirim', 'noRekPengirim', 'bankPengirim'];

  for (let field of required) {
    let element: HTMLInputElement | null = null;

    // Handle radio buttons differently
    if (field === 'sistemKemitraan' || field === 'nilaiPaket') {
      element = document.querySelector(`input[name="${field}"]:checked`) as HTMLInputElement;
    } else {
      element = document.getElementById(field) as HTMLInputElement;
    }

    if (!element || !element.value.trim()) {
      alert(`Field ${field} harus diisi`);
      if (field !== 'sistemKemitraan' && field !== 'nilaiPaket') {
        element = document.getElementById(field) as HTMLInputElement;
        element?.focus();
      }
      return false;
    }
  }

  // Additional validation for specific fields
  const emailElement = document.getElementById('email') as HTMLInputElement;
  if (emailElement && emailElement.value) {
    const sanitizedEmail = InputSanitizer.sanitizeEmail(emailElement.value, true);
    if (!sanitizedEmail || !InputSanitizer.validateEmailFormat(emailElement.value)) {
      alert('Format email tidak valid');
      emailElement.focus();
      return false;
    }
  }

  const phoneElement = document.getElementById('noHp') as HTMLInputElement;
  if (phoneElement && phoneElement.value) {
    const sanitizedPhone = InputSanitizer.sanitizePhone(phoneElement.value);
    if (!sanitizedPhone) {
      alert('Format nomor HP tidak valid');
      phoneElement.focus();
      return false;
    }
  }

  // Check RM Nusantara sub menu if RM Nusantara is selected
  const paketUsahaElement = document.getElementById('paketUsaha') as HTMLSelectElement;
  if (paketUsahaElement?.value === 'RM Nusantara') {
    const rmSubMenuRadios = document.querySelectorAll('input[name="rmNusantaraSubMenu"]:checked');
    if (rmSubMenuRadios.length === 0) {
      alert('Silakan pilih sub menu RM Nusantara');
      return false;
    }
  }

  // Check file uploads with enhanced validation
  const documentsUpload = document.getElementById('documentsUpload') as HTMLInputElement;
  const buktiTransfer = document.getElementById('buktiTransfer') as HTMLInputElement;

  if (!documentsUpload?.files?.length) {
    alert('Silakan upload dokumen KTP, NPWP & foto diri mitra');
    document.getElementById('documentsUploadArea')?.scrollIntoView({ behavior: 'smooth' });
    return false;
  }

  if (!buktiTransfer?.files?.length) {
    alert('Silakan upload bukti transfer');
    document.getElementById('buktiTransferUploadArea')?.scrollIntoView({ behavior: 'smooth' });
    return false;
  }

  // Validate file types and sizes with sanitization
  const allowedTypes = ['image/jpeg', 'image/jpg', 'image/png'];
  const maxSize = 5 * 1024 * 1024; // 5MB

  // Check documents
  for (let i = 0; i < documentsUpload.files.length; i++) {
    const file = documentsUpload.files[i];
    const validation = InputSanitizer.validateFile(file, allowedTypes, maxSize);
    if (!validation.valid) {
      alert(`File dokumen: ${validation.error}`);
      return false;
    }
  }

  // Check bukti transfer
  const buktiFile = buktiTransfer.files[0];
  const validation = InputSanitizer.validateFile(buktiFile, allowedTypes, maxSize);
  if (!validation.valid) {
    alert(`File bukti transfer: ${validation.error}`);
    return false;
  }
  return true;
}

// Enhanced form data collection with sanitization
function collectFormDataWithSanitization() {
  const rawData = collectFormData();
  const sanitizedData = InputSanitizer.sanitizeFormData(rawData);

  return sanitizedData;
}

// Enhanced form submission with sanitization
async function submitFormWithSanitization() {
  try {
    const formData = collectFormDataWithSanitization();

    // Update data with confirmation changes (also sanitize these)
    const confirmNamaElement = document.getElementById('confirm-nama') as HTMLInputElement;
    const confirmEmailElement = document.getElementById('confirm-email') as HTMLInputElement;
    const confirmAlamatElement = document.getElementById('confirm-alamat') as HTMLInputElement;
    const confirmHpElement = document.getElementById('confirm-hp') as HTMLInputElement;

    if (confirmNamaElement) {
      formData.namaMitra = InputSanitizer.sanitizeName(confirmNamaElement.value, true) || formData.namaMitra;
    }
    if (confirmEmailElement) {
      formData.email = InputSanitizer.sanitizeEmail(confirmEmailElement.value, true) || formData.email;
    }
    if (confirmAlamatElement) {
      formData.alamatMitra = InputSanitizer.sanitizeAddress(confirmAlamatElement.value, true) || formData.alamatMitra;
    }
    if (confirmHpElement) {
      formData.noHp = InputSanitizer.sanitizePhone(confirmHpElement.value) || formData.noHp;
    }

    // Validate bank name
    formData.bankPengirim = await validateBank(InputSanitizer.sanitizeBankName(formData.bankPengirim, true));

    // Calculate final amounts
    const dpAmount = DP_FIXED_AMOUNT; // Fixed 5 million
    const discountedFullPrice = packagePrice - dayDiscount;
    const finalAmount = formData.nilaiPaket === 'DP' ? dpAmount - dayDiscount : discountedFullPrice;

    // Prepare form data for submission
    const submitData = new FormData();

    // Add all form fields except files
    const formFields = [
      'sistemKemitraan', 'paketUsaha', 'rmNusantaraSubMenu', 'namaMitra',
      'alamatMitra', 'noHp', 'email', 'nilaiPaket', 'namaPengirim',
      'noRekPengirim', 'bankPengirim', 'sales'
    ];

    formFields.forEach(key => {
      if (formData[key as keyof typeof formData] && typeof formData[key as keyof typeof formData] === 'string') {
        submitData.append(key, formData[key as keyof typeof formData] as string);
      }
    });

    // Also send sales as jenisUsaha for backward compatibility
    submitData.append('jenisUsaha', InputSanitizer.sanitizeText(formData.sales || ''));

    // Get original price for backend
    const priceData = packagePrices[formData.paketUsaha as keyof typeof packagePrices];
    const originalPrice = priceData ? priceData.original : packagePrice;

    // Add calculated values
    submitData.append('hargaPaket', packagePrice.toString()); // Current discounted price
    submitData.append('hargaAsli', originalPrice.toString()); // Original price
    submitData.append('nominalDP', dpAmount.toString());
    submitData.append('nominalFull', discountedFullPrice.toString());
    submitData.append('kekurangan', (packagePrice - dpAmount).toString());
    submitData.append('diskonHarian', dayDiscount.toString());
    submitData.append('yangHarusDibayar', Math.max(0, finalAmount).toString());

    // Add files
    if (formData.documentsFiles && formData.documentsFiles.length > 0) {
      // Only send the first file (KTP)
      submitData.append('documents', formData.documentsFiles[0]);
    }
    if (formData.buktiTransferFile) {
      submitData.append('buktiTransfer', formData.buktiTransferFile);
    }
    // Submit to backend
    const API_URL = import.meta.env.PUBLIC_API_URL || 'http://localhost:3000';
    const response = await fetch(`${API_URL}/api/mitra/register`, {
      method: 'POST',
      body: submitData
    });

    const responseText = await response.text();

    if (!response.ok) {
      const errorData = responseText ? JSON.parse(responseText) : {};
      const errorMessage = errorData.error || errorData.details || 'Gagal mengirim formulir';
      throw new Error(errorMessage);
    }

    // Move to step 3 (success)
    updateProgressBar(3);
    document.getElementById('form-step-2')?.classList.add('hidden');
    document.getElementById('form-step-3')?.classList.remove('hidden');
    
    // Start countdown and redirect after 5 seconds
    startCountdownAndRedirect();

  } catch (error) {
    console.error('[SANITIZATION] Error submitting form:', error);
    const errorMessage = error instanceof Error ? error.message : 'Terjadi kesalahan saat mengirim formulir';
    alert(`Error: ${errorMessage}`);
  }
}

// Package prices with original and discounted prices
const packagePrices = {
  "Kagawa Coffee Corner": { original: 100000000, discounted: 89000000 },
  "Kagawa Ricebowl": { original: 75000000, discounted: 50000000 },
  "Kagawa Coffee & Ricebowl Corner": { original: 175000000, discounted: 139000000 },
  "RM Nusantara": { original: 100000000, discounted: 89000000 },
  "Independent Brand": { original: 70000000, discounted: 49000000 }
};

// DP
const DP_FIXED_AMOUNT = 5000000;

// Current date for discount calculation
const currentDate = new Date();
const dayDiscount = parseInt(currentDate.getDate().toString() + (currentDate.getMonth() + 1).toString().padStart(2, '0') + currentDate.getFullYear().toString().slice(-2));

let selectedPackage = '';
let packagePrice = 0;
let paymentType = '';

let validationTimeout: ReturnType<typeof setTimeout> | null = null;

// Form validation function with throttling
function checkFormValidation() {
  // Clear previous timeout
  if (validationTimeout) {
    clearTimeout(validationTimeout);
  }
  
  // Set a small delay to avoid too frequent calls
  validationTimeout = setTimeout(() => {
    performValidation();
  }, 100);
}

function performValidation() {
  const nextBtn = document.getElementById('nextBtn') as HTMLButtonElement;
  if (!nextBtn) {
    return;
  }

  // Required fields (excluding Sales which is optional)
  const requiredFields = [
    { name: 'sistemKemitraan', type: 'radio' },
    { name: 'paketUsaha', type: 'select' },
    { name: 'namaMitra', type: 'input' },
    { name: 'alamatMitra', type: 'input' },
    { name: 'noHp', type: 'input' },
    { name: 'email', type: 'input' },
    { name: 'nilaiPaket', type: 'radio' },
    { name: 'namaPengirim', type: 'input' },
    { name: 'noRekPengirim', type: 'input' },
    { name: 'bankPengirim', type: 'input' }
  ];
  
  let allValid = true;
  let invalidFields: string[] = [];
  let fieldDetails: any = {};
  
  // Check each required field
  for (const field of requiredFields) {
    let isValid = false;
    let value = '';
    let element = null;
    
    if (field.type === 'radio') {
      const radioElements = document.querySelectorAll(`input[name="${field.name}"]:checked`);
      isValid = radioElements.length > 0;
      value = radioElements.length > 0 ? (radioElements[0] as HTMLInputElement).value : '';
      element = radioElements[0] || document.querySelector(`input[name="${field.name}"]`);
    } else if (field.type === 'select') {
      const selectElement = document.getElementById(field.name) as HTMLSelectElement;
      element = selectElement;
      value = selectElement?.value || '';
      isValid = value.trim() !== '' && value !== 'Pilih Paket Usaha' && value !== '';
    } else {
      const inputElement = document.getElementById(field.name) as HTMLInputElement;
      element = inputElement;
      value = inputElement?.value || '';
      isValid = value.trim() !== '';
    }
    
    fieldDetails[field.name] = { 
      value, 
      isValid, 
      element: element ? 'found' : 'NOT FOUND',
      actualValue: value || 'EMPTY'
    };
    
    if (!isValid) {
      allValid = false;
      invalidFields.push(field.name);
    }
  }
  
  // Check RM Nusantara sub menu if RM Nusantara is selected
  const paketUsahaElement = document.getElementById('paketUsaha') as HTMLSelectElement;
  if (paketUsahaElement?.value === 'RM Nusantara') {
    const rmSubMenuRadios = document.querySelectorAll('input[name="rmNusantaraSubMenu"]:checked');
    if (rmSubMenuRadios.length === 0) {
      allValid = false;
      invalidFields.push('rmNusantaraSubMenu');
    }
  }
  
  // Check file uploads
  const documentsInput = document.getElementById('documentsUpload') as HTMLInputElement;
  const buktiTransferInput = document.getElementById('buktiTransfer') as HTMLInputElement;
  
  const hasDocuments = documentsInput?.files && documentsInput.files.length > 0;
  const hasBuktiTransfer = buktiTransferInput?.files && buktiTransferInput.files.length > 0;

  
  if (!hasDocuments) {
    allValid = false;
    invalidFields.push('documents');
  }
  
  if (!hasBuktiTransfer) {
    allValid = false;
    invalidFields.push('buktiTransfer');
  }
  
  // Update button state
  if (allValid) {
    (nextBtn as HTMLButtonElement).disabled = false;
    nextBtn.classList.remove('bg-gray-400', 'cursor-not-allowed');
    nextBtn.classList.add('bg-gradient-to-r', 'from-amber-500', 'to-orange-600', 'hover:from-amber-600', 'hover:to-orange-700', 'cursor-pointer', 'shadow-lg');
  } else {
    (nextBtn as HTMLButtonElement).disabled = true;
    nextBtn.classList.remove('bg-gradient-to-r', 'from-amber-500', 'to-orange-600', 'hover:from-amber-600', 'hover:to-orange-700', 'cursor-pointer', 'shadow-lg');
    nextBtn.classList.add('bg-gray-400', 'cursor-not-allowed');
  }
}

// Debug function to test email sanitization
function testEmailSanitization() {
  const testCases = [
    'user@gmail.com',
    'user@',
    'user',
    'user@gmail',
    'user@domain.com',
    'invalid email',
    'user+tag@gmail.com',
    'user.name@domain.co.uk'
  ];

  testCases.forEach(testCase => {
    const result = InputSanitizer.sanitizeEmail(testCase, false);
    const strictResult = InputSanitizer.sanitizeEmail(testCase, true);
  });
}

// Make debug function available globally
(window as any).testEmailSanitization = testEmailSanitization;

// File preview functions
function displayDocumentsPreview(files: FileList | null) {
  const previewContainer = document.getElementById('documentsPreview');
  const fileListContainer = document.getElementById('documentsFileList');
  
  if (!files || files.length === 0) {
    previewContainer?.classList.add('hidden');
    return;
  }
  
  previewContainer?.classList.remove('hidden');
  if (fileListContainer) {
    fileListContainer.innerHTML = '';
  }
  
  // Only show the first file (KTP)
  const file = files[0];
  
  // Check file size (max 2MB)
  if (file.size > 2 * 1024 * 1024) {
    import('sweetalert2').then(Swal => {
      Swal.default.fire({
        title: "Ukuran file terlalu besar. Maksimal 2MB per file",
        icon: "warning",
        draggable: true
      });
    });
    const fileInput = document.getElementById('documentsUpload') as HTMLInputElement;
    if (fileInput) fileInput.value = '';
    previewContainer?.classList.add('hidden');
    return;
  }
  
  const fileItem = document.createElement('div');
  fileItem.className = 'p-2 bg-amber-50 rounded border flex items-center space-x-2';
  
  // File preview (image or icon)
  const previewElement = document.createElement('div');
  previewElement.className = 'flex-shrink-0';
  
  // Show image preview (now only accepting JPG/PNG)
  const img = document.createElement('img');
  img.className = 'w-12 h-12 object-cover rounded border shadow-sm';
  img.alt = 'Preview';
  
  const reader = new FileReader();
  reader.onload = function(e) {
    img.src = e.target?.result as string;
  };
  reader.readAsDataURL(file);
  
  previewElement.appendChild(img);
  
  // File details
  const fileDetails = document.createElement('div');
  fileDetails.className = 'flex-1 min-w-0';
  
  const fileName = document.createElement('p');
  fileName.className = 'text-sm font-medium text-gray-800 truncate';
  fileName.textContent = file.name;
  
  const fileMeta = document.createElement('p');
  fileMeta.className = 'text-xs text-gray-500';
  fileMeta.innerHTML = `${formatFileSize(file.size)} â€¢ <span class="text-green-600">âœ“ Uploaded</span>`;
  
  fileDetails.appendChild(fileName);
  fileDetails.appendChild(fileMeta);
  
  // Remove button
  const removeBtn = document.createElement('button');
  removeBtn.type = 'button';
  removeBtn.className = 'flex-shrink-0 p-1 text-red-500 hover:text-red-700 hover:bg-red-50 rounded';
  removeBtn.setAttribute('data-action', 'remove-document');
  removeBtn.setAttribute('data-index', '0');
  removeBtn.innerHTML = '<svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path></svg>';
  removeBtn.title = 'Hapus file';
  
  fileItem.appendChild(previewElement);
  fileItem.appendChild(fileDetails);
  fileItem.appendChild(removeBtn);
  fileListContainer?.appendChild(fileItem);
}

function displayBuktiTransferPreview(file: File | null) {
  const previewContainer = document.getElementById('buktiTransferPreview');
  const infoContainer = document.getElementById('buktiTransferInfo');
  
  if (!file) {
    previewContainer?.classList.add('hidden');
    return;
  }
  
  previewContainer?.classList.remove('hidden');
  if (infoContainer) {
    infoContainer.innerHTML = '';
    
    const fileItem = document.createElement('div');
    fileItem.className = 'p-2 bg-green-50 rounded border flex items-center space-x-2';
    
    // File preview (image or icon)
    const previewElement = document.createElement('div');
    previewElement.className = 'flex-shrink-0';
    
    // Show image preview (now only accepting JPG/PNG)
    const img = document.createElement('img');
    img.className = 'w-12 h-12 object-cover rounded border shadow-sm';
    img.alt = 'Preview bukti transfer';
    
    const reader = new FileReader();
    reader.onload = function(e) {
      img.src = e.target?.result as string;
    };
    reader.readAsDataURL(file);
    
    previewElement.appendChild(img);
    
    // File details
    const fileDetails = document.createElement('div');
    fileDetails.className = 'flex-1 min-w-0';
    
    const fileName = document.createElement('p');
    fileName.className = 'text-sm font-medium text-gray-800 truncate';
    fileName.textContent = file.name;
    
    const fileMeta = document.createElement('p');
    fileMeta.className = 'text-xs text-gray-500';
    fileMeta.innerHTML = `${formatFileSize(file.size)} â€¢ <span class="text-green-600">âœ“ Uploaded</span>`;
    
    fileDetails.appendChild(fileName);
    fileDetails.appendChild(fileMeta);
    
    // Remove button
    const removeBtn = document.createElement('button');
    removeBtn.type = 'button';
    removeBtn.className = 'flex-shrink-0 p-1 text-red-500 hover:text-red-700 hover:bg-red-50 rounded';
    removeBtn.setAttribute('data-action', 'remove-bukti-transfer');
    removeBtn.innerHTML = '<svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path></svg>';
    removeBtn.title = 'Hapus file';
    
    fileItem.appendChild(previewElement);
    fileItem.appendChild(fileDetails);
    fileItem.appendChild(removeBtn);
    infoContainer.appendChild(fileItem);
  }
}

function formatFileSize(bytes: number): string {
  if (bytes === 0) return '0 Bytes';
  const k = 1024;
  const sizes = ['Bytes', 'KB', 'MB', 'GB'];
  const i = Math.floor(Math.log(bytes) / Math.log(k));
  return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
}

function removeDocumentFile(index: number) {
  const input = document.getElementById('documentsUpload') as HTMLInputElement;
  if (!input) return;
  
  const dt = new DataTransfer();
  
  Array.from(input.files || []).forEach((file, i) => {
    if (i !== index) {
      dt.items.add(file);
    }
  });
  
  input.files = dt.files;
  displayDocumentsPreview(input.files);
}

function removeBuktiTransferFile() {
  const input = document.getElementById('buktiTransfer') as HTMLInputElement;
  if (input) {
    input.value = '';
    displayBuktiTransferPreview(null);
  }
  checkFormValidation();
}

// Function to start countdown and redirect to homepage
function startCountdownAndRedirect() {
  let countdown = 5;
  const countdownElement = document.getElementById('countdown');
  const redirectButton = document.getElementById('redirectNow');
  
  // Update countdown display
  const updateCountdown = () => {
    if (countdownElement) {
      countdownElement.textContent = countdown.toString();
    }
    
    if (countdown <= 0) {
      // Redirect to homepage
      window.location.href = '/';
    } else {
      countdown--;
      setTimeout(updateCountdown, 1000);
    }
  };
  
  // Start countdown
  setTimeout(updateCountdown, 1000);
  
  // Add click event to redirect button for immediate redirect
  if (redirectButton) {
    redirectButton.addEventListener('click', () => {
      window.location.href = '/';
    });
  }
}

// Event listeners for file inputs
document.addEventListener('DOMContentLoaded', function() {
  const documentsInput = document.getElementById('documentsUpload') as HTMLInputElement;
  const buktiTransferInput = document.getElementById('buktiTransfer') as HTMLInputElement;
  
  // Upload button event listeners
  const documentsUploadBtn = document.getElementById('documentsUploadBtn');
  const buktiTransferUploadBtn = document.getElementById('buktiTransferUploadBtn');
  
  documentsUploadBtn?.addEventListener('click', () => {
    documentsInput?.click();
  });
  
  buktiTransferUploadBtn?.addEventListener('click', () => {
    buktiTransferInput?.click();
  });
  
  documentsInput?.addEventListener('change', function() {
    displayDocumentsPreview(this.files);
    
    // Update upload area appearance
    const uploadArea = document.getElementById('documentsUploadArea');
    if (uploadArea) {
      if (this.files && this.files.length > 0) {
        uploadArea.classList.remove('border-gray-300');
        uploadArea.classList.add('border-green-400', 'bg-green-50');
      } else {
        uploadArea.classList.remove('border-green-400', 'bg-green-50');
        uploadArea.classList.add('border-gray-300');
      }
    }
    
    // Check form validation after file upload
    checkFormValidation();
  });
  
  buktiTransferInput?.addEventListener('change', function() {
    const file = this.files?.[0] || null;
    displayBuktiTransferPreview(file);
    
    // Update upload area appearance
    const uploadArea = document.getElementById('buktiTransferUploadArea');
    if (uploadArea) {
      if (file) {
        uploadArea.classList.remove('border-gray-300');
        uploadArea.classList.add('border-green-400', 'bg-green-50');
      } else {
        uploadArea.classList.remove('border-green-400', 'bg-green-50');
        uploadArea.classList.add('border-gray-300');
      }
    }
    
    // Check form validation after file upload
    checkFormValidation();
  });
  
  // Add debug check button
  const checkFormBtn = document.getElementById('checkFormBtn');
  checkFormBtn?.addEventListener('click', () => {
    performValidation();
  });
  
  // Setup input sanitization
  setupInputSanitization();
  
  // Setup info tooltips
  setupInfoTooltips();
  
  // Add event listeners to all form inputs for real-time validation
  const formInputs = [
    '#paketUsaha',
    '#sales',
    '#namaMitra',
    '#alamatMitra', 
    '#noHp',
    '#email',
    '#namaPengirim',
    '#noRekPengirim',
    '#bankPengirim'
  ];
  
  formInputs.forEach(selector => {
    const elements = document.querySelectorAll(selector);
    elements.forEach(element => {
      element.addEventListener('change', checkFormValidation);
      element.addEventListener('input', checkFormValidation);
      // For select elements, also listen to blur
      if (element.tagName === 'SELECT') {
        element.addEventListener('blur', checkFormValidation);
      }
    });
  });
  
  // Add specific event listeners for radio buttons
  document.querySelectorAll('input[name="sistemKemitraan"]').forEach(radio => {
    radio.addEventListener('change', function(this: HTMLInputElement) {
      checkFormValidation();
    });
  });
  
  document.querySelectorAll('input[name="nilaiPaket"]').forEach(radio => {
    radio.addEventListener('change', function(this: HTMLInputElement) {
      checkFormValidation();
    });
  });
  
  // Add event listeners for RM Nusantara sub menu radio buttons
  document.querySelectorAll('input[name="rmNusantaraSubMenu"]').forEach(radio => {
    radio.addEventListener('change', function(this: HTMLInputElement) {
      checkFormValidation();
    });
  });
  
  // Initial validation check
  checkFormValidation();
  
  // Mobile Package Modal Functionality
  const mobilePaketSelector = document.getElementById('mobilePaketSelector');
  const mobilePackageModal = document.getElementById('mobilePackageModal');
  const closeMobilePackageModal = document.getElementById('closeMobilePackageModal');
  const mobilePaketText = document.getElementById('mobilePaketText');
  const desktopPaketUsaha = document.getElementById('paketUsaha') as HTMLSelectElement;

  // Open mobile package modal
  mobilePaketSelector?.addEventListener('click', () => {
    mobilePackageModal?.classList.remove('hidden');
    document.body.style.overflow = 'hidden'; // Prevent background scrolling
  });

  // Close mobile package modal
  const closeMobileModal = () => {
    mobilePackageModal?.classList.add('hidden');
    document.body.style.overflow = 'auto'; // Restore scrolling
  };

  closeMobilePackageModal?.addEventListener('click', closeMobileModal);

  // Close modal when clicking outside
  mobilePackageModal?.addEventListener('click', (e) => {
    if (e.target === mobilePackageModal) {
      closeMobileModal();
    }
  });

  // Handle package selection from mobile modal
  document.querySelectorAll('.package-option').forEach(option => {
    option.addEventListener('click', function(this: HTMLButtonElement) {
      const packageName = this.getAttribute('data-package');
      const originalPrice = this.getAttribute('data-original');
      const discountedPrice = this.getAttribute('data-discounted');
      
      if (packageName && originalPrice && discountedPrice) {
        // Update mobile selector text
        if (mobilePaketText) {
          mobilePaketText.textContent = packageName;
          mobilePaketText.classList.remove('text-gray-500');
          mobilePaketText.classList.add('text-gray-800', 'font-medium');
        }
        
        // Update desktop select (for form data consistency)
        if (desktopPaketUsaha) {
          desktopPaketUsaha.value = packageName;
          
          // Trigger change event for form validation and price updates
          const changeEvent = new Event('change', { bubbles: true });
          desktopPaketUsaha.dispatchEvent(changeEvent);
        }
        
        // Close modal
        closeMobileModal();
      }
    });
  });
  
  // Close modal with escape key
  document.addEventListener('keydown', (e) => {
    if (e.key === 'Escape' && !mobilePackageModal?.classList.contains('hidden')) {
      closeMobileModal();
    }
  });

  // Desktop Custom Dropdown Functionality
  const desktopPaketSelector = document.getElementById('desktopPaketSelector');
  const desktopDropdownMenu = document.getElementById('desktopDropdownMenu');
  const desktopDropdownArrow = document.getElementById('desktopDropdownArrow');
  const desktopPaketText = document.getElementById('desktopPaketText');
  let isDesktopDropdownOpen = false;

  // Toggle desktop dropdown
  const toggleDesktopDropdown = () => {
    isDesktopDropdownOpen = !isDesktopDropdownOpen;
    
    if (isDesktopDropdownOpen) {
      desktopPaketSelector?.classList.add('desktop-dropdown-open');
      desktopDropdownMenu?.classList.add('desktop-dropdown-open');
      desktopDropdownArrow?.classList.add('desktop-dropdown-open');
    } else {
      desktopPaketSelector?.classList.remove('desktop-dropdown-open');
      desktopDropdownMenu?.classList.remove('desktop-dropdown-open');
      desktopDropdownArrow?.classList.remove('desktop-dropdown-open');
    }
  };

  // Close desktop dropdown
  const closeDesktopDropdown = () => {
    if (isDesktopDropdownOpen) {
      isDesktopDropdownOpen = false;
      desktopPaketSelector?.classList.remove('desktop-dropdown-open');
      desktopDropdownMenu?.classList.remove('desktop-dropdown-open');
      desktopDropdownArrow?.classList.remove('desktop-dropdown-open');
    }
  };

  // Open/close desktop dropdown
  desktopPaketSelector?.addEventListener('click', (e) => {
    e.stopPropagation();
    toggleDesktopDropdown();
  });

  // Handle desktop package selection
  document.querySelectorAll('.desktop-package-option').forEach(option => {
    option.addEventListener('click', function(this: HTMLButtonElement) {
      const packageName = this.getAttribute('data-package');
      const originalPrice = this.getAttribute('data-original');
      const discountedPrice = this.getAttribute('data-discounted');
      
      if (packageName && originalPrice && discountedPrice) {
        // Update desktop selector text
        if (desktopPaketText) {
          desktopPaketText.textContent = packageName;
          desktopPaketText.classList.remove('text-gray-500');
          desktopPaketText.classList.add('text-gray-800', 'font-medium');
        }

        // Update hidden select (for form data consistency)
        if (desktopPaketUsaha) {
          desktopPaketUsaha.value = packageName;
          
          // Trigger change event for form validation and price updates
          const changeEvent = new Event('change', { bubbles: true });
          desktopPaketUsaha.dispatchEvent(changeEvent);
        }

        // Update visual selection
        document.querySelectorAll('.desktop-package-option').forEach(opt => {
          opt.classList.remove('selected');
        });
        this.classList.add('selected');
        
        // Close dropdown
        closeDesktopDropdown();
      }
    });
  });

  // Close desktop dropdown when clicking outside
  document.addEventListener('click', (e) => {
    const target = e.target as HTMLElement;
    if (!desktopPaketSelector?.contains(target) && !desktopDropdownMenu?.contains(target)) {
      closeDesktopDropdown();
    }
  });

  // Close desktop dropdown with escape key
  document.addEventListener('keydown', (e) => {
    if (e.key === 'Escape' && isDesktopDropdownOpen) {
      closeDesktopDropdown();
    }
  });
  
  // Event delegation for dynamic buttons
  document.addEventListener('click', function(e) {
    const target = e.target as HTMLElement;
    
    // Handle remove bukti transfer button
    if (target.closest('[data-action="remove-bukti-transfer"]')) {
      e.preventDefault();
      removeBuktiTransferFile();
    }
    
    // Handle remove document file button  
    if (target.closest('[data-action="remove-document"]')) {
      e.preventDefault();
      const index = parseInt(target.closest('[data-action="remove-document"]')?.getAttribute('data-index') || '0');
      removeDocumentFile(index);
    }
  });
});

// Format currency
function formatCurrency(amount: number) {
  return new Intl.NumberFormat('id-ID', {
    style: 'currency',
    currency: 'IDR',
    minimumFractionDigits: 0
  }).format(amount).replace('IDR', 'Rp.');
}

// Update package selection
const paketUsahaElement = document.getElementById('paketUsaha') as HTMLSelectElement;
paketUsahaElement?.addEventListener('change', function() {
  selectedPackage = this.value;
  const priceData = packagePrices[selectedPackage as keyof typeof packagePrices];
  packagePrice = priceData ? priceData.discounted : 0;
  
  // Show/hide RM Nusantara sub options
  const rmNusantaraOptions = document.getElementById('rmNusantaraOptions');
  if (this.value === 'RM Nusantara') {
    rmNusantaraOptions?.classList.remove('hidden');
  } else {
    rmNusantaraOptions?.classList.add('hidden');
    // Clear RM Nusantara sub menu selection
    const rmSubMenuRadios = document.querySelectorAll('input[name="rmNusantaraSubMenu"]') as NodeListOf<HTMLInputElement>;
    rmSubMenuRadios.forEach(radio => radio.checked = false);
  }
  
  // Update price display
  updatePriceDisplay(priceData);
  updatePaymentCards();
  checkFormValidation();
});

function updatePriceDisplay(priceData: { original: number, discounted: number } | undefined) {
  const priceDisplay = document.getElementById('priceDisplay');
  const originalPriceEl = document.getElementById('originalPrice');
  const discountedPriceEl = document.getElementById('discountedPrice');
  const savingsAmountEl = document.getElementById('savingsAmount');
  
  if (!priceData || !priceDisplay || !originalPriceEl || !discountedPriceEl || !savingsAmountEl) {
    priceDisplay?.classList.add('hidden');
    return;
  }
  
  const savings = priceData.original - priceData.discounted;
  
  originalPriceEl.textContent = formatCurrency(priceData.original);
  discountedPriceEl.textContent = formatCurrency(priceData.discounted);
  savingsAmountEl.textContent = formatCurrency(savings);
  
  priceDisplay.classList.remove('hidden');
}

// Update payment type selection
document.querySelectorAll('input[name="nilaiPaket"]').forEach(radio => {
  radio.addEventListener('change', function(this: HTMLInputElement) {
    paymentType = this.value;
    updatePaymentCards();
    checkFormValidation();
  });
});

function updatePaymentCards() {
  if (!packagePrice) return;

  const dpAmount = DP_FIXED_AMOUNT; // Fixed 5 million
  const discountedFullPrice = packagePrice - dayDiscount;
  const kekurangan = packagePrice - dpAmount;

  // Update DP card
  const dpAmountElement = document.getElementById('dp-amount');
  if (dpAmountElement) {
    dpAmountElement.textContent = formatCurrency(dpAmount);
  }
  
  // Update Full Payment card
  const originalPriceElement = document.getElementById('original-price');
  const discountedPriceElement = document.getElementById('discounted-price');
  if (originalPriceElement) {
    originalPriceElement.textContent = formatCurrency(packagePrice);
  }
  if (discountedPriceElement) {
    discountedPriceElement.textContent = formatCurrency(discountedFullPrice);
  }
  
  // Update Kekurangan card
  const kekuranganAmountElement = document.getElementById('kekurangan-amount');
  if (kekuranganAmountElement) {
    kekuranganAmountElement.textContent = formatCurrency(kekurangan);
  }
  
  // Update final payment amount
  let finalAmount = 0;
  const dpCard = document.getElementById('dp-card');
  const fullCard = document.getElementById('full-card');
  const kekuranganCard = document.getElementById('kekurangan-card');
  
  if (paymentType === 'DP') {
    finalAmount = dpAmount - dayDiscount;
    dpCard?.classList.remove('opacity-50');
    fullCard?.classList.add('opacity-50');
    kekuranganCard?.classList.remove('opacity-50');
  } else if (paymentType === 'Full Payment') {
    finalAmount = discountedFullPrice;
    dpCard?.classList.add('opacity-50');
    fullCard?.classList.remove('opacity-50');
    kekuranganCard?.classList.add('opacity-50');
  }
  
  const finalPaymentElement = document.getElementById('final-payment');
  if (finalPaymentElement) {
    finalPaymentElement.textContent = formatCurrency(Math.max(0, finalAmount));
  }
}

// Bank validation using Fuse.js (placeholder - you'll need to import the actual validator)
async function validateBank(bankInput: string) {
  // This would call your bank validator API
  // For now, let's simulate it
  const commonBanks: { [key: string]: string } = {
  };
  
  const lowerInput = bankInput.toLowerCase();
  return commonBanks[lowerInput] || bankInput;
}

// Form navigation
const nextBtn = document.getElementById('nextBtn');
nextBtn?.addEventListener('click', function() {
  if (validateStep1WithSanitization()) {
    showConfirmation();
    updateProgressBar(2);
  }
});

const backBtn = document.getElementById('backBtn');
backBtn?.addEventListener('click', function() {
  const step1Element = document.getElementById('form-step-1');
  const step2Element = document.getElementById('form-step-2');
  
  step2Element?.classList.add('hidden');
  step1Element?.classList.remove('hidden');
  updateProgressBar(1);
});

const submitBtn = document.getElementById('submitBtn');
submitBtn?.addEventListener('click', async function() {
  await submitFormWithSanitization();
  const step2Element = document.getElementById('form-step-2');
  const step3Element = document.getElementById('form-step-3');
  
  step2Element?.classList.add('hidden');
  step3Element?.classList.remove('hidden');
  updateProgressBar(3);
});

function validateStep1() {
  // Required fields (excluding jenisUsaha/PIC Sales which is optional)
  const required = ['sistemKemitraan', 'paketUsaha', 'namaMitra', 'alamatMitra', 'noHp', 'email', 'nilaiPaket', 'namaPengirim', 'noRekPengirim', 'bankPengirim'];
  
  for (let field of required) {
    let element: HTMLInputElement | null = null;
    
    // Handle radio buttons differently
    if (field === 'sistemKemitraan' || field === 'nilaiPaket') {
      element = document.querySelector(`input[name="${field}"]:checked`) as HTMLInputElement;
    } else {
      element = document.getElementById(field) as HTMLInputElement;
    }
    
    if (!element || !element.value.trim()) {
      alert(`Field ${field} harus diisi`);
      if (field !== 'sistemKemitraan' && field !== 'nilaiPaket') {
        element = document.getElementById(field) as HTMLInputElement;
        element?.focus();
      }
      return false;
    }
  }
  
  // Check file uploads
  const documentsUpload = document.getElementById('documentsUpload') as HTMLInputElement;
  const buktiTransfer = document.getElementById('buktiTransfer') as HTMLInputElement;
  
  if (!documentsUpload?.files?.length) {
    alert('Silakan upload dokumen KTP, NPWP & foto diri mitra');
    document.getElementById('documentsUploadArea')?.scrollIntoView({ behavior: 'smooth' });
    return false;
  }
  
  if (!buktiTransfer?.files?.length) {
    alert('Silakan upload bukti transfer');
    document.getElementById('buktiTransferUploadArea')?.scrollIntoView({ behavior: 'smooth' });
    return false;
  }
  
  // Validate file types and sizes
  const allowedTypes = ['image/jpeg', 'image/jpg', 'image/png'];
  const maxSize = 5 * 1024 * 1024; // 5MB
  
  // Check documents
  for (let i = 0; i < documentsUpload.files.length; i++) {
    const file = documentsUpload.files[i];
    if (!allowedTypes.includes(file.type)) {
      alert(`File ${file.name} tidak didukung. Gunakan format JPG atau PNG saja`);
      return false;
    }
    if (file.size > maxSize) {
      alert(`File ${file.name} terlalu besar. Maksimal 5MB per file`);
      return false;
    }
  }
  
  // Check bukti transfer
  const buktiFile = buktiTransfer.files[0];
  if (!allowedTypes.includes(buktiFile.type)) {
    alert(`File bukti transfer tidak didukung. Gunakan format JPG atau PNG saja`);
    return false;
  }
  if (buktiFile.size > maxSize) {
    alert(`File bukti transfer terlalu besar. Maksimal 5MB`);
    return false;
  }
  
  return true;
}

function showConfirmation() {
  const formData = collectFormDataWithSanitization();
  const confirmationHTML = generateConfirmationHTML(formData);
  const confirmationElement = document.getElementById('confirmationData');
  
  if (confirmationElement) {
    confirmationElement.innerHTML = confirmationHTML;
  }
  
  const step1Element = document.getElementById('form-step-1');
  const step2Element = document.getElementById('form-step-2');
  
  if (step1Element && step2Element) {
    step1Element.classList.add('hidden');
    step2Element.classList.remove('hidden');
  }
}

function collectFormData() {
  const sistemKemitraanElement = document.querySelector('input[name="sistemKemitraan"]:checked') as HTMLInputElement;
  const salesElement = document.getElementById('sales') as HTMLInputElement;
  const paketUsahaElement = document.getElementById('paketUsaha') as HTMLSelectElement;
  const rmNusantaraSubMenuElement = document.querySelector('input[name="rmNusantaraSubMenu"]:checked') as HTMLInputElement;
  const namaMitraElement = document.getElementById('namaMitra') as HTMLInputElement;
  const alamatMitraElement = document.getElementById('alamatMitra') as HTMLInputElement;
  const noHpElement = document.getElementById('noHp') as HTMLInputElement;
  const emailElement = document.getElementById('email') as HTMLInputElement;
  const nilaiPaketElement = document.querySelector('input[name="nilaiPaket"]:checked') as HTMLInputElement;
  const namaPengirimElement = document.getElementById('namaPengirim') as HTMLInputElement;
  const noRekPengirimElement = document.getElementById('noRekPengirim') as HTMLInputElement;
  const bankPengirimElement = document.getElementById('bankPengirim') as HTMLInputElement;
  const documentsElement = document.getElementById('documentsUpload') as HTMLInputElement;
  const buktiTransferElement = document.getElementById('buktiTransfer') as HTMLInputElement;

  return {
    sistemKemitraan: sistemKemitraanElement?.value || '',
    sales: salesElement?.value || '',
    paketUsaha: paketUsahaElement?.value || '',
    rmNusantaraSubMenu: rmNusantaraSubMenuElement?.value || '',
    namaMitra: namaMitraElement?.value || '',
    alamatMitra: alamatMitraElement?.value || '',
    noHp: noHpElement?.value || '',
    email: emailElement?.value || '',
    nilaiPaket: nilaiPaketElement?.value || '',
    namaPengirim: namaPengirimElement?.value || '',
    noRekPengirim: noRekPengirimElement?.value || '',
    bankPengirim: bankPengirimElement?.value || '',
    documentsFiles: documentsElement?.files || null,
    buktiTransferFile: buktiTransferElement?.files?.[0] || null
  };
}

function generateConfirmationHTML(data: any) {
  const dpAmount = DP_FIXED_AMOUNT; // Fixed 5 million
  const discountedFullPrice = packagePrice - dayDiscount;
  const finalAmount = data.nilaiPaket === 'DP' ? dpAmount - dayDiscount : discountedFullPrice;
  
  // Get original price for display
  const priceData = packagePrices[data.paketUsaha as keyof typeof packagePrices];
  const originalPrice = priceData ? priceData.original : packagePrice;
  
  // Generate files list HTML
  let documentsHTML = '';
  if (data.documentsFiles && data.documentsFiles.length > 0) {
    const file = data.documentsFiles[0] as File; // Only handle first file (KTP)
    documentsHTML = `
      <div class="flex items-center space-x-2">
        <svg class="w-4 h-4 text-amber-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 21h10a2 2 0 002-2V9.414a1 1 0 00-.293-.707l-5.414-5.414A1 1 0 0012.586 1H7a2 2 0 00-2 2v16a2 2 0 002 2z"></path>
        </svg>
        <span class="text-sm text-gray-600">Foto KTP: ${file.name} (${formatFileSize(file.size)})</span>
      </div>
    `;
  }
  
  return `
    <div class="space-y-6">
      <div class="bg-gray-50 p-4 rounded-lg">
        <h3 class="font-semibold text-gray-800 mb-2">Sistem Kemitraan</h3>
        <p class="text-gray-600">${data.sistemKemitraan}</p>
        <p class="text-gray-600">PIC/Sales: ${data.sales}</p>
      </div>
      
      <div class="bg-gray-50 p-4 rounded-lg">
        <h3 class="font-semibold text-gray-800 mb-2">Paket Usaha</h3>
        <p class="text-gray-600">${data.paketUsaha}</p>
        ${data.paketUsaha === 'RM Nusantara' && data.rmNusantaraSubMenu ? `<p class="text-gray-600">Sub Menu: ${data.rmNusantaraSubMenu}</p>` : ''}
        <p class="text-gray-600">
          Harga: <span style="text-decoration: line-through; color: #999;">${formatCurrency(originalPrice)}</span> 
          <strong style="color: #dc2626;">${formatCurrency(packagePrice)}</strong>
        </p>
      </div>
      
      <div class="bg-gray-50 p-4 rounded-lg">
        <h3 class="font-semibold text-gray-800 mb-2">Data Diri Mitra</h3>
        <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div>
            <label class="text-sm font-medium text-gray-600">Nama:</label>
            <input type="text" value="${data.namaMitra}" class="w-full mt-1 px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-amber-500" id="confirm-nama">
          </div>
          <div>
            <label class="text-sm font-medium text-gray-600">Email:</label>
            <input type="text" value="${data.email}" class="w-full mt-1 px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-amber-500" id="confirm-email">
          </div>
          <div>
            <label class="text-sm font-medium text-gray-600">Alamat:</label>
            <input type="text" value="${data.alamatMitra}" class="w-full mt-1 px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-amber-500" id="confirm-alamat">
          </div>
          <div>
            <label class="text-sm font-medium text-gray-600">No HP:</label>
            <input type="tel" value="${data.noHp}" class="w-full mt-1 px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-amber-500" id="confirm-hp">
          </div>
        </div>
      </div>
      
      <div class="bg-gray-50 p-4 rounded-lg">
        <h3 class="font-semibold text-gray-800 mb-2">Dokumen Terupload</h3>
        <div class="space-y-2">
          <div>
            <p class="text-sm font-medium text-gray-700">Dokumen KTP:</p>
            <div class="ml-4 space-y-1">
              ${documentsHTML}
            </div>
          </div>
          <div>
            <p class="text-sm font-medium text-gray-700">Bukti Transfer:</p>
            <div class="ml-4 flex items-center space-x-2">
              <svg class="w-4 h-4 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 21h10a2 2 0 002-2V9.414a1 1 0 00-.293-.707l-5.414-5.414A1 1 0 0012.586 1H7a2 2 0 00-2 2v16a2 2 0 002 2z"></path>
              </svg>
              <span class="text-sm text-gray-600">${data.buktiTransferFile ? `${data.buktiTransferFile.name} (${formatFileSize(data.buktiTransferFile.size)})` : 'Tidak ada'}</span>
            </div>
          </div>
        </div>
      </div>
      
      <div class="bg-gray-50 p-4 rounded-lg">
        <h3 class="font-semibold text-gray-800 mb-2">Pembayaran</h3>
        <p class="text-gray-600">Metode: ${data.nilaiPaket}</p>
        <p class="text-lg font-semibold text-green-600">Total Bayar: ${formatCurrency(Math.max(0, finalAmount))}</p>
      </div>
      
      <div class="bg-gray-50 p-4 rounded-lg">
        <h3 class="font-semibold text-gray-800 mb-2">Sumber Dana</h3>
        <p class="text-gray-600">Nama: ${data.namaPengirim}</p>
        <p class="text-gray-600">No Rekening: ${data.noRekPengirim}</p>
        <p class="text-gray-600">Bank: ${data.bankPengirim}</p>
      </div>
    </div>
  `;
}

async function submitForm() {
  try {
    const formData = collectFormData();
    
    // Update data with confirmation changes
    const confirmNamaElement = document.getElementById('confirm-nama') as HTMLInputElement;
    const confirmEmailElement = document.getElementById('confirm-email') as HTMLInputElement;
    const confirmAlamatElement = document.getElementById('confirm-alamat') as HTMLInputElement;
    const confirmHpElement = document.getElementById('confirm-hp') as HTMLInputElement;
    
    formData.namaMitra = confirmNamaElement?.value || formData.namaMitra;
    formData.email = confirmEmailElement?.value || formData.email;
    formData.alamatMitra = confirmAlamatElement?.value || formData.alamatMitra;
    formData.noHp = confirmHpElement?.value || formData.noHp;
    
    // Validate bank name
    formData.bankPengirim = await validateBank(formData.bankPengirim);
    
    // Calculate final amounts
    const dpAmount = DP_FIXED_AMOUNT; // Fixed 5 million
    const discountedFullPrice = packagePrice - dayDiscount;
    const finalAmount = formData.nilaiPaket === 'DP' ? dpAmount - dayDiscount : discountedFullPrice;
    
    // Prepare form data for submission
    const submitData = new FormData();
    
    // Add all form fields except files
    const formFields = [
      'sistemKemitraan', 'paketUsaha', 'rmNusantaraSubMenu', 'namaMitra', 
      'alamatMitra', 'noHp', 'email', 'nilaiPaket', 'namaPengirim', 
      'noRekPengirim', 'bankPengirim', 'sales'
    ];
    
    formFields.forEach(key => {
      if (formData[key as keyof typeof formData] && typeof formData[key as keyof typeof formData] === 'string') {
        submitData.append(key, formData[key as keyof typeof formData] as string);
      }
    });
    
    // Also send sales as jenisUsaha for backward compatibility
    submitData.append('jenisUsaha', formData.sales || '');
    
    // Get original price for backend
    const priceData = packagePrices[formData.paketUsaha as keyof typeof packagePrices];
    const originalPrice = priceData ? priceData.original : packagePrice;
    
    // Add calculated values
    submitData.append('hargaPaket', packagePrice.toString()); // Current discounted price
    submitData.append('hargaAsli', originalPrice.toString()); // Original price
    submitData.append('nominalDP', dpAmount.toString());
    submitData.append('nominalFull', discountedFullPrice.toString());
    submitData.append('kekurangan', (packagePrice - dpAmount).toString());
    submitData.append('diskonHarian', dayDiscount.toString());
    submitData.append('yangHarusDibayar', Math.max(0, finalAmount).toString());
    
    // Add files
    if (formData.documentsFiles && formData.documentsFiles.length > 0) {
      // Only send the first file (KTP)
      submitData.append('documents', formData.documentsFiles[0]);
    }
    if (formData.buktiTransferFile) {
      submitData.append('buktiTransfer', formData.buktiTransferFile);
    }
    
    // Submit to backend
    const API_URL = import.meta.env.PUBLIC_API_URL || 'http://localhost:3000';
    const response = await fetch(`${API_URL}/api/mitra/register`, {
      method: 'POST',
      body: submitData
    });
    
    const responseText = await response.text();
    
    if (!response.ok) {
      const errorData = responseText ? JSON.parse(responseText) : {};
      const errorMessage = errorData.error || errorData.details || 'Gagal mengirim formulir';
      throw new Error(errorMessage);
    }

    
    // Move to step 3 (success)
    updateProgressBar(3);
    document.getElementById('form-step-2')?.classList.add('hidden');
    document.getElementById('form-step-3')?.classList.remove('hidden');
    
  } catch (error) {
    console.error('Error submitting form:', error);
    const errorMessage = error instanceof Error ? error.message : 'Terjadi kesalahan saat mengirim formulir';
    alert(`Error: ${errorMessage}`);
  }
}

function updateProgressBar(step: number) {
  // Mobile Progress Bar
  const mobileProgressFill = document.getElementById('mobile-progress-fill');
  const mobileFillWidth = step === 1 ? '33.33%' : step === 2 ? '66.66%' : '100%';
  if (mobileProgressFill) {
    mobileProgressFill.style.width = mobileFillWidth;
  }

  // Update mobile step indicators and labels
  for (let i = 1; i <= 3; i++) {
    const mobileStep = document.getElementById(`mobile-step-${i}`);
    const mobileLabel = document.getElementById(`mobile-label-${i}`);
    
    if (i <= step) {
      if (mobileStep) {
        mobileStep.className = 'w-4 h-4 bg-gradient-to-r from-amber-500 to-orange-600 rounded-full shadow-sm border-2 border-white';
      }
      if (mobileLabel) {
        mobileLabel.className = 'text-amber-600 text-xs font-medium';
      }
    } else {
      if (mobileStep) {
        mobileStep.className = 'w-4 h-4 bg-gray-300 rounded-full shadow-sm border-2 border-white';
      }
      if (mobileLabel) {
        mobileLabel.className = 'text-gray-400 text-xs font-medium';
      }
    }
  }

  // Desktop Progress Bar
  for (let i = 1; i <= 3; i++) {
    const desktopStep = document.getElementById(`desktop-step-${i}`);
    const desktopLabel = document.getElementById(`desktop-label-${i}`);
    
    if (i <= step) {
      if (desktopStep) {
        desktopStep.className = 'w-10 h-10 bg-gradient-to-r from-amber-500 to-orange-600 text-white rounded-full flex items-center justify-center font-semibold shadow-md text-sm';
      }
      if (desktopLabel) {
        desktopLabel.className = 'text-sm font-medium text-amber-600';
      }
    } else {
      if (desktopStep) {
        desktopStep.className = 'w-10 h-10 bg-gray-200 text-gray-500 rounded-full flex items-center justify-center font-semibold shadow-sm text-sm border-2 border-gray-300';
      }
      if (desktopLabel) {
        desktopLabel.className = 'text-sm font-medium text-gray-400';
      }
    }
  }

  // Desktop progress lines
  for (let i = 1; i <= 2; i++) {
    const progressLine = document.getElementById(`desktop-progress-${i}`);
    if (progressLine) {
      if (i < step) {
        progressLine.style.width = '100%';
      } else if (i === step && step > 1) {
        // Animate the current line
        progressLine.style.width = '100%';
      } else {
        progressLine.style.width = '0%';
      }
    }
  }
}

// Function to get URL parameters and set form values
function initializeFromURLParams() {
  const urlParams = new URLSearchParams(window.location.search);
  const paketParam = urlParams.get('paket');
  
  if (paketParam) {
    const selectElement = document.getElementById('paketUsaha') as HTMLSelectElement;
    const mobilePaketSelector = document.getElementById('mobilePaketSelector');
    const desktopPaketSelector = document.getElementById('desktopPaketSelector');
    const mobilePaketText = document.getElementById('mobilePaketText');
    const desktopPaketText = document.getElementById('desktopPaketText');
    
    if (selectElement) {
      // Find the matching option value
      let matchingValue = '';
      
      switch (paketParam) {
        case 'Kagawa Rice Bowl':
          matchingValue = 'Kagawa Ricebowl';
          break;
        case 'Kagawa Coffee Corner':
          matchingValue = 'Kagawa Coffee Corner';
          break;
        case 'Kagawa Coffee & Rice Bowl Corner':
          matchingValue = 'Kagawa Coffee & Ricebowl Corner';
          break;
        case 'RM Nusantara':
          matchingValue = 'RM Nusantara';
          break;
        case 'Independent Brand':
          matchingValue = 'Independent Brand';
          break;
        default:
          matchingValue = paketParam;
      }
      
      // Set the select value
      if (matchingValue) {
        selectElement.value = matchingValue;
        
        // Lock the hidden select element
        selectElement.disabled = true;
        
        // Lock mobile selector
        if (mobilePaketSelector && mobilePaketText) {
          mobilePaketSelector.setAttribute('disabled', 'true');
          mobilePaketSelector.classList.add('cursor-not-allowed', 'bg-gray-100', 'border-gray-300');
          mobilePaketSelector.classList.remove('hover:border-amber-400', 'hover:bg-amber-50/30');
          mobilePaketText.textContent = matchingValue;
          mobilePaketText.classList.remove('text-gray-500');
          mobilePaketText.classList.add('text-gray-600', 'font-medium');
          
          // Remove click event listener
          const newMobileSelector = mobilePaketSelector.cloneNode(true);
          mobilePaketSelector.parentNode?.replaceChild(newMobileSelector, mobilePaketSelector);
        }
        
        // Lock desktop selector
        if (desktopPaketSelector && desktopPaketText) {
          desktopPaketSelector.setAttribute('disabled', 'true');
          desktopPaketSelector.classList.add('cursor-not-allowed', 'bg-gray-100', 'border-gray-300');
          desktopPaketSelector.classList.remove('hover:border-amber-400', 'hover:bg-amber-50/30');
          desktopPaketText.textContent = matchingValue;
          desktopPaketText.classList.remove('text-gray-500');
          desktopPaketText.classList.add('text-gray-600', 'font-medium');
          
          // Remove click event listener
          const newDesktopSelector = desktopPaketSelector.cloneNode(true);
          desktopPaketSelector.parentNode?.replaceChild(newDesktopSelector, desktopPaketSelector);
        }
        
        // Disable all package options in mobile modal
        const mobilePackageOptions = document.querySelectorAll('.package-option');
        mobilePackageOptions.forEach(option => {
          const packageName = option.getAttribute('data-package');
          if (packageName !== matchingValue) {
            option.classList.add('opacity-50', 'cursor-not-allowed', 'pointer-events-none');
            option.setAttribute('disabled', 'true');
          } else {
            // Highlight the selected option
            option.classList.add('package-locked-selected');
          }
        });
        
        // Disable all package options in desktop dropdown
        const desktopPackageOptions = document.querySelectorAll('.desktop-package-option');
        desktopPackageOptions.forEach(option => {
          const packageName = option.getAttribute('data-package');
          if (packageName !== matchingValue) {
            option.classList.add('opacity-50', 'cursor-not-allowed', 'pointer-events-none');
            option.setAttribute('disabled', 'true');
          } else {
            // Highlight the selected option
            option.classList.add('package-locked-selected', 'selected');
          }
        });
        
        // Add hidden input to ensure form data is submitted correctly
        const hiddenInput = document.createElement('input');
        hiddenInput.type = 'hidden';
        hiddenInput.name = 'paketUsaha';
        hiddenInput.value = matchingValue;
        selectElement.parentNode?.appendChild(hiddenInput);
        
        // Show the back button
        const backBtn = document.getElementById('backToPackageBtn');
        if (backBtn) {
          backBtn.classList.remove('hidden');
        }
        
        // Add a visual indicator for both mobile and desktop
        const addLockIndicator = (parentElement: HTMLElement) => {
          const infoDiv = document.createElement('div');
          infoDiv.className = 'mt-3 p-3 bg-gradient-to-r from-amber-50 to-orange-50 border border-amber-200 rounded-xl flex items-center space-x-3';
          infoDiv.innerHTML = `
            <div class="flex-shrink-0">
              <svg class="w-6 h-6 text-amber-600" fill="currentColor" viewBox="0 0 20 20">
                <path fill-rule="evenodd" d="M5 9V7a5 5 0 0110 0v2a2 2 0 012 2v5a2 2 0 01-2 2H5a2 2 0 01-2-2v-5a2 2 0 012-2zm8-2v2H7V7a3 3 0 016 0z" clip-rule="evenodd"></path>
              </svg>
            </div>
            <div class="flex-1">
              <p class="text-sm font-semibold text-amber-800">Paket Terpilih: ${matchingValue}</p>
              <p class="text-xs text-amber-700 mt-1">Paket telah dikunci sesuai pilihan Anda dari halaman produk. Klik "Ubah Pilihan Paket" untuk mengubah.</p>
            </div>
            <div class="flex-shrink-0">
              <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-amber-100 text-amber-800">
                Terkunci
              </span>
            </div>
          `;
          
          return infoDiv;
        };
        
        // Add indicator for mobile
        const mobileContainer = document.querySelector('#mobilePaketSelector')?.parentNode as HTMLElement;
        if (mobileContainer) {
          const mobileIndicator = addLockIndicator(mobileContainer);
          mobileContainer.appendChild(mobileIndicator);
        }
        
        // Add indicator for desktop
        const desktopContainer = document.querySelector('#desktopPaketSelector')?.parentNode as HTMLElement;
        if (desktopContainer) {
          const desktopIndicator = addLockIndicator(desktopContainer);
          desktopContainer.appendChild(desktopIndicator);
        }
        
        // Trigger form updates
        setTimeout(() => {
          const event = new Event('change', { bubbles: true });
          selectElement.dispatchEvent(event);
          
          // Also manually trigger the update as fallback
          selectedPackage = matchingValue;
          const priceData = packagePrices[selectedPackage as keyof typeof packagePrices];
          if (priceData) {
            packagePrice = priceData.discounted;
            updatePriceDisplay(priceData);
            updatePaymentCards();
          }
        }, 100);
      }
    }
  }
}

// Initialize form when DOM is loaded
document.addEventListener('DOMContentLoaded', function() {
  initializeFromURLParams();
  updateProgressBar(1); // Initialize progress bar to step 1
});

// Setup info tooltips
function setupInfoTooltips() {
  // Get all info buttons
  const infoButtons = document.querySelectorAll('.info-button');
  
  infoButtons.forEach(button => {
    const buttonId = button.getAttribute('id');
    if (!buttonId) return;
    
    // Extract the tooltip ID from button ID (e.g., 'info-sistem-kemitraan' -> 'tooltip-sistem-kemitraan')
    const tooltipId = buttonId.replace('info-', 'tooltip-');
    const tooltip = document.getElementById(tooltipId);
    
    if (!tooltip) return;
    
    // Show tooltip on click
    button.addEventListener('click', (e) => {
      e.preventDefault();
      e.stopPropagation();
      
      // Hide all other tooltips first
      document.querySelectorAll('[id^="tooltip-"]').forEach(t => {
        if (t.id !== tooltipId) {
          t.classList.add('hidden');
        }
      });
      
      // Toggle current tooltip
      tooltip.classList.toggle('hidden');
    });
    
    // Close tooltip when close button is clicked
    const closeBtn = tooltip.querySelector('.close-tooltip');
    if (closeBtn) {
      closeBtn.addEventListener('click', (e) => {
        e.preventDefault();
        e.stopPropagation();
        tooltip.classList.add('hidden');
      });
    }
  });
  
  document.addEventListener('click', (e) => {
    const target = e.target as HTMLElement;
    
    if (target.closest('.info-button') || target.closest('[id^="tooltip-"]')) {
      return;
    }
    
    document.querySelectorAll('[id^="tooltip-"]').forEach(tooltip => {
      tooltip.classList.add('hidden');
    });
  });

  document.addEventListener('keydown', (e) => {
    if (e.key === 'Escape') {
      document.querySelectorAll('[id^="tooltip-"]').forEach(tooltip => {
        tooltip.classList.add('hidden');
      });
    }
  });
}
</script>