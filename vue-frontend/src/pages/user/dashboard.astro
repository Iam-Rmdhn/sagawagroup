---
import Layout from '../../layouts/Layout.astro';
import MitraSidebar from '../../components/mitra/sidebar/MitraSidebar.astro';
import MitraNavbar from '../../components/mitra/navbar/MitraNavbar.astro';
// User Dashboard

// Fetch data omset/belanja dari backend (SSR)
let omsetHariIni = [];
let omsetBulanIni = 0;
let belanjaHariIni = [];
try {
   const res = await fetch("http://localhost:4000/api/sheets/omset");
   if (res.ok) {
      const data = await res.json();
      omsetHariIni = data.omsetHariIni || [];
      omsetBulanIni = data.omsetBulanIni || 0;
      belanjaHariIni = data.belanjaHariIni || [];
   }
} catch (e) {}
---

<Layout title="Dashboard Mitra">
<MitraNavbar />

<MitraSidebar currentPage="dashboard" />

<div class="p-4 sm:ml-64">
   <div class="p-4 border-2 border-gray-200 border-dashed rounded-lg dark:border-gray-700 mt-14">
      <!-- Loading State -->
      <div id="loading-state" class="text-center py-8">
         <div class="animate-spin rounded-full h-12 w-12 border-b-2 border-amber-500 mx-auto"></div>
         <p class="mt-4 text-gray-600 dark:text-gray-400">Memuat data mitra...</p>
      </div>

      <!-- Main Dashboard Content -->
      <div id="dashboard-content" class="hidden">
         <!-- Profile Summary -->
         <div class="bg-gradient-to-r from-amber-500 to-orange-500 rounded-lg p-6 mb-6 text-white">
            <div class="flex items-center">
               <div class="w-16 h-16 rounded-full bg-white bg-opacity-20 flex items-center justify-center text-2xl font-bold mr-4" id="profile-avatar">
                  M
               </div>
               <div>
                  <h2 class="text-2xl font-bold" id="profile-name">Loading...</h2>
                  <p class="opacity-90" id="profile-email">Loading...</p>
                  <p class="text-sm opacity-80" id="profile-status">Loading...</p>
               </div>
            </div>
         </div>

         <!-- Statistics Cards -->
         <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 mb-6">
            <div class="bg-white dark:bg-gray-800 p-4 rounded-lg shadow">
               <div class="flex items-center">
                  <div class="p-2 rounded-lg bg-blue-100 dark:bg-blue-900">
                     <svg class="w-6 h-6 text-blue-600 dark:text-blue-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"></path>
                     </svg>
                  </div>
                  <div class="ml-4">
                     <h3 class="text-sm font-medium text-gray-600 dark:text-gray-400">Status Kemitraan</h3>
                     <p class="text-lg font-semibold text-gray-900 dark:text-white" id="kemitraan-status">-</p>
                  </div>
               </div>
            </div>
            
            <div class="bg-white dark:bg-gray-800 p-4 rounded-lg shadow">
               <div class="flex items-center">
                  <div class="p-2 rounded-lg bg-green-100 dark:bg-green-900">
                     <svg class="w-6 h-6 text-green-600 dark:text-green-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                     </svg>
                  </div>
                  <div class="ml-4">
                     <h3 class="text-sm font-medium text-gray-600 dark:text-gray-400">Sistem Kemitraan</h3>
                     <p class="text-lg font-semibold text-gray-900 dark:text-white" id="sistem-kemitraan">-</p>
                  </div>
               </div>
            </div>
            
            <div class="bg-white dark:bg-gray-800 p-4 rounded-lg shadow">
               <div class="flex items-center">
                  <div class="p-2 rounded-lg bg-purple-100 dark:bg-purple-900">
                     <svg class="w-6 h-6 text-purple-600 dark:text-purple-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20 7l-8-4-8 4m16 0l-8 4m8-4v10l-8 4m0-10L4 7m8 4v10M4 7v10l8 4"></path>
                     </svg>
                  </div>
                  <div class="ml-4">
                     <h3 class="text-sm font-medium text-gray-600 dark:text-gray-400">Paket Usaha</h3>
                     <p class="text-lg font-semibold text-gray-900 dark:text-white" id="paket-usaha">-</p>
                  </div>
               </div>
            </div>
            
            <div class="bg-white dark:bg-gray-800 p-4 rounded-lg shadow">
               <div class="flex items-center">
                  <div class="p-2 rounded-lg bg-amber-100 dark:bg-amber-900">
                     <svg class="w-6 h-6 text-amber-600 dark:text-amber-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1"></path>
                     </svg>
                  </div>
                  <div class="ml-4">
                     <h3 class="text-sm font-medium text-gray-600 dark:text-gray-400">Nilai Paket</h3>
                     <p class="text-lg font-semibold text-gray-900 dark:text-white" id="nilai-paket">-</p>
                  </div>
               </div>
            </div>
         </div>

         <div id="financial-section" class="hidden mb-6">
            <!-- Google Sheets Integration Info -->
            <div class="bg-white dark:bg-gray-800 rounded-lg shadow mb-6">
               <div class="p-6">
                  <div class="flex items-center justify-between mb-4">
                     <h3 class="text-xl font-semibold text-gray-900 dark:text-white">Laporan Keuangan dari Google Sheets</h3>
                     <div class="flex items-center space-x-2">
                        <span class="text-sm text-gray-500" id="last-sync-time">Terakhir sync: -</span>
                        <button id="sync-now-btn" class="px-3 py-1 bg-green-600 hover:bg-green-700 text-white text-sm rounded-md transition-colors">
                           Sync Sekarang
                        </button>
                     </div>
                  </div>
                  
                  <div class="bg-blue-50 border border-blue-200 rounded-lg p-4 mb-4">
                     <div class="flex items-start">
                        <div class="flex-shrink-0">
                           <svg class="w-5 h-5 text-blue-600 mt-0.5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                           </svg>
                        </div>
                        <div class="ml-3">
                           <h4 class="text-sm font-semibold text-blue-800 mb-2">Cara Penggunaan:</h4>
                           <ol class="text-sm text-blue-700 space-y-1">
                              <li>1. Buat Google Spreadsheet dengan format yang benar</li>
                              <li>2. Masukkan link spreadsheet Anda di bawah</li>
                              <li>3. Klik "Simpan & Sync" untuk menghubungkan</li>
                              <li>4. Data akan otomatis tersinkron dari spreadsheet</li>
                           </ol>
                        </div>
                     </div>
                  </div>

                  <div class="grid grid-cols-1 gap-4">
                     <!-- Input Link Spreadsheet -->
                     <div>
                        <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                            Link Google Spreadsheet Anda
                        </label>
                        <div class="flex space-x-2">
                           <input type="url" id="sheets-url-input" placeholder="https://docs.google.com/spreadsheets/d/..." 
                                  class="flex-1 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-amber-500">
                           <button id="save-sheets-url" class="px-4 py-2 bg-amber-600 hover:bg-amber-700 text-white rounded-md transition-colors font-medium">
                              Simpan & Sync
                           </button>
                           <button id="open-sheets-btn" class="px-4 py-2 bg-green-600 hover:bg-green-700 text-white rounded-md transition-colors" disabled>
                              Buka
                           </button>
                        </div>
                        <p class="text-xs text-gray-500 mt-1">Masukkan link Google Sheets Anda untuk melihat laporan keuangan</p>
                     </div>
                     
                     <!-- Connection Status -->
                     <div>
                        <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                           Status Koneksi
                        </label>
                        <div id="connection-status" class="flex items-center px-3 py-2 bg-gray-100 rounded-md">
                           <div class="w-3 h-3 bg-yellow-400 rounded-full mr-2"></div>
                           <span class="text-sm text-gray-600">Belum tersambung - Masukkan link spreadsheet</span>
                        </div>
                        <p class="text-xs text-gray-500 mt-1">Status koneksi ke Google Sheets Anda</p>
                     </div>
                  </div>
               </div>
            </div>

            <!-- Financial Summary Cards -->
            <div class="grid grid-cols-1 md:grid-cols-3 gap-6 mb-6">
               <!-- Omset Harian -->
               <div class="bg-gradient-to-r from-green-500 to-green-600 rounded-lg p-6 text-white">
                  <div class="flex items-center justify-between">
                     <div>
                        <h3 class="text-lg font-semibold mb-2">Omset Hari Ini</h3>
                        <p class="text-3xl font-bold" id="omset-hari-ini">{omsetHariIni.length > 0 ? `Rp ${omsetHariIni[omsetHariIni.length-1][0]}` : '-'}</p>
                        <p class="text-sm opacity-80" id="omset-update-time">Dari Google Sheets</p>
                     </div>
                     <div class="bg-white bg-opacity-20 rounded-full p-3">
                        <svg class="w-8 h-8" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                           <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1"></path>
                        </svg>
                     </div>
                  </div>
               </div>

               <!-- Omset Bulanan -->
               <div class="bg-gradient-to-r from-blue-500 to-blue-600 rounded-lg p-6 text-white">
                  <div class="flex items-center justify-between">
                     <div>
                        <h3 class="text-lg font-semibold mb-2">Omset Bulan Ini</h3>
                        <p class="text-3xl font-bold" id="omset-bulanan">{omsetBulanIni ? `Rp ${omsetBulanIni}` : '-'}</p>
                        <p class="text-sm opacity-80" id="omset-bulanan-periode">0 hari dari Sheets</p>
                     </div>
                     <div class="bg-white bg-opacity-20 rounded-full p-3">
                        <svg class="w-8 h-8" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                           <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z"></path>
                        </svg>
                     </div>
                  </div>
               </div>

               <!-- Belanja Harian -->
               <div class="bg-gradient-to-r from-orange-500 to-orange-600 rounded-lg p-6 text-white">
                  <div class="flex items-center justify-between">
                     <div>
                        <h3 class="text-lg font-semibold mb-2">Belanja Hari Ini</h3>
                        <p class="text-3xl font-bold" id="belanja-hari-ini">{belanjaHariIni.length > 0 ? `Rp ${belanjaHariIni[belanjaHariIni.length-1][0]}` : '-'}</p>
                        <p class="text-sm opacity-80" id="belanja-update-time">Dari Google Sheets</p>
                     </div>
                     <div class="bg-white bg-opacity-20 rounded-full p-3">
                        <svg class="w-8 h-8" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                           <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 11V7a4 4 0 00-8 0v4M5 9h14l-1 12H6L5 9z"></path>
                        </svg>
                     </div>
                  </div>
               </div>
            </div>
         </div>

         <!-- Detailed Information -->
         <div class="grid grid-cols-1 lg:grid-cols-2 gap-6 mb-6">
            <!-- Personal Information -->
            <div class="bg-white dark:bg-gray-800 rounded-lg shadow">
               <div class="p-6">
                  <h3 class="text-xl font-semibold text-gray-900 dark:text-white mb-4">Informasi Personal</h3>
                  <div class="space-y-3">
                     <div>
                        <label class="text-sm font-medium text-gray-600 dark:text-gray-400">Nama Mitra</label>
                        <p class="text-gray-900 dark:text-white" id="detail-nama">-</p>
                     </div>
                     <div>
                        <label class="text-sm font-medium text-gray-600 dark:text-gray-400">Email</label>
                        <p class="text-gray-900 dark:text-white" id="detail-email">-</p>
                     </div>
                     <div>
                        <label class="text-sm font-medium text-gray-600 dark:text-gray-400">No. HP</label>
                        <p class="text-gray-900 dark:text-white" id="detail-hp">-</p>
                     </div>
                     <div>
                        <label class="text-sm font-medium text-gray-600 dark:text-gray-400">Alamat</label>
                        <p class="text-gray-900 dark:text-white" id="detail-alamat">-</p>
                     </div>
                  </div>
               </div>
            </div>

            <!-- Partnership Information -->
            <div class="bg-white dark:bg-gray-800 rounded-lg shadow">
               <div class="p-6">
                  <h3 class="text-xl font-semibold text-gray-900 dark:text-white mb-4">Informasi Kemitraan</h3>
                  <div class="space-y-3">
                     <div>
                        <label class="text-sm font-medium text-gray-600 dark:text-gray-400">Sistem Kemitraan</label>
                        <p class="text-gray-900 dark:text-white" id="detail-sistem">-</p>
                     </div>
                     <div>
                        <label class="text-sm font-medium text-gray-600 dark:text-gray-400">Paket Usaha</label>
                        <p class="text-gray-900 dark:text-white" id="detail-paket">-</p>
                     </div>
                     <div>
                        <label class="text-sm font-medium text-gray-600 dark:text-gray-400">Status Persetujuan</label>
                        <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium" id="detail-approval-badge">
                           -
                        </span>
                     </div>
                     <div>
                        <label class="text-sm font-medium text-gray-600 dark:text-gray-400">Tanggal Bergabung</label>
                        <p class="text-gray-900 dark:text-white" id="detail-join-date">-</p>
                     </div>
                  </div>
               </div>
            </div>
         </div>

         <!-- Recent Activity -->
         <div class="bg-white rounded-lg shadow dark:bg-gray-800">
            <div class="p-6">
               <h3 class="text-xl font-semibold text-gray-900 dark:text-white mb-4">Aktivitas Terbaru</h3>
               <div class="space-y-3">
                  <div class="flex items-center p-3 bg-gray-50 dark:bg-gray-700 rounded-lg">
                     <div class="flex-shrink-0">
                        <div class="w-2 h-2 bg-green-400 rounded-full"></div>
                     </div>
                     <div class="ml-3">
                        <p class="text-sm text-gray-900 dark:text-white">Login terakhir: <span id="last-login">-</span></p>
                     </div>
                  </div>
                  <div class="flex items-center p-3 bg-gray-50 dark:bg-gray-700 rounded-lg">
                     <div class="flex-shrink-0">
                        <div class="w-2 h-2 bg-blue-400 rounded-full"></div>
                     </div>
                     <div class="ml-3">
                        <p class="text-sm text-gray-900 dark:text-white">Akun dibuat: <span id="account-created">-</span></p>
                     </div>
                  </div>
                  <div class="flex items-center p-3 bg-gray-50 dark:bg-gray-700 rounded-lg">
                     <div class="flex-shrink-0">
                        <div class="w-2 h-2 bg-amber-400 rounded-full"></div>
                     </div>
                     <div class="ml-3">
                        <p class="text-sm text-gray-900 dark:text-white">Status akun: <span id="account-status">Aktif</span></p>
                     </div>
                  </div>
               </div>
            </div>
         </div>
      </div>

      <!-- Error State -->
      <div id="error-state" class="hidden text-center py-8">
         <div class="text-red-500 mb-4">
            <svg class="w-16 h-16 mx-auto" fill="none" stroke="currentColor" viewBox="0 0 24 24">
               <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
            </svg>
         </div>
         <h3 class="text-lg font-semibold text-gray-900 dark:text-white mb-2">Gagal Memuat Data</h3>
         <p class="text-gray-600 dark:text-gray-400 mb-4" id="error-message">Terjadi kesalahan saat memuat data mitra.</p>
         <button onclick="window.location.reload()" class="px-4 py-2 bg-amber-500 hover:bg-amber-600 text-white rounded-lg transition">
            Muat Ulang
         </button>
      </div>
   </div>
</div>

<!-- Agreement Modal for New Users -->
<div id="agreement-modal" class="hidden fixed inset-0 z-[9999] overflow-y-auto bg-black bg-opacity-50" aria-labelledby="modal-title" role="dialog" aria-modal="true">
   <div class="flex items-center justify-center min-h-screen pt-4 px-4 pb-20 text-center sm:block sm:p-0">
      <!-- Modal backdrop -->
      <div class="fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity" aria-hidden="true" id="modal-backdrop"></div>
      
      <!-- Modal panel -->
      <div class="inline-block align-bottom bg-white rounded-lg text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-4xl sm:w-full relative z-10">
         <div class="bg-white px-4 pt-5 pb-4 sm:p-6 sm:pb-4">
            <div class="flex items-center mb-4">
               <div class="mx-auto flex-shrink-0 flex items-center justify-center h-12 w-12 rounded-full bg-amber-100 sm:mx-0 sm:h-10 sm:w-10">
                  <svg class="h-6 w-6 text-amber-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                     <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
                  </svg>
               </div>
               <div class="ml-3">
                  <h3 class="text-lg leading-6 font-medium text-gray-900" id="modal-title">
                     Selamat Datang di Sagawa Group!
                  </h3>
                  <p class="text-sm text-gray-500">
                     Sebagai mitra baru, silakan baca dan setujui syarat dan ketentuan kemitraan
                  </p>
               </div>
            </div>
            
            <!-- Agreement Content -->
            <div class="mt-3 sm:mt-0">
               <div class="bg-gray-50 rounded-lg p-6 max-h-96 overflow-y-auto">
                  <div class="space-y-4 text-sm text-gray-700">
                     <h4 class="font-semibold text-lg text-gray-900">SYARAT DAN KETENTUAN KEMITRAAN</h4>
                     
                     <div>
                        <h5 class="font-medium text-gray-900 mb-2">PASAL 1 KETENTUAN UMUM</h5>
                        <p class="mb-2">Masing-masing pihak, dalam hal ini Pihak I dan Pihak II bertanggung jawab atas tercapainya tujuan bersama dengan meningkatkan nilai bisnis maupun nilai merek. Harapan dari semua itu tidak lain untuk memperluas jangkauan bisnis ke depannya.</p>
                     </div>
                     
                     <div>
                        <h5 class="font-medium text-gray-900 mb-2">PASAL 2 KEWAJIBAN POKOK PIHAK I</h5>
                        <p class="mb-2"><strong>Sebagai pemilik merek dan resep (Nama Brand), Pihak I</strong></p>
                        <ul class="list-disc pl-5 mb-2 space-y-1">
                           <li>Membantu mencarikan properti usaha pada unit usaha Pihak II.</li>
                           <li>Memberikan pelatihan untuk karyawan baru Pihak II.</li>
                           <li>Memberikan pasokan bahan dasar dan bumbu resep asli dengan estimasi stok untuk beberapa waktu ke depan (suplay chain).</li>
                           <li>Meningkatkan kualitas karyawan pada unit usaha Pihak II.</li>
                           <li>Quality control produk atau menu dalam unit usaha Pihak II.</li>
                           <li>Mengadakan pelatihan untuk meningkatkan kapasitas karyawan, melakukan riset dan pengembangan usaha, menjalankan misi marketing dan perluasan usaha.</li>
                           <li>Memberikan seragam kepada karyawan sebagai bentuk identitas usaha.</li>
                        </ul>
                     </div>
                     
                     <div>
                        <h5 class="font-medium text-gray-900 mb-2">PASAL 3 KEWAJIBAN POKOK PIHAK II</h5>
                        <p class="mb-2"><strong>Sebagai franchisee dan atau penerima hak waralaba (mitra) serta penanggung jawab Pihak II</strong></p>
                        <ul class="list-disc pl-5 mb-2 space-y-1">
                           <li>Berkewajiban membeli bahan dasar inti dan bumbu asli resep kepada pihak I.</li>
                           <li>Berkewajiban Menjalankan fungsi manajemen usaha menuju tingkat profit usaha yang semakin tinggi.</li>
                           <li>Berkewajiban menjalankan asas usaha dengan berpedoman pada prinsip efektif dan efisien.</li>
                           <li>Berkewajiban untuk memberikan insentif kepada trainer (karyawan Pihak I) berupa uang minimal Rp. 250.000,-/hari jika lebih dari tiga hari dari masa training yang diberikan.</li>
                           <li>Pada sistem kemitraan semi-autopilot, Pihak II wajib membayarkan support fee/management fee kepada Pihak I setiap bulannya sebesar 5%,- (lima persen) dari laba kotor.</li>
                           <li>Pada sistem full autopilot pihak II bersedia untuk membagi hasil dari profit bersih sebesar 40% kepada pihak pertama (pemililk lisensi).</li>
                           <li>Jika mitra diluar jabodetabek maka bersedia menanggug biaya diluar paket kemitraan seperti ongkos kirim equipment, survei lokasi, training dan akomodasi lainnya.</li>
                        </ul>
                     </div>
                     
                     <div>
                        <h5 class="font-medium text-gray-900 mb-2">PASAL 4 SKEMA BISNIS</h5>
                        <p class="mb-2">Setidaknya terdapat tiga macam sistem kemitraan yang berlaku dalam bisnis ini, yaitu Self-Managed, Semi Autopilot  dan Autopilot.</p>
                        <ul class="list-disc pl-5 mb-2 space-y-1">
                          <li>Sistem self-manage mengacu pada bisnis yang 100% dikelola oleh Pihak II dari segi operasional maupun finansial.</li>
                          <li>Dalam pengoperasiannya, Pihak II diperbolehkan bertanya ataupun meminta saran kepada Pihak I terkait dengan sistematika bisnis atau hal-hal yang menyangkut dengan administrasi maupun operasional bisnis.</li>
                          <li>Keuntungan (profit) bisnis dalam sistem kemitraan self-managed 100% milik Pihak II yang dalam hal ini adalah sebagai mitra (franchisee).</li>
                          <li>Segala bentuk kerugian dalam sistem kemitraan self-managed ditanggung oleh Pihak II selaku franchisee dan Pihak I diperbolehkan memberikan masukan, saran, dan segala bentuk support yang sifatnya solutif.</li>
                          <li>Sistem Semi-Autopilot mengacu pada bisnis yang sistem operasional bisnisnya dikelola 80% oleh Pihak I (Franchisor).</li>
                          <li>Sistem Autopilot adalah sistem dimana 100% dikelola oleh perusahaan.</li>
                          <li>Setiap bulannya, Pihak II akan mendapatkan laporan bulanan mengenai perkembangan bisnisnya dalam 30 hari sebelumnya yang sudah disiapkan oleh Pihak I.</li>
                          <li>Skema bagi hasil keuntungan ataupun kerugian dalam sistem semi-autopilot sebesar 40% untuk Pihak I dan 60% untuk Pihak II. Skema ini berlaku selama bisnis masih berjalan.</li>
                          <li>Pihak I akan membantu Pihak II dalam hal operasional bisnis dan senantiasa menjaga omzet agar tetap stabil, namun terbatas tanggung jawabnya terhadap pencapaian target profit bisnis dan BEP.</li>
                          <li>Semua tunduk atas aturan yang sudah dibuat.</li>
                        </ul>
                     </div>
                     
                     <div>
                        <h5 class="font-medium text-gray-900 mb-2">PASAL 5 LAIN-LAIN</h5>
                        <ul class="list-disc pl-5 mb-2 space-y-1">
                          <li>Perjanjian kerja sama ini berlaku sejak ditandatangani oleh kedua belah pihak.</li>
                          <li>Perjanjian kerja sama ini bersifat lifetime (selamanya), selama bisnis masih berjalan.</li>
                          <li>Bilamana terdapat kekeliruan, kelemahan, dan kekurangan dalam surat perjanjian kerja sama ini, para pihak sepakat melakukan peninjauan ulang dan perbaikan berdasarkan musyawarah berasaskan kekeluargaan.</li>
                          <li>Hal-hal yang belum atau tidak diatur dalam surat perjanjian kerja sama ini akan diatur kembali berdasarkan kesepakatan para pihak.</li>
                          <li>Bilamana terjadi perselisihan, kedua belah pihak sepakat untuk menyelesaikan secara musyawarah/kekeluargaan.</li>
                          <li>Bilamana perselisihan tidak dapat diselesaikan melalui musyawarah, maka para pihak sepakat menyelesaikan melalui Pengadilan Negeri Indonesia.</li>
                        </ul>
                     </div>
                     <div class="bg-amber-50 border border-amber-200 rounded-lg p-4">
                        <p class="text-sm text-amber-800">
                           <strong>Catatan:</strong> Surat perjanjian kerjasama ini dibuat dan ditandatangani oleh para pihak di atas materai secara silang dan memiliki kekuatan hukum yang sama.
                        </p>
                     </div>
                  </div>
               </div>
            </div>
         </div>
         
         <!-- Agreement Checkbox and Submit -->
         <div class="bg-gray-50 px-4 py-3 sm:px-6">
            <div class="flex items-start mb-4">
               <div class="flex items-center h-5">
                  <input id="agreement-checkbox" type="checkbox" class="focus:ring-amber-500 h-4 w-4 text-amber-600 border-gray-300 rounded">
               </div>
               <div class="ml-3 text-sm">
                  <label for="agreement-checkbox" class="font-medium text-gray-700">
                     Saya telah membaca dan menyetujui seluruh syarat dan ketentuan kemitraan Sagawa Group
                  </label>
                  <p class="text-gray-500 text-xs mt-1">
                     Dengan mencentang kotak ini, Anda setuju untuk terikat dengan semua ketentuan yang berlaku
                  </p>
               </div>
            </div>
            
            <div class="flex justify-end">
               <button type="button" id="submit-agreement" disabled class="inline-flex justify-center w-full rounded-md border border-transparent shadow-sm px-4 py-2 bg-gray-400 text-base font-medium text-white cursor-not-allowed sm:w-auto sm:text-sm transition-all duration-200">
                  <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                     <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
                  </svg>
                  Setuju dan Lanjutkan
               </button>
            </div>
         </div>
      </div>
   </div>
</div>

<script>
   // API URL configuration
   const API_URL = import.meta.env.PUBLIC_API_URL || 'http://localhost:4000';

   document.addEventListener('DOMContentLoaded', async function() {
      // Check authentication
      const token = localStorage.getItem('mitraToken');
      if (!token) {
         window.location.href = '/login';
         return;
      }

      // Add debug functions to global scope for testing
      (window as any).resetAgreement = function() {
         localStorage.removeItem('mitraAgreementConfirmed');
         console.log('Agreement status reset! Reload page to see modal.');
      };

      (window as any).showModal = function() {
         showAgreementModal();
      };

      (window as any).checkAgreementStatus = function() {
         const status = localStorage.getItem('mitraAgreementConfirmed');
         console.log('Current agreement status:', status === 'true' ? 'CONFIRMED' : 'NOT CONFIRMED');
         return status;
      };

      console.log('Debug functions available:');
      console.log('- resetAgreement() : Reset agreement cache');
      console.log('- showModal() : Force show modal');
      console.log('- checkAgreementStatus() : Check current status');

      // Setup agreement modal for new users
      setupAgreementModal();

      // Listen for navbar actions
      document.addEventListener('mitraNavbarAction', function(event: Event) {
        const customEvent = event as CustomEvent;
        const action = customEvent.detail.action;
        
        if (action === 'logout') {
          // Clear all mitra-related data from localStorage
          localStorage.removeItem('mitraToken');
          localStorage.removeItem('mitraUser');
          localStorage.removeItem('mitraAgreementConfirmed');
          localStorage.removeItem('mitraUserEmail');
          
          console.log('User logged out, cleared all session data');
          window.location.href = '/login';
        }
      });

      // Load mitra profile data
      await loadMitraProfile();
   });

   async function loadMitraProfile() {
      const loadingState = document.getElementById('loading-state');
      const dashboardContent = document.getElementById('dashboard-content');
      const errorState = document.getElementById('error-state');
      const token = localStorage.getItem('mitraToken');

      try {
         const response = await fetch(`${API_URL}/api/mitra/profile`, {
            method: 'GET',
            headers: {
               'Authorization': `Bearer ${token}`,
               'Content-Type': 'application/json'
            }
         });

         const result = await response.json();

         if (response.ok && result.success) {
            const data = result.data;
            
            // Hide loading state and show dashboard
            loadingState?.classList.add('hidden');
            dashboardContent?.classList.remove('hidden');

            // Update profile information in header and navbar
            updateProfileHeader(data);
            
            // Update navbar user info using the exposed function
            if (typeof (window as any).mitraNavbar !== 'undefined') {
              (window as any).mitraNavbar.updateUserInfo(data);
            }

            // Update statistics cards
            updateStatisticsCards(data);

            // Update detailed information
            updateDetailedInfo(data);

            // Update activity information
            updateActivityInfo(data);

         } else {
            throw new Error(result.error || 'Gagal memuat data profil');
         }

      } catch (error) {
         console.error('Error loading mitra profile:', error);
         
         // Show error state
         loadingState?.classList.add('hidden');
         errorState?.classList.remove('hidden');
         
         const errorMessage = document.getElementById('error-message');
         if (errorMessage) {
            errorMessage.textContent = error instanceof Error ? error.message : 'Terjadi kesalahan yang tidak diketahui';
         }
      }
   }

   function setupAgreementModal() {
      // Check agreement status from backend
      checkAgreementStatusFromBackend();
      
      // Setup checkbox handler
      const agreementCheckbox = document.getElementById('agreement-checkbox') as HTMLInputElement;
      const submitButton = document.getElementById('submit-agreement') as HTMLButtonElement;
      
      if (agreementCheckbox && submitButton) {
         agreementCheckbox.addEventListener('change', function() {
            if (this.checked) {
               submitButton.disabled = false;
               submitButton.className = 'inline-flex justify-center w-full rounded-md border border-transparent shadow-sm px-4 py-2 bg-amber-600 hover:bg-amber-700 text-base font-medium text-white cursor-pointer sm:w-auto sm:text-sm transition-all duration-200';
            } else {
               submitButton.disabled = true;
               submitButton.className = 'inline-flex justify-center w-full rounded-md border border-transparent shadow-sm px-4 py-2 bg-gray-400 text-base font-medium text-white cursor-not-allowed sm:w-auto sm:text-sm transition-all duration-200';
            }
         });
         
         // Setup submit button handler
         submitButton.addEventListener('click', function() {
            if (agreementCheckbox.checked) {
               acceptAgreement();
            }
         });
      }
   }

   async function checkAgreementStatusFromBackend() {
      try {
         const token = localStorage.getItem('mitraToken');
         if (!token) return;

         // Check if we already have cached agreement status for this session
         const cachedAgreementStatus = localStorage.getItem('mitraAgreementConfirmed');
         if (cachedAgreementStatus === 'true') {
            console.log('Agreement status already confirmed in this session');
            return;
         }

         // Ambil data profil user untuk cek status pelunasan
         const profileRes = await fetch(`${API_URL}/api/mitra/profile`, {
            method: 'GET',
            headers: {
               'Authorization': `Bearer ${token}`,
               'Content-Type': 'application/json'
            }
         });
         const profileResult = await profileRes.json();
         if (!profileRes.ok || !profileResult.success) {
            console.error('Gagal memuat profil user untuk cek pelunasan');
            return;
         }
         const userProfile = profileResult.data;
         // Ganti nama properti sesuai backend, misal: isPaidOff, isFullPayment, atau statusPelunasan
         const isFullPayment = userProfile.isPaidOff || userProfile.isFullPayment || false;
         if (!isFullPayment) {
            console.log('User belum full payment, agreement modal tidak akan ditampilkan');
            return;
         }

         console.log('Checking agreement status from backend...');

         const response = await fetch(`${API_URL}/api/mitra/agreement-status`, {
            method: 'GET',
            headers: {
               'Authorization': `Bearer ${token}`,
               'Content-Type': 'application/json'
            }
         });

         const result = await response.json();
         
         if (response.ok && result.success) {
            const { hasAccepted, agreementDetails } = result.data;
            
            console.log('Agreement status from backend:', { hasAccepted, agreementDetails });

            if (!hasAccepted) {
               console.log('🔔 User has not agreed to terms - showing agreement modal');
               setTimeout(() => {
                  showAgreementModal();
               }, 500);
            } else {
               const agreedAt = agreementDetails?.acceptedAt;
               console.log('User has already agreed to terms on:', agreedAt);
               // Cache the agreement status to prevent showing modal again in this session
               localStorage.setItem('mitraAgreementConfirmed', 'true');
            }
         } else {
            console.error('Failed to check agreement status:', result.error);
            // If backend fails, don't show modal to avoid blocking user
         }

      } catch (error) {
         console.error('Error checking agreement status:', error);
         // If backend fails, don't show modal to avoid blocking user
      }
   }

   function showAgreementModal() {
      console.log('Attempting to show agreement modal...');
      
      const modal = document.getElementById('agreement-modal');
      if (modal) {
         console.log('Modal element found, showing modal');
         
         // Remove hidden class and add animation
         modal.classList.remove('hidden');
         modal.style.display = 'block';
         
         // Prevent background scrolling
         document.body.style.overflow = 'hidden';
         
         // Focus on the modal for accessibility
         setTimeout(() => {
            modal.focus();
         }, 100);
         
         // Add animation effect
         setTimeout(() => {
            modal.style.opacity = '1';
         }, 10);
         
         console.log('Agreement modal is now visible');
      } else {
         console.error('Modal element not found!');
      }
   }

   function hideAgreementModal() {
      console.log('Hiding agreement modal...');

      const modal = document.getElementById('agreement-modal');
      if (modal) {
         // Add fade out animation
         modal.style.opacity = '0';
         
         setTimeout(() => {
            modal.classList.add('hidden');
            modal.style.display = 'none';
            
            // Restore background scrolling
            document.body.style.overflow = '';
            
            console.log('Agreement modal hidden successfully');
         }, 300);
      }
   }

   async function acceptAgreement() {
      const submitButton = document.getElementById('submit-agreement') as HTMLButtonElement;
      
      if (submitButton) {
         // Show loading state
         submitButton.disabled = true;
         submitButton.innerHTML = `
            <svg class="animate-spin -ml-1 mr-3 h-4 w-4 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
               <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
               <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
            </svg>
            Menyimpan...
         `;
      }

      try {
         const token = localStorage.getItem('mitraToken');
         if (!token) {
            throw new Error('No authorization token');
         }

         console.log('Saving agreement to backend...');

         const response = await fetch(`${API_URL}/api/mitra/accept-agreement`, {
            method: 'POST',
            headers: {
               'Authorization': `Bearer ${token}`,
               'Content-Type': 'application/json'
            },
            body: JSON.stringify({
               acceptedAt: new Date().toISOString(),
               userAgent: navigator.userAgent,
               ipAddress: 'client-side' // Backend can capture real IP
            })
         });

         const result = await response.json();
         
         if (response.ok && result.success) {
            console.log('Agreement accepted and saved to backend');
            
            // Cache agreement status to prevent showing modal again
            localStorage.setItem('mitraAgreementConfirmed', 'true');
            
            // Hide modal
            hideAgreementModal();
            
            // Show success message
            showNotification('Terima kasih! Perjanjian telah diterima dan disimpan.', 'success');
         } else {
            throw new Error(result.error || 'Failed to save agreement');
         }

      } catch (error) {
         console.error('Error accepting agreement:', error);
         showNotification('Gagal menyimpan persetujuan. Silakan coba lagi.', 'error');
      } finally {
         // Restore button state
         if (submitButton) {
            submitButton.disabled = false;
            submitButton.innerHTML = `
               <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
               </svg>
               Setuju dan Lanjutkan
            `;
         }
      }
   }

   function showNotification(message: string, type: 'success' | 'error' = 'success') {
      // Create notification element
      const notification = document.createElement('div');
      const bgColor = type === 'success' ? 'bg-green-500' : 'bg-red-500';
      
      notification.className = `fixed top-4 right-4 ${bgColor} text-white px-6 py-3 rounded-lg shadow-lg z-50 transform transition-all duration-300 translate-x-full opacity-0`;
      notification.innerHTML = `
         <div class="flex items-center">
            <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
               ${type === 'success' 
                  ? '<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>'
                  : '<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>'
               }
            </svg>
            <span>${message}</span>
         </div>
      `;
      
      // Add to DOM
      document.body.appendChild(notification);
      
      // Animate in
      setTimeout(() => {
         notification.classList.remove('translate-x-full', 'opacity-0');
      }, 100);
      
      // Remove after 3 seconds
      setTimeout(() => {
         notification.classList.add('translate-x-full', 'opacity-0');
         setTimeout(() => {
            if (notification.parentNode) {
               notification.parentNode.removeChild(notification);
            }
         }, 300);
      }, 3000);
   }

   function updateProfileHeader(data: any) {
      // Store user email for agreement modal detection
      if (data.email) {
         localStorage.setItem('mitraUserEmail', data.email);
      }

      // Update avatar with first letter of name
      const profileAvatar = document.getElementById('profile-avatar');
      const firstLetter = (data.namaMitra || 'M').charAt(0).toUpperCase();
      
      if (profileAvatar) profileAvatar.textContent = firstLetter;

      // Update profile info
      const profileName = document.getElementById('profile-name');
      const profileEmail = document.getElementById('profile-email');
      const profileStatus = document.getElementById('profile-status');

      if (profileName) profileName.textContent = data.namaMitra || 'Nama tidak tersedia';
      if (profileEmail) profileEmail.textContent = data.email || 'Email tidak tersedia';

      // Status badge
      if (profileStatus) {
         let statusText = 'Status tidak diketahui';
         if (data.isApproved) {
            statusText = 'Mitra Disetujui';
         } else if (data.status === 'pending') {
            statusText = 'Menunggu Persetujuan';
         } else if (data.status === 'rejected') {
            statusText = 'Ditolak';
         }
         profileStatus.textContent = statusText;
      }
   }

   function updateStatisticsCards(data: any) {
      // Kemitraan Status
      const kemitraanStatus = document.getElementById('kemitraan-status');
      if (kemitraanStatus) {
         let status = 'Pending';
         if (data.isApproved) {
            status = 'Aktif';
         } else if (data.status === 'rejected') {
            status = 'Ditolak';
         }
         kemitraanStatus.textContent = status;
      }

      // Sistem Kemitraan
      const sistemKemitraan = document.getElementById('sistem-kemitraan');
      if (sistemKemitraan) {
         sistemKemitraan.textContent = data.sistemKemitraan || 'Tidak tersedia';
      }

      // Paket Usaha
      const paketUsaha = document.getElementById('paket-usaha');
      if (paketUsaha) {
         paketUsaha.textContent = data.paketUsaha || 'Tidak tersedia';
      }

      // Nilai Paket (ambil dari hargaPaket)
      const nilaiPaket = document.getElementById('nilai-paket');
      if (nilaiPaket) {
         let harga = data.hargaPaket;
         if (typeof harga === 'number') {
            nilaiPaket.textContent = harga.toLocaleString('id-ID', { style: 'currency', currency: 'IDR' });
         } else {
            nilaiPaket.textContent = 'Tidak tersedia';
         }
      }

      // Show financial section only for Autopilot & Semi Autopilot
      const financialSection = document.getElementById('financial-section');
      const sistemKemitraanText = data.sistemKemitraan?.toLowerCase() || '';
      
      if (financialSection && (sistemKemitraanText.includes('autopilot') || sistemKemitraanText.includes('semi'))) {
         financialSection.classList.remove('hidden');
         initializeFinancialSection();
         console.log('Financial section displayed for:', data.sistemKemitraan);
      } else if (financialSection) {
         financialSection.classList.add('hidden');
         console.log('Financial section hidden for:', data.sistemKemitraan);
      }
   }

   function updateDetailedInfo(data: any) {
      // Personal Information
      const detailNama = document.getElementById('detail-nama');
      const detailEmail = document.getElementById('detail-email');
      const detailHp = document.getElementById('detail-hp');
      const detailAlamat = document.getElementById('detail-alamat');

      if (detailNama) detailNama.textContent = data.namaMitra || 'Tidak tersedia';
      if (detailEmail) detailEmail.textContent = data.email || 'Tidak tersedia';
      if (detailHp) detailHp.textContent = data.noHp || 'Tidak tersedia';
      if (detailAlamat) detailAlamat.textContent = data.alamatMitra || 'Tidak tersedia';

      // Partnership Information
      const detailSistem = document.getElementById('detail-sistem');
      const detailPaket = document.getElementById('detail-paket');
      const detailSales = document.getElementById('detail-sales');
      const detailApprovalBadge = document.getElementById('detail-approval-badge');
      const detailJoinDate = document.getElementById('detail-join-date');

      if (detailSistem) detailSistem.textContent = data.sistemKemitraan || 'Tidak tersedia';
      if (detailPaket) detailPaket.textContent = data.paketUsaha || 'Tidak tersedia';
      if (detailSales) detailSales.textContent = data.sales || 'Tidak tersedia';

      // Approval badge
      if (detailApprovalBadge) {
         let badgeClass = 'bg-yellow-100 text-yellow-800';
         let badgeText = 'Menunggu';
         
         if (data.isApproved) {
            badgeClass = 'bg-green-100 text-green-800';
            badgeText = 'Disetujui';
         } else if (data.status === 'rejected') {
            badgeClass = 'bg-red-100 text-red-800';
            badgeText = 'Ditolak';
         }

         detailApprovalBadge.className = `inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${badgeClass}`;
         detailApprovalBadge.textContent = badgeText;
      }

      // Join date
      if (detailJoinDate && data.joinDate) {
         const date = new Date(data.joinDate);
         detailJoinDate.textContent = date.toLocaleDateString('id-ID', {
            year: 'numeric',
            month: 'long',
            day: 'numeric'
         });
      }
   }

   function updateActivityInfo(data: any) {
      // Last login
      const lastLogin = document.getElementById('last-login');
      if (lastLogin && data.lastLogin) {
         const date = new Date(data.lastLogin);
         lastLogin.textContent = date.toLocaleDateString('id-ID', {
            year: 'numeric',
            month: 'long',
            day: 'numeric',
            hour: '2-digit',
            minute: '2-digit'
         });
      } else if (lastLogin) {
         lastLogin.textContent = 'Belum pernah login';
      }

      // Account created
      const accountCreated = document.getElementById('account-created');
      if (accountCreated && data.createdAt) {
         const date = new Date(data.createdAt);
         accountCreated.textContent = date.toLocaleDateString('id-ID', {
            year: 'numeric',
            month: 'long',
            day: 'numeric'
         });
      }

      // Account status
      const accountStatus = document.getElementById('account-status');
      if (accountStatus) {
         accountStatus.textContent = data.isActive ? 'Aktif' : 'Tidak Aktif';
      }
   }

   // Financial Section Functions - Google Sheets Integration
   function initializeFinancialSection() {
      console.log('Initializing Google Sheets integration...');
      
      // Load Google Sheets URL for this user
      loadUserSheetsUrl();
      
      // Setup event listeners
      setupSheetsEventListeners();
      
      // Initial data load from Google Sheets
      loadFinancialDataFromSheets();
      
      // Setup auto-sync every 5 minutes
      setInterval(loadFinancialDataFromSheets, 5 * 60 * 1000);
   }

   async function saveUserSheetsUrl(url: string) {
      try {
         const token = localStorage.getItem('mitraToken');
         updateConnectionStatus('connecting', 'Menyimpan link...');
         
         const response = await fetch(`${API_URL}/api/mitra/sheets-url`, {
            method: 'POST',
            headers: {
               'Authorization': `Bearer ${token}`,
               'Content-Type': 'application/json'
            },
            body: JSON.stringify({ sheetsUrl: url })
         });

         const result = await response.json();
         
         if (response.ok && result.success) {
            showNotification('Link Google Sheets berhasil disimpan!', 'success');
            updateConnectionStatus('connected', 'Link tersimpan');
            // Enable open button
            const openBtn = document.getElementById('open-sheets-btn') as HTMLButtonElement;
            if (openBtn) openBtn.disabled = false;
            loadFinancialDataFromSheets();
         } else {
            throw new Error(result.error || 'Gagal menyimpan link');
         }

      } catch (error) {
         console.error('Error saving sheets URL:', error);
         updateConnectionStatus('error', 'Gagal menyimpan link');
         showNotification('Gagal menyimpan link Google Sheets', 'error');
      }
   }

   async function loadUserSheetsUrl() {
      try {
         const token = localStorage.getItem('mitraToken');
         const response = await fetch(`${API_URL}/api/mitra/sheets-url`, {
            method: 'GET',
            headers: {
               'Authorization': `Bearer ${token}`,
               'Content-Type': 'application/json'
            }
         });

         const result = await response.json();
         
         if (response.ok && result.success) {
            const sheetsInput = document.getElementById('sheets-url-input') as HTMLInputElement;
            const openBtn = document.getElementById('open-sheets-btn') as HTMLButtonElement;
            if (sheetsInput) {
               sheetsInput.value = result.data.sheetsUrl || '';
            }
            if (openBtn) openBtn.disabled = !(result.data.sheetsUrl && result.data.sheetsUrl.length > 0);
            console.log('Google Sheets URL loaded:', result.data.sheetsUrl);
            updateConnectionStatus('connected', 'Terhubung ke Google Sheets');
         } else {
            console.log('Creating new Google Sheets for user...');
            await createUserGoogleSheets();
         }

      } catch (error) {
         console.error('Error loading sheets URL:', error);
         updateConnectionStatus('error', 'Gagal memuat link Sheets');
         
         // Use demo/template URL for development
         const sheetsInput = document.getElementById('sheets-url-input') as HTMLInputElement;
         if (sheetsInput) {
            sheetsInput.value = '';
         }
      }
   }

   async function createUserGoogleSheets() {
      try {
         const token = localStorage.getItem('mitraToken');
         updateConnectionStatus('connecting', 'Membuat Google Sheets...');
         
         const response = await fetch(`${API_URL}/api/mitra/create-sheets`, {
            method: 'POST',
            headers: {
               'Authorization': `Bearer ${token}`,
               'Content-Type': 'application/json'
            }
         });

         const result = await response.json();
         
         if (response.ok && result.success) {
            const sheetsInput = document.getElementById('sheets-url-input') as HTMLInputElement;
            if (sheetsInput) {
               sheetsInput.value = result.data.sheetsUrl;
            }
            
            console.log('New Google Sheets created:', result.data.sheetsUrl);
            updateConnectionStatus('connected', 'Sheets baru dibuat');
            showNotification('Google Sheets baru telah dibuat untuk Anda!', 'success');
         } else {
            throw new Error(result.error || 'Gagal membuat Google Sheets');
         }

      } catch (error) {
         console.error('Error creating Google Sheets:', error);
         updateConnectionStatus('error', 'Gagal membuat Sheets');
         showNotification('Gagal membuat Google Sheets. Coba lagi nanti.', 'error');
      }
   }

   function setupSheetsEventListeners() {
      // Save & Sync button
      const saveBtn = document.getElementById('save-sheets-url');
      if (saveBtn) {
         saveBtn.addEventListener('click', async function() {
            const input = document.getElementById('sheets-url-input') as HTMLInputElement;
            const url = input?.value?.trim();
            
            if (!url) {
               showNotification('Masukkan link Google Sheets terlebih dahulu!', 'error');
               return;
            }
            
            if (!url.includes('docs.google.com/spreadsheets')) {
               showNotification('Link harus berupa Google Sheets yang valid!', 'error');
               return;
            }
            
            await saveUserSheetsUrl(url);
         });
      }
      
      // Sync Now button
      const syncBtn = document.getElementById('sync-now-btn');
      if (syncBtn) {
         syncBtn.addEventListener('click', function() {
            loadFinancialDataFromSheets();
         });
      }
      
      // Open Sheets button
      const openBtn = document.getElementById('open-sheets-btn');
      if (openBtn) {
         openBtn.addEventListener('click', function() {
            const input = document.getElementById('sheets-url-input') as HTMLInputElement;
            const url = input?.value?.trim();
            if (url) {
               window.open(url, '_blank');
            }
         });
      }
   }

   async function loadFinancialDataFromSheets() {
      try {
         const token = localStorage.getItem('mitraToken');
         updateConnectionStatus('syncing', 'Sinkronisasi data...');
         
         const response = await fetch(`${API_URL}/api/mitra/sheets-data`, {
            method: 'GET',
            headers: {
               'Authorization': `Bearer ${token}`,
               'Content-Type': 'application/json'
            }
         });

         const result = await response.json();
         
         if (response.ok && result.success) {
            const data = result.data;
            
            // Update financial displays
            if (data.today) {
               updateTodayFinancialDisplay(data.today);
            }
            
            if (data.monthly) {
               updateMonthlyFinancialDisplay(data.monthly);
            }
            
            if (data.weekly) {
               updateWeeklyFinancialDisplay(data.weekly);
            }
            
            if (data.history) {
               updateFinancialHistory(data.history);
            }
            
            updateConnectionStatus('connected', 'Data tersinkron');
            updateLastSyncTime();
            
            console.log('Financial data loaded from Google Sheets');
            
         } else {
            throw new Error(result.error || 'Gagal memuat data dari Sheets');
         }

      } catch (error) {
         console.error('Error loading sheets data:', error);
         updateConnectionStatus('error', 'Gagal sync data');
         
         // Use mock data for development
         useMockFinancialData();
      }
   }

   function updateConnectionStatus(status: 'connecting' | 'connected' | 'syncing' | 'error' | 'none', message: string) {
      const statusElement = document.getElementById('connection-status');
      if (!statusElement) return;
      
      // Update status display
      const dot = statusElement.querySelector('div');
      const text = statusElement.querySelector('span');
      
      if (dot && text) {
         // Reset classes
         dot.className = 'w-3 h-3 rounded-full mr-2';
         
         // Set appropriate status color and message
         switch (status) {
            case 'connected':
               dot.classList.add('bg-green-400');
               text.textContent = `Terhubung - ${message}`;
               
               // Enable open button
               const openBtn = document.getElementById('open-sheets-btn') as HTMLButtonElement;
               if (openBtn) {
                  openBtn.disabled = false;
                  openBtn.classList.remove('opacity-50');
               }
               break;
               
            case 'syncing':
            case 'connecting':
               dot.classList.add('bg-blue-400');
               text.textContent = `🔄 ${message}`;
               break;
               
            case 'error':
               dot.classList.add('bg-red-400');
               text.textContent = `❌ Error - ${message}`;
               break;
               
            default:
               dot.classList.add('bg-yellow-400');
               text.textContent = message;
         }
      }
      
      console.log(`Google Sheets Status: ${status} - ${message}`);
   }

   function updateLastSyncTime() {
      const timeElement = document.getElementById('last-sync-time');
      if (timeElement) {
         const now = new Date();
         timeElement.textContent = `Terakhir sync: ${now.toLocaleTimeString('id-ID')}`;
      }
      console.log(`Data synced at: ${new Date().toLocaleTimeString('id-ID')}`);
   }

   // Update display functions (now receives data from Google Sheets)
   function updateTodayFinancialDisplay(data: any) {
      const omsetElement = document.getElementById('omset-hari-ini');
      const belanjaElement = document.getElementById('belanja-hari-ini');
      const omsetTimeElement = document.getElementById('omset-update-time');
      const belanjaTimeElement = document.getElementById('belanja-update-time');

      if (omsetElement) {
         omsetElement.textContent = formatRupiah(data.omset || 0);
      }
      
      if (belanjaElement) {
         belanjaElement.textContent = formatRupiah(data.belanja || 0);
      }

      if (omsetTimeElement) {
         omsetTimeElement.textContent = 'Dari Google Sheets';
      }
      
      if (belanjaTimeElement) {
         belanjaTimeElement.textContent = 'Dari Google Sheets';
      }
   }

   function updateMonthlyFinancialDisplay(data: any) {
      const omsetBulananElement = document.getElementById('omset-bulanan');
      const periodeElement = document.getElementById('omset-bulanan-periode');

      if (omsetBulananElement) {
         omsetBulananElement.textContent = formatRupiah(data.totalOmset || 0);
      }

      // Tampilkan hanya 'Dari Google Sheets' untuk periode
      if (periodeElement) {
         periodeElement.textContent = 'Dari Google Sheets';
      }
   }

   function updateWeeklyFinancialDisplay(data: any) {
      const avgOmsetElement = document.getElementById('avg-omset-7days');
      const avgBelanjaElement = document.getElementById('avg-belanja-7days');
      const avgProfitElement = document.getElementById('avg-profit-7days');

      if (avgOmsetElement) {
         avgOmsetElement.textContent = formatRupiah(data.avgOmset || 0);
      }

      if (avgBelanjaElement) {
         avgBelanjaElement.textContent = formatRupiah(data.avgBelanja || 0);
      }

      if (avgProfitElement) {
         const profit = (data.avgOmset || 0) - (data.avgBelanja || 0);
         avgProfitElement.textContent = formatRupiah(profit);
         avgProfitElement.className = `font-semibold ${profit >= 0 ? 'text-green-600' : 'text-red-600'}`;
      }
   }

   function updateFinancialHistory(data: any[]) {
      const historyElement = document.getElementById('recent-history');
      if (!historyElement) return;

      if (!data || data.length === 0) {
         historyElement.innerHTML = `
            <div class="text-center text-gray-500 py-8">
               Menunggu data dari Google Sheets...
            </div>
         `;
         return;
      }

      historyElement.innerHTML = data.map(item => {
         const date = new Date(item.date).toLocaleDateString('id-ID', { 
            weekday: 'short', 
            month: 'short', 
            day: 'numeric' 
         });
         const profit = (item.omset || 0) - (item.belanja || 0);
         const profitColor = profit >= 0 ? 'text-green-600' : 'text-red-600';

         return `
            <div class="flex justify-between items-center p-3 bg-gray-50 dark:bg-gray-700 rounded-lg">
               <div>
                  <p class="font-medium text-sm">${date}</p>
                  <p class="text-xs text-gray-500">Omset: ${formatRupiah(item.omset || 0)}</p>
               </div>
               <div class="text-right">
                  <p class="text-xs text-gray-500">Belanja: ${formatRupiah(item.belanja || 0)}</p>
                  <p class="font-semibold text-sm ${profitColor}">Profit: ${formatRupiah(profit)}</p>
               </div>
            </div>
         `;
      }).join('');
   }

   function useMockFinancialData() {
      // Mock data for development/testing Google Sheets integration
      console.log('Using mock Google Sheets data...');
      
      updateTodayFinancialDisplay({
         omset: 0,
         belanja: 0
      });

      updateMonthlyFinancialDisplay({
         totalOmset: 0,
         totalDays: 0
      });

      updateWeeklyFinancialDisplay({
         avgOmset: 0,
         avgBelanja: 0
      });

      const mockHistory = [
         { date: '2025-08-24', omset: 0, belanja: 0 },
         { date: '2025-08-23', omset: 0, belanja: 0 },
         { date: '2025-08-22', omset: 0, belanja: 0 },
         { date: '2025-08-21', omset: 0, belanja: 0 },
         { date: '2025-08-20', omset: 0, belanja: 0 }
      ];

      updateFinancialHistory(mockHistory);
      
      updateConnectionStatus('connected', 'Mode Development');
      updateLastSyncTime();
   }

   function formatRupiah(amount: number): string {
      return new Intl.NumberFormat('id-ID', {
         style: 'currency',
         currency: 'IDR',
         minimumFractionDigits: 0,
         maximumFractionDigits: 0
      }).format(amount);
   }
</script>
</Layout>