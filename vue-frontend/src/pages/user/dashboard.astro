---
import Layout from '../../layouts/Layout.astro';
import MitraSidebar from '../../components/mitra/sidebar/MitraSidebar.astro';
import MitraNavbar from '../../components/mitra/navbar/MitraNavbar.astro';
// User Dashboard

// Fetch data omset/belanja dari backend (SSR)
let omsetHariIni = [];
let omsetBulanIni = 0;
let belanjaHariIni = [];
try {
   const res = await fetch("http://localhost:3000/api/sheets/omset");
   if (res.ok) {
      const data = await res.json();
      omsetHariIni = data.omsetHariIni || [];
      omsetBulanIni = data.omsetBulanIni || 0;
      belanjaHariIni = data.belanjaHariIni || [];
   }
} catch (e) {}
---

<Layout title="Dashboard Mitra">
  <!-- Modern Dashboard Styles -->
  <style>
    /* Global fixes for scroll stability */
    * {
      transform: translateZ(0);
      will-change: auto;
    }
    
    *,
    *::before,
    *::after {
      -webkit-backface-visibility: hidden;
      backface-visibility: hidden;
      -webkit-perspective: 1000px;
      perspective: 1000px;
    }
    
    body, html {
      overflow-x: hidden;
      scroll-behavior: smooth;
      -webkit-overflow-scrolling: touch;
      background-color: #fefefe;
    }
    
    /* Custom Amber Scrollbar */
    ::-webkit-scrollbar {
      width: 8px;
      height: 8px;
    }
    
    ::-webkit-scrollbar-track {
      background: rgba(251, 191, 36, 0.1);
      border-radius: 4px;
    }
    
    ::-webkit-scrollbar-thumb {
      background: linear-gradient(135deg, rgb(245 158 11), rgb(251 191 36));
      border-radius: 4px;
      transition: all 0.3s ease;
    }
    
    ::-webkit-scrollbar-thumb:hover {
      background: linear-gradient(135deg, rgb(251 191 36), rgb(252 211 77));
      transform: scale(1.1);
    }
    
    /* Firefox scrollbar styling */
    * {
      scrollbar-width: thin;
      scrollbar-color: rgb(245 158 11) rgba(251, 191, 36, 0.1);
    }

    /* Modern card styling */
    .modern-card {
      background: linear-gradient(135deg, rgba(255, 255, 255, 0.95) 0%, rgba(251, 191, 36, 0.02) 100%);
      backdrop-filter: blur(10px);
      border: 1px solid rgba(251, 191, 36, 0.1);
      transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
      transform: translate3d(0, 0, 0);
      -webkit-backface-visibility: hidden;
      backface-visibility: hidden;
      position: relative;
    }
    
    .modern-card:hover {
      box-shadow: 0 20px 25px -5px rgba(251, 191, 36, 0.1), 0 10px 10px -5px rgba(251, 191, 36, 0.04);
      border-color: rgba(251, 191, 36, 0.2);
    }

    /* Status badges */
    .status-badge {
      display: inline-flex;
      align-items: center;
      padding: 0.375rem 0.75rem;
      border-radius: 9999px;
      font-size: 0.75rem;
      font-weight: 600;
      text-transform: uppercase;
      letter-spacing: 0.025em;
    }

    .status-badge.active {
      background: linear-gradient(135deg, rgb(34 197 94), rgb(22 163 74));
      color: white;
    }

    .status-badge.pending {
      background: linear-gradient(135deg, rgb(245 158 11), rgb(251 191 36));
      color: white;
    }

    .status-badge.rejected {
      background: linear-gradient(135deg, rgb(239 68 68), rgb(220 38 38));
      color: white;
    }

    /* Icon containers */
    .icon-container {
      background: linear-gradient(135deg, rgb(245 158 11), rgb(249 115 22));
      background-size: 200% 200%;
      animation: gradientShift 6s ease infinite;
      transform: translate3d(0, 0, 0);
      -webkit-backface-visibility: hidden;
      backface-visibility: hidden;
    }

    .icon-container.success {
      background: linear-gradient(135deg, rgb(34 197 94), rgb(22 163 74));
    }

    .icon-container.warning {
      background: linear-gradient(135deg, rgb(245 158 11), rgb(251 191 36));
    }

    .icon-container.danger {
      background: linear-gradient(135deg, rgb(239 68 68), rgb(220 38 38));
    }

    .icon-container.info {
      background: linear-gradient(135deg, rgb(59 130 246), rgb(37 99 235));
    }

    @keyframes gradientShift {
      0%, 100% { background-position: 0% 50%; }
      50% { background-position: 100% 50%; }
    }

    /* Loading animation */
    @keyframes pulse {
      0%, 100% { opacity: 1; }
      50% { opacity: 0.5; }
    }
    
    .loading-pulse {
      animation: pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite;
    }

    /* Background pattern */
    .dashboard-bg {
      background-image: 
        radial-gradient(circle at 25px 25px, rgba(251, 191, 36, 0.03) 2px, transparent 0),
        radial-gradient(circle at 75px 75px, rgba(249, 115, 22, 0.03) 2px, transparent 0);
      background-size: 100px 100px;
      background-position: 0 0, 50px 50px;
      background-attachment: fixed;
      min-height: 100vh;
      background-color: #fefefe;
    }

    /* Ensure logout button is always clickable */
    #logout-btn {
      pointer-events: auto !important;
      cursor: pointer !important;
    }
    
    #logout-btn:disabled {
      pointer-events: auto !important;
      cursor: pointer !important;
      opacity: 1 !important;
    }

    /* Responsive grid */
    .stats-grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
      gap: 1.5rem;
    }

    @media (max-width: 640px) {
      .stats-grid {
        grid-template-columns: 1fr;
        gap: 1rem;
      }
      
      .modern-card {
        padding: 1rem;
      }

      /* Mobile specific adjustments */
      .dashboard-bg {
        padding: 0.75rem;
      }

      /* Reduce font sizes on mobile */
      .stats-number {
        font-size: 1.75rem !important;
      }

      /* Better spacing on mobile */
      .mb-8 {
        margin-bottom: 1.5rem;
      }

      .mb-6 {
        margin-bottom: 1rem;
      }

      /* Mobile header adjustments */
      .text-4xl {
        font-size: 2rem !important;
      }

      .text-3xl {
        font-size: 1.5rem !important;
      }

      .text-2xl {
        font-size: 1.25rem !important;
      }

      .text-xl {
        font-size: 1rem !important;
      }

      /* Icon container adjustments */
      .icon-container {
        width: 2.5rem !important;
        height: 2.5rem !important;
      }

      .icon-container svg {
        width: 1rem !important;
        height: 1rem !important;
      }

      /* Padding adjustments */
      .p-6 {
        padding: 1rem !important;
      }

      .p-8 {
        padding: 1.25rem !important;
      }
    }

    @media (max-width: 480px) {
      /* Extra small mobile devices */
      .stats-grid {
        gap: 0.75rem;
      }

      .modern-card {
        padding: 0.75rem;
      }

      .stats-number {
        font-size: 1.5rem !important;
      }

      .text-lg {
        font-size: 0.875rem !important;
      }

      /* Very compact spacing */
      .mb-8 {
        margin-bottom: 1rem;
      }

      .mb-6 {
        margin-bottom: 0.75rem;
      }

      .space-y-4 > * + * {
        margin-top: 0.75rem !important;
      }

      /* Financial cards in single column on very small screens */
      .financial-section .stats-grid {
        grid-template-columns: 1fr !important;
        gap: 0.5rem;
      }

      /* Detail grid adjustments */
      .grid.lg\\:grid-cols-2 {
        grid-template-columns: 1fr !important;
      }

      /* Button size adjustments */
      button, .btn {
        padding: 0.5rem 0.75rem !important;
        font-size: 0.75rem !important;
      }

      /* Truncate long text */
      .truncate-mobile {
        overflow: hidden;
        text-overflow: ellipsis;
        white-space: nowrap;
      }
    }

    @media (min-width: 768px) and (max-width: 1024px) {
      .stats-grid {
        grid-template-columns: repeat(2, 1fr);
      }
    }

    /* Disable text selection and copying for agreement content */
    .agreement-content {
      -webkit-user-select: none;
      -moz-user-select: none;
      -ms-user-select: none;
      user-select: none;
      -webkit-touch-callout: none;
      -webkit-user-drag: none;
      -khtml-user-drag: none;
      -moz-user-drag: none;
      -o-user-drag: none;
      user-drag: none;
      cursor: default;
    }
    
    .agreement-content * {
      -webkit-user-select: none !important;
      -moz-user-select: none !important;
      -ms-user-select: none !important;
      user-select: none !important;
      -webkit-touch-callout: none !important;
      pointer-events: none;
    }
    
    /* Allow interaction with form elements inside agreement */
    .agreement-content input,
    .agreement-content button,
    .agreement-content textarea,
    .agreement-content select {
      pointer-events: auto;
      -webkit-user-select: text;
      -moz-user-select: text;
      -ms-user-select: text;
      user-select: text;
    }
  </style>

<MitraNavbar />
<MitraSidebar currentPage="dashboard" />

<div id="main-dashboard" class="dashboard-bg p-2 sm:p-4 transition-all duration-300" style="transform: translate3d(0, 0, 0); -webkit-backface-visibility: hidden; backface-visibility: hidden;">
   <div class="p-2 sm:p-6 mt-16" style="transform: translate3d(0, 0, 0); -webkit-backface-visibility: hidden; backface-visibility: hidden;">
      
      <!-- Loading State -->
      <div id="loading-state" class="text-center py-16">
         <div class="inline-flex items-center justify-center w-16 h-16 rounded-full bg-gradient-to-r from-amber-500 to-orange-600 mb-6">
            <div class="animate-spin rounded-full h-8 w-8 border-b-2 border-white"></div>
         </div>
         <h3 class="text-xl font-semibold text-gray-900 mb-2">Memuat Dashboard</h3>
         <p class="text-gray-600">Sedang mengambil data profil mitra...</p>
      </div>

      <!-- Main Dashboard Content -->
      <div id="dashboard-content" class="hidden">
         
         <!-- Welcome Header -->
         <div class="mb-6 pt-2 sm:mb-8">
            <div class="bg-gradient-to-r from-amber-500 to-orange-500 rounded-xl p-6 text-white shadow-xl">
               <div class="flex items-center justify-between">
                  <div>
                     <h1 class="text-3xl font-bold mb-2" id="profile-name">Selamat Datang</h1>
                     <p class="opacity-90 text-lg" id="profile-email">Memuat data...</p>
                     <div class="mt-2">
                        <span id="profile-status" class="inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-white bg-opacity-20 text-white">
                           Status: Memuat...
                        </span>
                     </div>
                  </div>
               </div>
            </div>
         </div>

         <!-- Status Overview Cards -->
         <div class="mb-6 sm:mb-8">
            <div class="stats-grid">
               <!-- Kemitraan Status -->
               <div class="modern-card rounded-xl sm:rounded-2xl p-4 sm:p-6 shadow-lg">
                  <div class="flex items-center justify-between">
                     <div class="min-w-0 flex-1">
                        <p class="text-xs sm:text-sm font-medium text-gray-600 mb-1">Status Kemitraan</p>
                        <p class="stats-number text-lg sm:text-2xl font-bold text-gray-900 truncate" id="kemitraan-status">
                           <span class="loading-pulse">Memuat...</span>
                        </p>
                        <p class="text-xs text-amber-600 mt-1 sm:mt-2">
                           <span class="inline-flex items-center">
                              <svg class="w-2 h-2 sm:w-3 sm:h-3 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                 <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                              </svg>
                              <span class="text-xs">Status persetujuan</span>
                           </span>
                        </p>
                     </div>
                     <div class="icon-container w-10 h-10 sm:w-14 sm:h-14 rounded-lg sm:rounded-xl flex items-center justify-center shadow-lg ml-2">
                        <svg class="w-4 h-4 sm:w-7 sm:h-7 text-white" fill="currentColor" viewBox="0 0 20 20">
                           <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd"></path>
                        </svg>
                     </div>
                  </div>
               </div>

               <!-- Status Pelunasan -->
               <div class="modern-card rounded-xl sm:rounded-2xl p-4 sm:p-6 shadow-lg">
                  <div class="flex items-center justify-between">
                     <div class="min-w-0 flex-1">
                        <p class="text-xs sm:text-sm font-medium text-gray-600 mb-1">Status Pembayaran</p>
                        <p class="stats-number text-lg sm:text-2xl font-bold truncate" id="pelunasan-status">
                           <span class="loading-pulse">Memuat...</span>
                        </p>
                        <p class="text-xs text-orange-600 mt-1 sm:mt-2">
                           <span class="inline-flex items-center">
                              <svg class="w-2 h-2 sm:w-3 sm:h-3 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                 <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1"></path>
                              </svg>
                              <span class="text-xs">Status pelunasan</span>
                           </span>
                        </p>
                     </div>
                     <div class="icon-container warning w-10 h-10 sm:w-14 sm:h-14 rounded-lg sm:rounded-xl flex items-center justify-center shadow-lg ml-2">
                        <svg class="w-4 h-4 sm:w-7 sm:h-7 text-white" fill="currentColor" viewBox="0 0 20 20">
                           <path fill-rule="evenodd" d="M4 4a2 2 0 00-2 2v4a2 2 0 002 2V6h10a2 2 0 00-2-2H4zm2 6a2 2 0 012-2h8a2 2 0 012 2v4a2 2 0 01-2 2H8a2 2 0 01-2-2v-4zm6 4a2 2 0 100-4 2 2 0 000 4z" clip-rule="evenodd"></path>
                        </svg>
                     </div>
                  </div>
               </div>

               <!-- Sistem Kemitraan -->
               <div class="modern-card rounded-xl sm:rounded-2xl p-4 sm:p-6 shadow-lg">
                  <div class="flex items-center justify-between">
                     <div class="min-w-0 flex-1">
                        <p class="text-xs sm:text-sm font-medium text-gray-600 mb-1">Sistem Kemitraan</p>
                        <p class="stats-number text-lg sm:text-2xl font-bold text-gray-900 truncate" id="sistem-kemitraan">
                           <span class="loading-pulse">Memuat...</span>
                        </p>
                        <p class="text-xs text-blue-600 mt-1 sm:mt-2">
                           <span class="inline-flex items-center">
                              <svg class="w-2 h-2 sm:w-3 sm:h-3 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                 <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16m14 0h2m-2 0h-5m-9 0H3m2 0h5M9 7h1m-1 4h1m4-4h1m-1 4h1m-5 10v-5a1 1 0 011-1h2a1 1 0 011 1v5m-4 0h4"></path>
                              </svg>
                              <span class="text-xs">Tipe kemitraan</span>
                           </span>
                        </p>
                     </div>
                     <div class="icon-container info w-10 h-10 sm:w-14 sm:h-14 rounded-lg sm:rounded-xl flex items-center justify-center shadow-lg ml-2">
                        <svg class="w-4 h-4 sm:w-7 sm:h-7 text-white" fill="currentColor" viewBox="0 0 24 24">
                           <path fill-rule="evenodd" d="M7.5 5.25a3 3 0 0 1 3-3h3a3 3 0 0 1 3 3v.205c.933.085 1.857.197 2.774.334 1.454.218 2.476 1.483 2.476 2.917v3.033c0 1.211-.734 2.352-1.936 2.752A24.726 24.726 0 0 1 12 15.75c-2.73 0-5.357-.442-7.814-1.259-1.202-.4-1.936-1.541-1.936-2.752V8.706c0-1.434 1.022-2.7 2.476-2.917A48.814 48.814 0 0 1 7.5 5.455V5.25Zm7.5 0v.09a49.488 49.488 0 0 0-6 0v-.09a1.5 1.5 0 0 1 1.5-1.5h3a1.5 1.5 0 0 1 1.5 1.5Zm-3 8.25a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5Z" clip-rule="evenodd" />
                           <path d="M3 18.4v-2.796a4.3 4.3 0 0 0 .713.31A26.226 26.226 0 0 0 12 17.25c2.892 0 5.68-.468 8.287-1.335.252-.084.49-.189.713-.311V18.4c0 1.452-1.047 2.728-2.523 2.923-2.12.282-4.282.427-6.477.427a49.19 49.19 0 0 1-6.477-.427C4.047 21.128 3 19.852 3 18.4Z"></path>
                        </svg>
                     </div>
                  </div>
               </div>

               <!-- Paket Usaha -->
               <div class="modern-card rounded-xl sm:rounded-2xl p-4 sm:p-6 shadow-lg">
                  <div class="flex items-center justify-between">
                     <div class="min-w-0 flex-1">
                        <p class="text-xs sm:text-sm font-medium text-gray-600 mb-1">Paket Usaha</p>
                        <p class="stats-number text-lg sm:text-2xl font-bold text-gray-900 truncate" id="paket-usaha">
                           <span class="loading-pulse">Memuat...</span>
                        </p>
                        <p class="text-xs text-purple-600 mt-1 sm:mt-2">
                           <span class="inline-flex items-center">
                              <svg class="w-2 h-2 sm:w-3 sm:h-3 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                 <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20 7l-8-4-8 4m16 0l-8 4m8-4v10l-8 4m0-10L4 7m8 4v10M4 7v10l8 4"></path>
                              </svg>
                              <span class="text-xs">Jenis paket</span>
                           </span>
                        </p>
                     </div>
                     <div class="icon-container danger w-10 h-10 sm:w-14 sm:h-14 rounded-lg sm:rounded-xl flex items-center justify-center shadow-lg ml-2">
                        <svg class="w-4 h-4 sm:w-7 sm:h-7 text-white" fill="currentColor" viewBox="0 0 24 24">
                           <path d="M5.223 2.25c-.497 0-.974.198-1.325.55l-1.3 1.298A3.75 3.75 0 0 0 7.5 9.75c.627.47 1.406.75 2.25.75.844 0 1.624-.28 2.25-.75.626.47 1.406.75 2.25.75.844 0 1.623-.28 2.25-.75a3.75 3.75 0 0 0 4.902-5.652l-1.3-1.299a1.875 1.875 0 0 0-1.325-.549H5.223Z" />
                           <path fill-rule="evenodd" d="M3 20.25v-8.755c1.42.674 3.08.673 4.5 0A5.234 5.234 0 0 0 9.75 12c.804 0 1.568-.182 2.25-.506a5.234 5.234 0 0 0 2.25.506c.804 0 1.567-.182 2.25-.506 1.42.674 3.08.675 4.5.001v8.755h.75a.75.75 0 0 1 0 1.5H2.25a.75.75 0 0 1 0-1.5H3Zm3-6a.75.75 0 0 1 .75-.75h3a.75.75 0 0 1 .75.75v3a.75.75 0 0 1-.75.75h-3a.75.75 0 0 1-.75-.75v-3Zm8.25-.75a.75.75 0 0 0-.75.75v5.25c0 .414.336.75.75.75h3a.75.75 0 0 0 .75-.75v-5.25a.75.75 0 0 0-.75-.75h-3Z" clip-rule="evenodd"></path>
                        </svg>
                     </div>
                  </div>
               </div>
            </div>
         </div>

         <!-- Nilai Paket Card -->
         <div class="mb-6 sm:mb-8">
            <div class="modern-card rounded-xl sm:rounded-2xl p-6 sm:p-8 shadow-xl">
               <div class="text-center">
                  <h3 class="text-base sm:text-lg font-semibold text-gray-900 mb-2">Nilai Investment</h3>
                  <p class="stats-number text-2xl sm:text-4xl font-bold text-amber-600 mb-2" id="nilai-paket">
                     <span class="loading-pulse">Memuat...</span>
                  </p>
                  <p class="text-sm sm:text-base text-gray-600">Total investasi paket kemitraan Anda</p>
               </div>
            </div>
         </div>

            <!-- Financial Summary Cards -->
            <div id="financial-summary-cards" class="grid grid-cols-1 md:grid-cols-3 gap-6 mb-6">
               <!-- Omset Harian -->
               <div class="modern-card rounded-2xl p-6 shadow-lg overflow-hidden relative">
                  <div class="absolute top-0 right-0 w-24 h-24 -mr-8 -mt-8 bg-gradient-to-br from-amber-300/20 to-orange-400/20 rounded-full"></div>
                  <div class="relative z-10">
                     <div class="flex items-center justify-between mb-4">
                        <h3 class="text-lg font-semibold text-gray-900">Omset Hari Ini</h3>
                        <div class="icon-container success w-10 h-10 rounded-xl flex items-center justify-center">
                           <svg class="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.25 18.75a60.07 60.07 0 0 1 15.797 2.101c.727.198 1.453-.342 1.453-1.096V18.75M3.75 4.5v.75A.75.75 0 0 1 3 6h-.75m0 0v-.375c0-.621.504-1.125 1.125-1.125H20.25M2.25 6v9m18-10.5v.75c0 .414.336.75.75.75h.75m-1.5-1.5h.375c.621 0 1.125.504 1.125 1.125v9.75c0 .621-.504 1.125-1.125 1.125h-.375m1.5-1.5H21a.75.75 0 0 0-.75.75v.75m0 0H3.75m0 0h-.375a1.125 1.125 0 0 1-1.125-1.125V15m1.5 1.5v-.75A.75.75 0 0 0 3 15h-.75M15 10.5a3 3 0 1 1-6 0 3 3 0 0 1 6 0Zm3 0h.008v.008H18V10.5Zm-12 0h.008v.008H6V10.5Z"></path>
                           </svg>
                        </div>
                     </div>
                     <p class="stats-number text-3xl font-bold text-gray-900 mb-2" id="omset-hari-ini">{omsetHariIni.length > 0 ? `Rp ${omsetHariIni[omsetHariIni.length-1][0]}` : '-'}</p>
                     <div class="flex items-center justify-between">
                        <p class="text-xs text-gray-600" id="omset-update-time">Dari Google Sheets</p>
                        <span class="text-xs font-medium px-2 py-1 bg-green-100 text-green-800 rounded-full">Hari Ini</span>
                     </div>
                  </div>
               </div>

               <!-- Omset Bulanan -->
               <div class="modern-card rounded-2xl p-6 shadow-lg overflow-hidden relative">
                  <div class="absolute top-0 right-0 w-24 h-24 -mr-8 -mt-8 bg-gradient-to-br from-amber-300/20 to-orange-400/20 rounded-full"></div>
                  <div class="relative z-10">
                     <div class="flex items-center justify-between mb-4">
                        <h3 class="text-lg font-semibold text-gray-900">Omset Bulan Ini</h3>
                        <div class="icon-container info w-10 h-10 rounded-xl flex items-center justify-center">
                           <svg class="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z"></path>
                           </svg>
                        </div>
                     </div>
                     <p class="stats-number text-3xl font-bold text-gray-900 mb-2" id="omset-bulanan">{omsetBulanIni ? `Rp ${omsetBulanIni}` : '-'}</p>
                     <div class="flex items-center justify-between">
                        <p class="text-xs text-gray-600" id="omset-bulanan-periode">0 hari dari Sheets</p>
                        <span class="text-xs font-medium px-2 py-1 bg-blue-100 text-blue-800 rounded-full">Bulan Ini</span>
                     </div>
                  </div>
               </div>

               <!-- Belanja Harian -->
               <div class="modern-card rounded-2xl p-6 shadow-lg overflow-hidden relative">
                  <div class="absolute top-0 right-0 w-24 h-24 -mr-8 -mt-8 bg-gradient-to-br from-amber-300/20 to-orange-400/20 rounded-full"></div>
                  <div class="relative z-10">
                     <div class="flex items-center justify-between mb-4">
                        <h3 class="text-lg font-semibold text-gray-900">Belanja Hari Ini</h3>
                        <div class="icon-container warning w-10 h-10 rounded-xl flex items-center justify-center">
                           <svg class="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 11V7a4 4 0 00-8 0v4M5 9h14l1 12H4L5 9z"></path>
                           </svg>
                        </div>
                     </div>
                     <p class="stats-number text-3xl font-bold text-gray-900 mb-2" id="belanja-hari-ini">{belanjaHariIni.length > 0 ? `Rp ${belanjaHariIni[belanjaHariIni.length-1][0]}` : '-'}</p>
                     <div class="flex items-center justify-between">
                        <p class="text-xs text-gray-600" id="belanja-update-time">Dari Google Sheets</p>
                        <span class="text-xs font-medium px-2 py-1 bg-orange-100 text-orange-800 rounded-full">Hari Ini</span>
                     </div>
                  </div>
               </div>
         </div>
         <div id="financial-section" class="hidden mb-6 sm:mb-8">
            <!-- Google Sheets Integration Info -->
            <div class="modern-card rounded-xl sm:rounded-2xl p-4 sm:p-6 shadow-xl mb-4 sm:mb-6 overflow-hidden">
               <div class="relative p-2 sm:p-4">
                  <!-- Background Decoration -->
                  <div class="absolute top-0 right-0 w-24 h-24 sm:w-32 sm:h-32 -mr-6 sm:-mr-10 -mt-6 sm:-mt-10 bg-gradient-to-br from-amber-200/20 to-orange-300/20 rounded-full blur-xl"></div>
                  <div class="absolute bottom-0 left-0 w-20 h-20 sm:w-24 sm:h-24 -ml-4 sm:-ml-6 -mb-4 sm:-mb-6 bg-gradient-to-tr from-orange-200/20 to-red-200/20 rounded-full blur-xl"></div>
               
                  <!-- Header -->
                  <div class="flex flex-col space-y-3 sm:space-y-0 sm:flex-row sm:items-center sm:justify-between mb-4 sm:mb-6 relative z-10">
                     <div class="flex items-center space-x-3">
                        <div class="icon-container warning w-8 h-8 sm:w-10 sm:h-10 rounded-lg sm:rounded-xl flex items-center justify-center shadow-lg">
                           <svg class="w-4 h-4 sm:w-5 sm:h-5 text-white" fill="currentColor" viewBox="0 0 24 24">
                              <path d="M19.903 8.586a.997.997 0 00-.196-.293l-6-6a.997.997 0 00-.293-.196c-.03-.014-.062-.022-.094-.033a.991.991 0 00-.259-.051C13.04 2.011 13.021 2 13 2H6c-1.103 0-2 .897-2 2v16c0 1.103.897 2 2 2h12c1.103 0 2-.897 2-2V9c0-.021-.011-.04-.013-.062a.99.99 0 00-.051-.259c-.01-.032-.019-.063-.033-.093zM16.586 8H14V5.414L16.586 8zM6 20V4h6v5a1 1 0 001 1h5l.002 10H6z"></path>
                              <path d="M8 12h8v2H8zm0 4h8v2H8zm0-8h2v2H8z"></path>
                           </svg>
                        </div>
                        <h3 class="text-lg sm:text-xl font-semibold text-gray-900">Laporan Keuangan</h3>
                     </div>
                     <div class="flex items-center space-x-2">
                        <span class="text-xs sm:text-sm text-amber-600 font-medium" id="last-sync-time">Terakhir sync: -</span>
                        <button id="sync-now-btn" class="px-2 py-1 sm:px-3 sm:py-1 bg-gradient-to-r from-amber-500 to-orange-600 hover:from-amber-600 hover:to-orange-700 text-white text-xs sm:text-sm rounded-lg transition-all transform hover:scale-105 shadow-sm">
                           <span class="flex items-center justify-center">
                              <svg class="w-4 h-4 mr-1" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="size-6">
                                 <path stroke-linecap="round" stroke-linejoin="round" d="M16.023 9.348h4.992v-.001M2.985 19.644v-4.992m0 0h4.992m-4.993 0l3.181 3.183a8.25 8.25 0 0013.803-3.7M4.031 9.865a8.25 8.25 0 0113.803-3.7l3.181 3.182m0-4.991v4.99" />
                              </svg>
                           Sync Sekarang
                        </button>
                     </div>
                  </div>
                  
                  <!-- Info Box -->
                  <div class="bg-gradient-to-r from-amber-50 to-orange-50 border border-amber-200/40 rounded-xl p-3 sm:p-4 mb-4 sm:mb-6 relative z-10 shadow-sm">
                     <div class="flex items-start">
                        <div class="flex-shrink-0">
                        
                        </div>
                        <div class="ml-3 flex-1">
                           <h4 class="text-sm sm:text-base font-medium text-amber-800">Integrasi Google Sheets</h4>
                           <p class="text-xs sm:text-sm text-amber-700 mt-1 leading-relaxed">Data keuangan Anda secara otomatis disinkronkan dengan Google Sheets untuk kemudahan pelaporan dan analisis bisnis.</p>
                        </div>
                           </div>
                              <div class="ml-12 mt-4">
                                 <h4 class="text-sm font-semibold text-amber-800 mb-2">Cara Penggunaan:</h4>
                                    <ol class="text-sm text-amber-700 space-y-2">
                                       <li class="flex items-center">
                                          <span class="inline-flex items-center justify-center w-5 h-5 rounded-full bg-amber-200 text-amber-700 text-xs font-bold mr-2">1</span>
                                          <span>Buat Google Spreadsheet dengan format yang benar</span>
                                       </li>
                                       <li class="flex items-center">
                                          <span class="inline-flex items-center justify-center w-5 h-5 rounded-full bg-amber-200 text-amber-700 text-xs font-bold mr-2">2</span>
                                          <span>Masukkan link spreadsheet Anda di bawah</span>
                                       </li>
                                       <li class="flex items-center">
                                          <span class="inline-flex items-center justify-center w-5 h-5 rounded-full bg-amber-200 text-amber-700 text-xs font-bold mr-2">3</span>
                                          <span>Klik "Simpan & Sync" untuk menghubungkan</span>
                                       </li>
                                       <li class="flex items-center">
                                          <span class="inline-flex items-center justify-center w-5 h-5 rounded-full bg-amber-200 text-amber-700 text-xs font-bold mr-2">4</span>
                                          <span>Data akan otomatis tersinkron dari spreadsheet</span>
                                       </li>
                                    </ol>
                                 </div>
                                 <div class="grid mt-4 grid-cols-1 gap-6 relative z-10">
                                    <!-- Input Link Spreadsheet -->
                                    <div class="bg-white/60 p-4 rounded-xl border border-amber-100/40 shadow-sm">
                                       <label class="block text-sm font-medium text-amber-800 mb-2">
                                          Link Google Spreadsheet Anda
                                       </label>
                                       <div class="flex flex-col sm:flex-row gap-2">
                                          <input type="url" id="sheets-url-input" placeholder="https://docs.google.com/spreadsheets/d/..." 
                                                class="flex-1 px-4 py-3 border border-amber-200/60 rounded-lg focus:outline-none focus:ring-2 focus:ring-amber-500 focus:border-transparent shadow-sm">
                                          <div class="flex space-x-2">
                                             <button id="save-sheets-url" class="px-4 py-3 bg-gradient-to-r from-amber-500 to-orange-600 hover:from-amber-600 hover:to-orange-700 text-white rounded-lg transition-all shadow-sm flex-grow sm:flex-grow-0">
                                                <span class="flex items-center justify-center">
                                                   <svg class="w-4 h-4 mr-2" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="size-6">
                                                      <path stroke-linecap="round" stroke-linejoin="round" d="M12 9.75v6.75m0 0-3-3m3 3 3-3m-8.25 6a4.5 4.5 0 0 1-1.41-8.775 5.25 5.25 0 0 1 10.233-2.33 3 3 0 0 1 3.758 3.848A3.752 3.752 0 0 1 18 19.5H6.75Z"></path>
                                                   </svg>
                                                   Simpan & Sync
                                                </span>
                                             </button>
                                             <button id="open-sheets-btn" disabled class="px-4 py-3 bg-green-400 text-white cursor-pointed rounded-lg transition-all font-medium shadow-sm flex-grow sm:flex-grow-0 disabled:opacity-60">
                                                <span class="flex items-center justify-center">
                                                   <svg class="w-4 h-4 mr-2" fill="currentColor" viewBox="0 0 20 20">
                                                      <path d="M11 3a1 1 0 100 2h2.586l-6.293 6.293a1 1 0 101.414 1.414L15 6.414V9a1 1 0 102 0V4a1 1 0 00-1-1h-5z"></path>
                                                      <path d="M5 5a2 2 0 00-2 2v8a2 2 0 002 2h8a2 2 0 002-2v-3a1 1 0 10-2 0v3H5V7h3a1 1 0 000-2H5z"></path>
                                                   </svg>
                                                   Buka
                                                </span>
                                             </button>
                                          </div>
                                       </div>
                                       <p class="text-xs text-amber-600/70 mt-2">Masukkan link Google Sheets Anda untuk melihat laporan keuangan</p>
                                    </div>
                                    
                                    <!-- Connection Status -->
                                    <div class="bg-white/60 p-4 rounded-xl border border-amber-100/40 shadow-sm">
                                       <label class="block text-sm font-medium text-amber-800 mb-2">
                                          Status Koneksi
                                       </label>
                                       <div id="connection-status" class="flex items-center px-4 py-3 bg-gradient-to-r from-amber-50 to-orange-50 rounded-lg border border-amber-200/40">
                                          <div class="w-3 h-3 bg-amber-400 rounded-full mr-3 shadow-sm"></div>
                                          <span class="text-sm text-amber-700 font-medium">Belum tersambung - Masukkan link spreadsheet</span>
                                       </div>
                                       <p class="text-xs text-amber-600/70 mt-2">Status koneksi ke Google Sheets Anda</p>
                                    </div>
                                 </div>
                              </div>
                           </div>
                        </div>
                     </div>
                     <!-- Detailed Information -->
                        <div class="grid grid-cols-1 lg:grid-cols-2 gap-6 mb-6">
                           <!-- Personal Information -->
                           <div class="modern-card rounded-2xl p-6 shadow-lg">
                              <div class="p-4">
                                 <div class="flex items-center justify-between mb-6">
                                    <h3 class="text-xl font-semibold text-gray-900">Informasi Personal</h3>
                                    <div class="icon-container w-10 h-10 rounded-xl flex items-center justify-center shadow-lg">
                                       <svg class="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"></path>
                                       </svg>
                                    </div>
                                 </div>
                                 <div class="space-y-4">
                                    <div class="bg-amber-50/50 rounded-xl p-3">
                                       <label class="text-sm font-medium text-amber-800">Nama Mitra</label>
                                       <p class="text-gray-900 font-semibold" id="detail-nama">-</p>
                                    </div>
                                    <div class="bg-orange-50/50 rounded-xl p-3">
                                       <label class="text-sm font-medium text-orange-800">Email</label>
                                       <p class="text-gray-900 font-semibold" id="detail-email">-</p>
                                    </div>
                                    <div class="bg-amber-50/50 rounded-xl p-3">
                                       <label class="text-sm font-medium text-amber-800">No. HP</label>
                                       <p class="text-gray-900 font-semibold" id="detail-hp">-</p>
                                    </div>
                                    <div class="bg-orange-50/50 rounded-xl p-3">
                                       <label class="text-sm font-medium text-orange-800">Alamat</label>
                                       <p class="text-gray-900 font-semibold" id="detail-alamat">-</p>
                                    </div>
                                 </div>
                              </div>
                           </div>

                           <!-- Partnership Information -->
                           <div class="modern-card rounded-2xl p-6 shadow-lg">
                              <div class="p-4">
                                 <div class="flex items-center justify-between mb-6">
                                    <h3 class="text-xl font-semibold text-gray-900">Informasi Kemitraan</h3>
                                    <div class="icon-container warning w-10 h-10 rounded-xl flex items-center justify-center shadow-lg">
                                       <svg class="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16m14 0h2m-2 0h-5m-9 0H3m2 0h5M9 7h1m-1 4h1m4-4h1m-1 4h1m-5 10v-5a1 1 0 011-1h2a1 1 0 011 1v5m-4 0h4"></path>
                                       </svg>
                                    </div>
                                 </div>
                                 <div class="space-y-4">
                                    <div class="bg-orange-50/50 rounded-xl p-3">
                                       <label class="text-sm font-medium text-orange-800">Sistem Kemitraan</label>
                                       <p class="text-gray-900 font-semibold" id="detail-sistem">-</p>
                                    </div>
                                    <div class="bg-amber-50/50 rounded-xl p-3">
                                       <label class="text-sm font-medium text-amber-800">Paket Usaha</label>
                                       <p class="text-gray-900 font-semibold" id="detail-paket">-</p>
                                    </div>
                                    <div class="bg-orange-50/50 rounded-xl p-3">
                                       <label class="text-sm font-medium text-orange-800">Status Persetujuan</label>
                                       <div class="mt-1">
                                       <span class="inline-flex items-center px-3 py-1 rounded-full text-xs font-medium bg-yellow-100 text-yellow-800" id="detail-approval-badge">
                                          -
                                       </span>
                                       </div>

                                       <!-- Partnership Agreement Section for Paid-Off Mitra - REMOVED -->
                                       <!-- Agreement will now only appear as modal -->
                                    </div>
                                    <div class="bg-amber-50/50 rounded-xl p-3">
                                       <label class="text-sm font-medium text-amber-800">Tanggal Bergabung</label>
                                       <p class="text-gray-900 font-semibold" id="detail-join-date">-</p>
                                    </div>
                                 </div>
                              </div>
                           </div>
                        </div>
                        <!-- Recent Activity -->
                        <div class="modern-card rounded-xl sm:rounded-2xl p-4 sm:p-6 shadow-lg">
                           <div class="p-2 sm:p-4">
                              <div class="flex items-center justify-between mb-4 sm:mb-6">
                                 <div class="flex items-center space-x-2">
                                    <h3 class="text-lg sm:text-xl font-semibold text-gray-900">Aktivitas Terbaru</h3>
                                    <div class="flex items-center space-x-1">
                                       <div class="w-2 h-2 bg-green-500 rounded-full animate-pulse"></div>
                                       <span class="text-xs text-green-600 font-medium">Real-time</span>
                                    </div>
                                 </div>
                                 <div class="icon-container info w-8 h-8 sm:w-10 sm:h-10 rounded-lg sm:rounded-xl flex items-center justify-center shadow-lg">
                                    <svg class="w-4 h-4 sm:w-5 sm:h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                       <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                                    </svg>
                                 </div>
                              </div>
                              <div class="space-y-3 sm:space-y-4">
                                 <div class="flex items-center p-2 sm:p-3 bg-gradient-to-r from-amber-50/80 to-orange-50/80 rounded-lg sm:rounded-xl">
                                    <div class="flex-shrink-0">
                                       <div class="w-2 h-2 sm:w-3 sm:h-3 bg-green-500 rounded-full shadow-sm"></div>
                                    </div>
                                    <div class="ml-3 sm:ml-4 min-w-0 flex-1">
                                       <p class="text-xs sm:text-sm text-gray-800 truncate">Login terakhir: <span id="last-login" class="font-semibold">-</span></p>
                                    </div>
                                 </div>
                                 <div class="flex items-center p-2 sm:p-3 bg-gradient-to-r from-orange-50/80 to-amber-50/80 rounded-lg sm:rounded-xl">
                                    <div class="flex-shrink-0">
                                       <div class="w-2 h-2 sm:w-3 sm:h-3 bg-blue-500 rounded-full shadow-sm"></div>
                                    </div>
                                    <div class="ml-3 sm:ml-4 min-w-0 flex-1">
                                       <p class="text-xs sm:text-sm text-gray-800 truncate">Akun dibuat: <span id="account-created" class="font-semibold">-</span></p>
                                    </div>
                                 </div>
                                 <div class="flex items-center p-2 sm:p-3 bg-gradient-to-r from-amber-50/80 to-orange-50/80 rounded-lg sm:rounded-xl">
                                    <div class="flex-shrink-0">
                                       <div class="w-2 h-2 sm:w-3 sm:h-3 bg-amber-500 rounded-full shadow-sm"></div>
                                    </div>
                                    <div class="ml-3 sm:ml-4 min-w-0 flex-1">
                                       <p class="text-xs sm:text-sm text-gray-800 truncate">Status akun: <span id="account-status" class="font-semibold">Aktif</span></p>
                                    </div>
                                 </div>
                              </div>
                           </div>
                        </div>
                     </div>
                  </div>
               </div>
            </div>
         </div>
      </div>
   </div>
</div>

      <!-- Error State -->
      <div id="error-state" class="hidden text-center py-16">
         <div class="modern-card rounded-2xl p-10 shadow-xl max-w-lg mx-auto">
            <div class="icon-container danger w-20 h-20 rounded-full flex items-center justify-center mx-auto mb-6">
               <svg class="w-10 h-10 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
               </svg>
            </div>
            <h3 class="text-xl font-semibold text-gray-900 mb-3">Gagal Memuat Data</h3>
            <p class="text-gray-600 mb-6" id="error-message">Terjadi kesalahan saat memuat data mitra.</p>
            <button onclick="window.location.reload()" class="px-6 py-3 bg-gradient-to-r from-amber-500 to-orange-600 hover:from-amber-600 hover:to-orange-700 text-white rounded-xl transition-all transform hover:scale-105 font-medium shadow-lg">
               Muat Ulang
            </button>
         </div>
      </div>
   </div>
</div>

<!-- Agreement Modal for New Users -->
<div id="agreement-modal" class="hidden fixed inset-0 z-[9999] overflow-y-auto bg-black bg-opacity-50" aria-labelledby="modal-title" role="dialog" aria-modal="true">
   <div class="flex items-center justify-center min-h-screen pt-4 px-4 pb-20 text-center sm:block sm:p-0">
      <!-- Modal backdrop -->
      <div class="fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity" aria-hidden="true" id="modal-backdrop"></div>
      
      <!-- Modal panel -->
      <div class="inline-block align-bottom bg-white rounded-lg text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-4xl sm:w-full relative z-10">
         <div class="bg-white px-4 pt-5 pb-4 sm:p-6 sm:pb-4">
            <div class="flex items-center mb-4">
               <div class="mx-auto flex-shrink-0 flex items-center justify-center h-12 w-12 rounded-full bg-amber-100 sm:mx-0 sm:h-10 sm:w-10">
                  <svg class="h-6 w-6 text-amber-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                     <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
                  </svg>
               </div>
               <div class="ml-3">
                  <h3 class="text-lg leading-6 font-medium text-gray-900" id="modal-title">
                     Selamat Datang di Sagawa Group
                  </h3>
                  <p class="text-sm text-gray-500">
                     Sebagai mitra baru, silakan baca dan setujui syarat dan ketentuan kemitraan
                  </p>
               </div>
            </div>

            <!-- Mitra Information Section -->
            <div class="mt-4 bg-blue-50 border border-blue-200 rounded-lg p-4 agreement-content">  
               <h4 class="font-semibold text-blue-900 mb-3">Informasi Mitra</h4>
               
               <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div class="bg-white rounded-lg p-3 border border-blue-200">
                     <label class="block text-xs font-medium text-gray-500 mb-1">Nama Lengkap</label>
                     <p class="text-sm font-semibold text-gray-900" id="agreement-nama">-</p>
                  </div>
                  
                  <div class="bg-white rounded-lg p-3 border border-blue-200">
                     <label class="block text-xs font-medium text-gray-500 mb-1">Nomor HP</label>
                     <p class="text-sm font-semibold text-gray-900" id="agreement-no-hp">-</p>
                  </div>
                  
                  <div class="bg-white rounded-lg p-3 border border-blue-200">
                     <label class="block text-xs font-medium text-gray-500 mb-1">Email</label>
                     <p class="text-sm font-semibold text-gray-900" id="agreement-email">-</p>
                  </div>
                  
                  <div class="bg-white rounded-lg p-3 border border-blue-200">
                     <label class="block text-xs font-medium text-gray-500 mb-1">Sistem Kemitraan</label>
                     <p class="text-sm font-semibold text-gray-900" id="agreement-kemitraan">-</p>
                  </div>
                  
                  <div class="bg-white rounded-lg p-3 border border-blue-200">
                     <label class="block text-xs font-medium text-gray-500 mb-1">Alamat</label>
                     <p class="text-sm font-semibold text-gray-900" id="agreement-alamat">-</p>
                  </div>
                  
                  <div class="bg-white rounded-lg p-3 border border-blue-200">
                     <label class="block text-xs font-medium text-gray-500 mb-1">Nilai Paket Usaha</label>
                     <p class="text-sm font-semibold text-gray-900" id="agreement-nilai-paket">-</p>
                  </div>
               </div>
               
               <!-- Signature Declaration -->
               <div class="mt-4 p-3 bg-amber-50 border border-amber-200 rounded-lg">
                  <p class="text-sm font-medium text-amber-800 text-center italic">
                     Saya sebagai Mitra Sagawa Group yang bertanda tangan di bawah ini:
                  </p>
               </div>
            </div>

            <!-- Agreement Content -->
            <div class="mt-3 sm:mt-0">
               <div class="bg-gray-50 rounded-lg p-6 max-h-96 overflow-y-auto agreement-content">
                  
                  <div class="space-y-4 text-sm text-gray-700">
                     <h4 class="font-semibold text-lg text-gray-900">SYARAT DAN KETENTUAN KEMITRAAN</h4>
                     
                     <div>
                        <h5 class="font-medium text-gray-900 mb-2">PASAL 1 KETENTUAN UMUM</h5>
                        <p class="mb-2">Masing-masing pihak, dalam hal ini Pihak I dan Pihak II bertanggung jawab atas tercapainya tujuan bersama dengan meningkatkan nilai bisnis maupun nilai merek. Harapan dari semua itu tidak lain untuk memperluas jangkauan bisnis dan konsistensi bisnis ke depannya.</p>
                     </div>
                     
                     <div>
                        <h5 class="font-medium text-gray-900 mb-2">PASAL 2 KEWAJIBAN POKOK PIHAK I</h5>
                        <p class="mb-2"><strong>Sebagai pemilik merek dan resep <span id="agreement-brand-name">(Nama Brand)</span>, Pihak I</strong></p>
                        <ul class="list-disc pl-5 mb-2 space-y-1">
                           <li>Membantu mencarikan properti usaha pada unit usaha Pihak II.</li>
                           <li>Memberikan pelatihan untuk karyawan baru Pihak II.</li>
                           <li>Memberikan pasokan bahan dasar dan bumbu resep asli dengan estimasi stok untuk beberapa waktu ke depan (suplay chain).</li>
                           <li>Meningkatkan kualitas karyawan pada unit usaha Pihak II.</li>
                           <li>Quality control produk atau menu dalam unit usaha Pihak II.</li>
                           <li>Quality control atas bahan baku menu yang dijual pada unit usaha Pihak II sesuai dengan standar operasional dan prosedur perusahaan.</li>
                           <li>Mengadakan pelatihan untuk meningkatkan kapasitas karyawan, melakukan riset dan pengembangan usaha, menjalankan misi marketing dan perluasan usaha.</li>
                           <li>Memberikan seragam kepada karyawan sebagai bentuk identitas usaha.</li>
                        </ul>
                     </div>
                     
                     <div>
                        <h5 class="font-medium text-gray-900 mb-2">PASAL 3 KEWAJIBAN POKOK PIHAK II</h5>
                        <p class="mb-2"><strong>Sebagai franchisee dan atau penerima hak waralaba (mitra) serta penanggung jawab Pihak II</strong></p>
                        <ul class="list-disc pl-5 mb-2 space-y-1">
                           <li>Berkewajiban membeli paket kemitraan dan memilih sistem operasional kemitraan, berlaku satu lokasi untuk satu brand.</li>
                           <li>Berkewajiban membeli bahan dasar inti dan bumbu asli resep kepada pihak I.</li>
                           <li>Berkewajiban Menjalankan fungsi manajemen usaha menuju tingkat profit usaha yang semakin tinggi.</li>
                           <li>Berkewajiban menjalankan asas usaha dengan berpedoman pada prinsip efektif dan efisien.</li>
                           <li>Berkewajiban untuk memberikan insentif kepada trainer (karyawan Pihak I) berupa uang minimal Rp. 250.000,-/hari jika lebih dari tiga hari dari masa training yang diberikan.</li>
                           <li>Pada sistem kemitraan semi-autopilot, Pihak II wajib membayarkan support fee/management fee kepada Pihak I setiap bulannya sebesar 5% (lima persen) dari laba kotor.</li>
                           <li>Pada sistem autopilot pihak II bersedia untuk membagi hasil dari profit bersih sebesar 40% kepada pihak pertama (pemililk lisensi) dan management fee sebesar 5% dari omset setiap bulannya.</li>
                           <li>Jika mitra diluar jabodetabek maka bersedia menanggug biaya diluar paket kemitraan seperti ongkos kirim equipment, survei lokasi, training, akomodasi dan lainnya (dirincikan dengan detail).</li>
                           <li>Pihak II sadar jika karyawan yang di berikan oleh pihak I adalah salah satu aset yang sewaktu-waktu bisa di pindah/bebas tugaskan oleh pihak I.</li>
                        </ul>
                     </div>
                     
                     <div>
                        <h5 class="font-medium text-gray-900 mb-2">PASAL 4 SKEMA BISNIS</h5>
                        <p class="mb-2">Setidaknya terdapat tiga macam sistem kemitraan yang berlaku dalam bisnis ini, yaitu Self-Managed, Semi Autopilot  dan Autopilot.</p>
                        <ul class="list-disc pl-5 mb-2 space-y-1">
                          <li>Sistem self-manage mengacu pada bisnis yang 100% dikelola oleh Pihak II dari segi operasional maupun finansial.</li>
                          <li>Dalam pengoperasiannya, Pihak II diperbolehkan bertanya ataupun meminta saran kepada Pihak I terkait dengan sistematika bisnis atau hal-hal yang menyangkut dengan administrasi maupun operasional bisnis.</li>
                          <li>Keuntungan (profit) bisnis dalam sistem kemitraan self-managed 100% milik Pihak II yang dalam hal ini adalah sebagai mitra (franchisee).</li>
                          <li>Segala bentuk kerugian dalam sistem kemitraan self-managed ditanggung oleh Pihak II selaku franchisee dan Pihak I diperbolehkan memberikan, masukan, saran dan segala bentuk support yang sifatnya solutif.</li>
                          <li>Sistem Semi-Autopilot mengacu pada bisnis yang sistem operasional bisnisnya dikelola 70-80% oleh Pihak I (Franchisor).</li>
                          <li>Sistem Autopilot adalah sistem dimana 100% dikelola oleh perusahaan/pihak I.</li>
                          <li>Sistem Semi Autopilot dan Autopilot Setiap bulannya, Pihak II akan mendapatkan laporan bulanan mengenai perkembangan bisnisnya dalam 30 hari sebelumnya yang sudah disiapkan oleh Pihak I, Selambat-lambatnya di lima hari setelah akhir bulan.</li>
                          <li>Management fee dalam sistem semi-autopilot sebesar 5% dari omset kotor disetiap bulannya, Skema ini berlaku selama bisnis masih berjalan.</li>
                          <li>Skema Autopilot keuntungan di bagi 40:60 (pihak I sebesar 40% dan pihak II sebesar 60% dari nett profit) dan management fee sebesar 5% pada sales kotor bulanan.</li>
                          <li>Pihak I akan membantu Pihak II dalam hal operasional bisnis dan senantiasa menjaga omzet agar tetap stabil, namun terbatas tanggung jawabnya terhadap pencapaian target profit bisnis dan BEP.</li>
                          <li>Jika pada unit bisnis dengan sistem autopilot mengalami kerugian maka pihak I dapat membantu mensuplay bahan baku (bumbu dasar) terlebih dahulu walapun belum dibayar (menghutangkan).</li>
                          <li>Semua tunduk atas aturan yang sudah dibuat.</li>
                        </ul>
                     </div>
                     
                     <div>
                        <h5 class="font-medium text-gray-900 mb-2">PASAL 7 LAIN-LAIN</h5>
                        <ul class="list-disc pl-5 mb-2 space-y-1">
                          <li>Perjanjian kerja sama ini berlaku sejak ditandatangani oleh kedua belah pihak.</li>
                          <li>Perjanjian kerja sama ini bersifat lifetime (selamanya), selama bisnis masih berjalan.</li>
                          <li>Bilamana terdapat kekeliruan, kelemahan dan kekurangan dalam surat perjanjian kerjasama ini, para pihak sepakat melakukan peninjauan ulang dan perbaikan berdasarkan musyawarah berasaskan kekeluargaan.</li>
                          <li>Hal-hal yang belum atau tidak diatur dalam surat perjanjian kerja sama ini akan diatur kembali berdasarkan kesepakatan para pihak.</li>
                          <li>Bilamana terjadi perselisihan, kedua belah pihak sepakat untuk menyelesaikan secara musyawarah/kekeluargaan.</li>
                          <li>Bilamana perselisihan tidak dapat diselesaikan melalui musyawarah, maka para pihak sepakat menyelesaikan melalui Pengadilan Negeri Indonesia.</li>
                        </ul>
                     </div>
                     <div class="bg-amber-50 border border-amber-200 rounded-lg p-4">
                        <p class="text-sm text-amber-800">
                           <strong>Catatan:</strong> Surat perjanjian kerjasama ini dibuat dan ditandatangani oleh para pihak di atas materai secara silang dan memiliki kekuatan hukum yang sama.
                        </p>
                     </div>
                  </div>
               </div>
            </div>
         </div>
         
         <!-- Agreement Checkbox and Submit -->
         <div class="bg-gray-50 px-4 py-3 sm:px-6">
            <div class="flex items-start mb-4">
               <div class="flex items-center h-5">
                  <input id="agreement-checkbox" type="checkbox" class="focus:ring-amber-500 h-4 w-4 text-amber-600 border-gray-300 rounded">
               </div>
               <div class="ml-3 text-sm">
                  <label for="agreement-checkbox" class="font-medium text-gray-700">
                     Saya telah membaca dan menyetujui seluruh syarat dan ketentuan kemitraan Sagawa Group
                  </label>
                  <p class="text-gray-500 text-xs mt-1">
                     Dengan mencentang kotak ini, Anda setuju untuk terikat dengan semua ketentuan yang berlaku
                  </p>
               </div>
            </div>
            
            <div class="flex justify-end">
               <button type="button" id="submit-agreement" disabled class="inline-flex justify-center w-full rounded-md border border-transparent shadow-sm px-4 py-2 bg-gray-400 text-base font-medium text-white cursor-not-allowed sm:w-auto sm:text-sm transition-all duration-200">
                  <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                     <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
                  </svg>
                  Setuju dan Lanjutkan
               </button>
            </div>
         </div>
      </div>
   </div>
</div>

<script>
   // API URL configuration
   const API_URL = import.meta.env.PUBLIC_API_URL || 'http://localhost:3000';

   // Helper for per-user agreement storage key
   function agreementStorageKey() {
      const email = localStorage.getItem('mitraUserEmail');
      return email ? `mitraAgreementConfirmed:${email}` : 'mitraAgreementConfirmed';
   }

   document.addEventListener('DOMContentLoaded', async function() {
      // Prevent copying and text selection for all agreement content sections
      const agreementContents = document.querySelectorAll('.agreement-content');
      agreementContents.forEach(function(agreementContent) {
         // Prevent right-click context menu
         agreementContent.addEventListener('contextmenu', function(e) {
            e.preventDefault();
            return false;
         });

         // Prevent keyboard shortcuts for copy/paste
         agreementContent.addEventListener('keydown', function(e) {
            const keyboardEvent = e as KeyboardEvent;
            // Prevent Ctrl+C, Ctrl+X, Ctrl+V, Ctrl+A
            if (keyboardEvent.ctrlKey && (keyboardEvent.key === 'c' || keyboardEvent.key === 'x' || keyboardEvent.key === 'v' || keyboardEvent.key === 'a')) {
               e.preventDefault();
               return false;
            }
            // Prevent F12 (developer tools)
            if (keyboardEvent.key === 'F12') {
               e.preventDefault();
               return false;
            }
         });

         // Prevent drag and drop
         agreementContent.addEventListener('dragstart', function(e) {
            e.preventDefault();
            return false;
         });
      });

      // Check authentication
      const token = localStorage.getItem('mitraToken');
      if (!token) {
         window.location.href = '/login';
         return;
      }

      // Initialize join date display
      const detailJoinDate = document.getElementById('detail-join-date');
      if (detailJoinDate) {
         detailJoinDate.textContent = 'Memuat...';
      } else {
         console.warn('[DEBUG] detail-join-date element not found during initialization');
      }
      (window as any).resetAgreement = function() {
         localStorage.removeItem(agreementStorageKey());
      };

      (window as any).showModal = function() {
         showAgreementModal();
      };

      (window as any).checkAgreementStatus = function() {
         const status = localStorage.getItem(agreementStorageKey());
         return status;
      };

      // Setup agreement modal for new users
      setupAgreementModal();

      // Initialize dashboard for overlay mode
      const initializeDashboard = () => {
         // Initialize dashboard for overlay mode (no margin management needed)
         initializeDashboardMargin();
         
         // Listen for sidebar toggle events (for potential future use)
         window.addEventListener('sidebarToggle', function(event: Event) {
            const customEvent = event as CustomEvent;
            const isVisible = customEvent.detail.visible;
            updateDashboardMargin(isVisible);
         });

         // Note: No resize handler needed for overlay mode
         // Dashboard content stays fixed regardless of sidebar state
      };

      // Ensure DOM is ready before initializing
      if (document.readyState === 'loading') {
         document.addEventListener('DOMContentLoaded', initializeDashboard);
      } else {
         initializeDashboard();
      }

      // Listen for navbar actions
      document.addEventListener('mitraNavbarAction', function(event: Event) {
        const customEvent = event as CustomEvent;
        const action = customEvent.detail.action;
        
        if (action === 'logout') {
          // Clear session data but keep remembered credentials
          localStorage.removeItem('mitraToken');
          localStorage.removeItem('mitraUser');
          localStorage.removeItem(agreementStorageKey());
          localStorage.removeItem('mitraUserEmail');
          
          // Keep remembered credentials for next login
          // localStorage.removeItem('rememberedEmail');
          // localStorage.removeItem('rememberedPassword');
          // localStorage.removeItem('rememberMe');
          
          window.location.href = '/login';
        }
      });

      // Load mitra profile data
      await loadMitraProfile();

      // Set up real-time activity updates
      setupRealTimeActivityUpdates();
   });

   // Helper to fetch profile robustly: try `/api/mitra/profile` then fallback to `/api/mitra/by-email`
   async function fetchProfileWithFallback(token: string | null) {
      if (!token) return null;
      // Try profile endpoint
      try {
         const res = await fetch(`${API_URL}/api/mitra/profile`, {
            method: 'GET',
            headers: {
               'Authorization': `Bearer ${token}`,
               'Content-Type': 'application/json'
            }
         });
         const json = await res.json();
         if (res.ok && json && json.success && json.data) return json.data;
      } catch (e) { /* ignore and fallback */ }

      // Fallback to by-email
      try {
         const email = localStorage.getItem('mitraUserEmail');
         if (!email) return null;
         const byEmailRes = await fetch(`${API_URL}/api/mitra/by-email?email=${encodeURIComponent(email)}`);
         if (!byEmailRes.ok) return null;
         const byEmailJson = await byEmailRes.json();
         return byEmailJson; // by-email returns the mitra object directly
      } catch (e) { return null; }
   }

   async function loadMitraProfile() {
      const loadingState = document.getElementById('loading-state');
      const dashboardContent = document.getElementById('dashboard-content');
      const errorState = document.getElementById('error-state');
      const token = localStorage.getItem('mitraToken');

      try {
         // Always try by-email endpoint first since it includes complete payment status information
         // as used in kewajiban.astro
         let data = null;
         const email = localStorage.getItem('mitraUserEmail');
         
         if (email) {
            try {
               const byEmailRes = await fetch(`${API_URL}/api/mitra/by-email?email=${encodeURIComponent(email)}`);
               if (byEmailRes.ok) {
                  const byEmailResult = await byEmailRes.json();
                  // the by-email route returns the mitra object directly
                  data = byEmailResult;
               } else {
                  console.warn('[WARN] /api/mitra/by-email failed, trying /api/mitra/profile');
               }
            } catch (e) {
               console.warn('[WARN] Error fetching /api/mitra/by-email, trying /api/mitra/profile', e);
            }
         }

         // Fallback to profile endpoint if by-email failed
         if (!data) {
            try {
               const response = await fetch(`${API_URL}/api/mitra/profile`, {
                  method: 'GET',
                  headers: {
                     'Authorization': `Bearer ${token}`,
                     'Content-Type': 'application/json'
                  }
               });
               const result = await response.json();

               if (response.ok && result && result.success && result.data) {
                  data = result.data;
               } else {
                  console.warn('[WARN] /api/mitra/profile did not return expected shape');
               }
            } catch (e) {
               console.warn('[WARN] Error fetching /api/mitra/profile', e);
            }
         }

         if (data) {
            // Store mitra data for agreement modal
            localStorage.setItem('mitraUser', JSON.stringify(data));
            (window as any).currentMitraData = data;
            
            // Hide loading state and show dashboard
            loadingState?.classList.add('hidden');
            dashboardContent?.classList.remove('hidden');

            // Update profile information in header and navbar
            updateProfileHeader(data);
            
            // Update navbar user info using the exposed function
            if (typeof (window as any).mitraNavbar !== 'undefined') {
              (window as any).mitraNavbar.updateUserInfo(data);
            }

            // Update statistics cards
            await updateStatisticsCards(data);

            // Update detailed information
            updateDetailedInfo(data);

            // Update activity information
            updateActivityInfo(data);

            // Agreement check is now handled in updateStatisticsCards when user is paid off
            // No need for separate call here to avoid duplication

         } else {
            throw new Error('Gagal memuat data profil');
         }

      } catch (error) {
         console.error('Error loading mitra profile:', error);
         
         // Show error state
         loadingState?.classList.add('hidden');
         errorState?.classList.remove('hidden');
         
         const errorMessage = document.getElementById('error-message');
         if (errorMessage) {
            errorMessage.textContent = error instanceof Error ? error.message : 'Terjadi kesalahan yang tidak diketahui';
         }
      }
   }

   // Function to set up real-time activity updates
   function setupRealTimeActivityUpdates() {
      // Update activity info every 30 seconds to show relative time changes
      setInterval(() => {
         const currentMitraData = (window as any).currentMitraData;
         if (currentMitraData) {
            updateActivityInfo(currentMitraData);
         }
      }, 30000); // Update every 30 seconds

      // Refresh profile data every 5 minutes to get latest server data
      setInterval(async () => {
         try {
            const token = localStorage.getItem('mitraToken');
            const email = localStorage.getItem('mitraUserEmail');
            
            if (!token || !email) return;

            // Fetch updated profile data quietly (without showing loading state)
            let data = null;
            
            try {
               const byEmailRes = await fetch(`${API_URL}/api/mitra/by-email?email=${encodeURIComponent(email)}`);
               if (byEmailRes.ok) {
                  data = await byEmailRes.json();
               }
            } catch (e) {
               // Fallback to profile endpoint
               try {
                  const response = await fetch(`${API_URL}/api/mitra/profile`, {
                     method: 'GET',
                     headers: {
                        'Authorization': `Bearer ${token}`,
                        'Content-Type': 'application/json'
                     }
                  });
                  const result = await response.json();
                  if (response.ok && result?.success && result?.data) {
                     data = result.data;
                  }
               } catch (profileError) {
                  console.warn('Failed to refresh profile data:', profileError);
               }
            }

            if (data) {
               // Update stored data and activity info
               localStorage.setItem('mitraUser', JSON.stringify(data));
               (window as any).currentMitraData = data;
               updateActivityInfo(data);
               
               // Update other sections silently if needed
               updateStatisticsCards(data);
               updateDetailedInfo(data);
            }
         } catch (error) {
            console.warn('Error during background profile refresh:', error);
         }
      }, 300000); // Refresh every 5 minutes
   }

   // Function to initialize dashboard for overlay mode
   function initializeDashboardMargin() {
      // In overlay mode, we don't need to manage margins
      // Dashboard content stays fixed, sidebar appears as overlay
      console.log('Dashboard initialized for overlay mode');
   }

   // Function to update dashboard for overlay mode (placeholder for compatibility)
   function updateDashboardMargin(sidebarVisible: boolean) {
      // In overlay mode, dashboard content doesn't move
      // Sidebar appears/disappears as an overlay on top
      console.log('Sidebar overlay state:', sidebarVisible);
   }

   function setupAgreementModal() {
      // Setup checkbox handler
      const agreementCheckbox = document.getElementById('agreement-checkbox') as HTMLInputElement;
      const submitButton = document.getElementById('submit-agreement') as HTMLButtonElement;
      
      if (agreementCheckbox && submitButton) {
         agreementCheckbox.addEventListener('change', function() {
            if (this.checked) {
               submitButton.disabled = false;
               submitButton.className = 'inline-flex justify-center w-full rounded-md border border-transparent shadow-sm px-4 py-2 bg-amber-600 hover:bg-amber-700 text-base font-medium text-white cursor-pointer sm:w-auto sm:text-sm transition-all duration-200';
            } else {
               submitButton.disabled = true;
               submitButton.className = 'inline-flex justify-center w-full rounded-md border border-transparent shadow-sm px-4 py-2 bg-gray-400 text-base font-medium text-white cursor-not-allowed sm:w-auto sm:text-sm transition-all duration-200';
            }
         });
         
         // Setup submit button handler
         submitButton.addEventListener('click', async function() {
            if (agreementCheckbox.checked) {
               // Accept agreement via modal
               try {
                  const token = localStorage.getItem('mitraToken');
                  if (!token) {
                     throw new Error('No authorization token');
                  }

                  // Collect all mitra information from the agreement modal
                  const mitraData = {
                     namaMitra: document.getElementById('agreement-nama')?.textContent || '',
                     noHp: document.getElementById('agreement-no-hp')?.textContent || '',
                     email: document.getElementById('agreement-email')?.textContent || '',
                     sistemKemitraan: document.getElementById('agreement-kemitraan')?.textContent || '',
                     alamat: document.getElementById('agreement-alamat')?.textContent || '',
                     nilaiPaketUsaha: document.getElementById('agreement-nilai-paket')?.textContent || '',
                     acceptedAt: new Date().toISOString(),
                     userAgent: navigator.userAgent,
                     ipAddress: 'client-side',
                     agreementVersion: '1.0',
                     agreementContent: {
                        title: 'SYARAT DAN KETENTUAN KEMITRAAN',
                        signatureDeclaration: 'Saya yang sebagai Mitra Sagawa Group yang bertanda tangan di bawah ini:',
                        acceptedTerms: true
                     }
                  };

                  const response = await fetch(`${API_URL}/api/mitra/accept-agreement`, {
                     method: 'POST',
                     headers: {
                        'Authorization': `Bearer ${token}`,
                        'Content-Type': 'application/json'
                     },
                     body: JSON.stringify(mitraData)
                  });

                  const result = await response.json();
                  
                  if (response.ok && result.success) {
                     
                     // Cache agreement status (per-user)
                     localStorage.setItem(agreementStorageKey(), 'true');
                     
                     // Show success message
                     showNotification('Terima kasih! Perjanjian telah diterima dan disimpan. Anda sekarang resmi menjadi mitra Sagawa Group.', 'success');
                     
                     // Hide modal
                     hideAgreementModal();
                     
                     // Reload profile to update status
                     await loadMitraProfile();
                  } else {
                     throw new Error(result.error || 'Failed to save agreement');
                  }
               } catch (error) {
                  console.error('Error accepting agreement from modal:', error);
                  showNotification('Gagal menyimpan persetujuan. Silakan coba lagi.', 'error');
               }
            }
         });
      }
   }

   // Small helper to determine if a user/mitra is considered paid off.
   function isUserPaidOff(user: any) {
         // Hardened rule: parse numeric-like strings (e.g. "1.234,00" or "1234")
         // and check several alternate field names used across backends.
         if (!user) return false;

         const parseNumber = (v: any) => {
            if (v === null || typeof v === 'undefined') return null;
            if (typeof v === 'number') return v;
            if (typeof v === 'string') {
               // remove anything except digits, minus, dot and comma
               const cleaned = v.replace(/[^0-9.,-]/g, '');
               if (cleaned === '') return null;
               // If comma used as decimal separator (e.g. '1.234,56'), convert to '1234.56'
               const commaCount = (cleaned.match(/,/g) || []).length;
               const dotCount = (cleaned.match(/\./g) || []).length;
               let normalized = cleaned;
               if (commaCount > 0 && dotCount > 0 && cleaned.indexOf(',') > cleaned.indexOf('.')) {
                  // format like '1.234,56' -> remove dots and replace comma with dot
                  normalized = cleaned.replace(/\./g, '').replace(/,/g, '.');
               } else if (commaCount > 0 && dotCount === 0) {
                  // format like '1234,56' -> replace comma with dot
                  normalized = cleaned.replace(/,/g, '.');
               } else {
                  // remove all commas
                  normalized = cleaned.replace(/,/g, '');
               }
               const n = parseFloat(normalized);
               return isNaN(n) ? null : n;
            }
            return null;
         };

         // Try multiple possible field names
         const rawKekurangan = user.kekurangan ?? user.sisa ?? user.sisaPembayaran ?? user.sisa_pelunasan ?? null;
         const kekuranganNum = parseNumber(rawKekurangan);
         const isKekuranganZero = kekuranganNum !== null && kekuranganNum <= 0;

         // numeric comparison: total paid vs package price
         const totalPaid = parseNumber(user.totalPaid ?? user.paidAmount ?? user.total_pembayaran ?? user.jumlahPembayaran ?? user.pembayaranTotal ?? null);
         const packagePrice = parseNumber(user.hargaPaket ?? user.nilaiPaketUsaha ?? user.totalPrice ?? user.totalHarga ?? user.harga ?? null);
         const paidByComparison = (totalPaid !== null && packagePrice !== null && totalPaid >= packagePrice);

         // Collect various status fields (backend may use different shapes)
         const pelunasanStatuses: string[] = [];
         try {
            if (Array.isArray(user?.pelunasan)) {
               user.pelunasan.forEach((p: any) => {
                  if (p && p.status) pelunasanStatuses.push(String(p.status).toLowerCase());
                  if (p && typeof p.isPaid !== 'undefined' && p.isPaid === true) pelunasanStatuses.push('paid');
               });
            } else if (user?.pelunasan && typeof user.pelunasan === 'object' && user.pelunasan.status) {
               pelunasanStatuses.push(String(user.pelunasan.status).toLowerCase());
            }
            if (user?.statusPelunasan) pelunasanStatuses.push(String(user.statusPelunasan).toLowerCase());
            if (user?.pelunasanStatus) pelunasanStatuses.push(String(user.pelunasanStatus).toLowerCase());
            if (user?.paymentStatus) pelunasanStatuses.push(String(user.paymentStatus).toLowerCase());
            if (user?.keteranganPelunasan) pelunasanStatuses.push(String(user.keteranganPelunasan).toLowerCase());
         } catch (e) { /* ignore */ }

         const isPelunasanApproved = (
            user?.pelunasanApproved === true ||
            pelunasanStatuses.includes('approved') ||
            pelunasanStatuses.includes('lunas') ||
            pelunasanStatuses.includes('paid') ||
            // Some backends may use explicit status fields for payment
            (typeof user?.statusPelunasan === 'string' && ['approved', 'lunas', 'paid'].includes(user.statusPelunasan.toLowerCase()))
         );

         const isPaidOff = (
            user?.nilaiPaketUsaha === 'Full Payment' ||
            user?.isFullPayment === true ||
            user?.isPaidOff === true ||
            isPelunasanApproved ||
            isKekuranganZero ||
            paidByComparison
         );

         // Debug: show which check matched in the current environment with parsed numeric values
         try {
            console.debug('[DEBUG] isUserPaidOff check', {
               rawKekurangan,
               kekuranganNum,
               totalPaid,
               packagePrice,
               paidByComparison,
               nilaiPaketUsaha: user?.nilaiPaketUsaha,
               isFullPayment: user?.isFullPayment,
               isPaidOffField: user?.isPaidOff,
               pelunasanApproved: user?.pelunasanApproved,
               statusPelunasan: user?.statusPelunasan,
               pelunasanStatuses,
               isKekuranganZero,
               result: Boolean(isPaidOff)
            });
         } catch (e) { /* ignore */ }

         return Boolean(isPaidOff);
   }

   // Check agreement status; if `userProfile` is supplied we use it (avoids double fetching when
   // called after loadMitraProfile), otherwise we'll fetch the profile ourselves.
   async function checkAgreementStatusFromBackend(userProfile: any = null) {
      try {
         const token = localStorage.getItem('mitraToken');
         if (!token) return;

         // Check if we already have cached agreement status for this session
         // Check if we already have cached agreement status for this session (per-user)
         const cachedAgreementStatus = localStorage.getItem(agreementStorageKey());
         if (cachedAgreementStatus === 'true') {
            return;
         }

         // Use provided profile when available to determine payment status
         let user = userProfile;
         if (!user) {
            // try the same fallback we use in loadMitraProfile
            user = await fetchProfileWithFallback(token);
            if (!user) {
               console.error('Gagal memuat profil user untuk cek pelunasan');
               return;
            }
         }

         // DEV DEBUG: inspect the profile used to decide payment status
         console.debug('[DEBUG] checkAgreementStatusFromBackend - userProfile:', user);

         // Only run agreement checks for users who have completed payment
         // Use the same logic as in updateStatisticsCards to ensure consistency
         const parseNumber = (v: any) => {
            if (v === null || typeof v === 'undefined') return null;
            if (typeof v === 'number') return v;
            if (typeof v === 'string') {
               const cleaned = v.replace(/[^0-9.,-]/g, '');
               if (cleaned === '') return null;
               const commaCount = (cleaned.match(/,/g) || []).length;
               const dotCount = (cleaned.match(/\./g) || []).length;
               let normalized = cleaned;
               if (commaCount > 0 && dotCount > 0 && cleaned.indexOf(',') > cleaned.indexOf('.')) {
                  normalized = cleaned.replace(/\./g, '').replace(/,/g, '.');
               } else if (commaCount > 0 && dotCount === 0) {
                  normalized = cleaned.replace(/,/g, '.');
               } else {
                  normalized = cleaned.replace(/,/g, '');
               }
               const n = parseFloat(normalized);
               return isNaN(n) ? null : n;
            }
            return null;
         };

         const rawKekurangan = user.kekurangan ?? user.sisa ?? user.sisaPembayaran ?? user.sisa_pelunasan ?? null;
         const kekuranganNum = parseNumber(rawKekurangan);
         const isKekuranganZero = kekuranganNum !== null && kekuranganNum <= 0;

         const totalPaid = parseNumber(user.totalPaid ?? user.paidAmount ?? user.total_pembayaran ?? user.jumlahPembayaran ?? user.pembayaranTotal ?? null);
         const packagePrice = parseNumber(user.hargaPaket ?? user.nilaiPaketUsaha ?? user.totalPrice ?? user.totalHarga ?? user.harga ?? null);
         const paidByComparison = (totalPaid !== null && packagePrice !== null && totalPaid >= packagePrice);

         const pelunasanStatuses = [];
         try {
            if (Array.isArray(user?.pelunasan)) {
               user.pelunasan.forEach((p: any) => {
                  if (p && typeof p.isPaid !== 'undefined' && p.isPaid === true) pelunasanStatuses.push('paid');
               });
            } else if (user?.pelunasan && typeof user.pelunasan === 'object' && user.pelunasan.status) {
               pelunasanStatuses.push(String(user.pelunasan.status).toLowerCase());
            }
            if (user?.statusPelunasan) pelunasanStatuses.push(String(user.statusPelunasan).toLowerCase());
            if (user?.pelunasanStatus) pelunasanStatuses.push(String(user.pelunasanStatus).toLowerCase());
            if (user?.paymentStatus) pelunasanStatuses.push(String(user.paymentStatus).toLowerCase());
            if (user?.keteranganPelunasan) pelunasanStatuses.push(String(user.keteranganPelunasan).toLowerCase());
         } catch (e) { /* ignore */ }

         const isPelunasanApproved = (
            user?.pelunasanApproved === true ||
            pelunasanStatuses.includes('approved') ||
            pelunasanStatuses.includes('lunas') ||
            pelunasanStatuses.includes('paid') ||
            (typeof user?.statusPelunasan === 'string' && ['approved', 'lunas', 'paid'].includes(user.statusPelunasan.toLowerCase()))
         );

         const userIsPaidOff = (
            user?.nilaiPaketUsaha === 'Full Payment' ||
            user?.isFullPayment === true ||
            user?.isPaidOff === true ||
            isPelunasanApproved ||
            isKekuranganZero ||
            paidByComparison
         );

         if (!userIsPaidOff) {
            return;
         }

         const response = await fetch(`${API_URL}/api/mitra/agreement-status`, {
            method: 'GET',
            headers: {
               'Authorization': `Bearer ${token}`,
               'Content-Type': 'application/json'
            }
         });

         const result = await response.json();

         if (response.ok && result.success) {
            const { hasAccepted, agreementDetails } = result.data;

            // Ensure the agreement (if present) belongs to this user
            let acceptedForThisUser = hasAccepted;
            try {
               const localUserId = user && (user._id || user.id || user.mitraId || user.mitra_id);
               const remoteMitraId = agreementDetails && (agreementDetails.mitraId || agreementDetails.mitra_id);
               if (hasAccepted && remoteMitraId && localUserId && String(remoteMitraId) !== String(localUserId)) {
                  console.warn('Agreement record mitraId mismatch — ignoring remote acceptance for this session', { remoteMitraId, localUserId });
                  acceptedForThisUser = false;
               }
            } catch (e) { /* ignore */ }

            if (!acceptedForThisUser) {
               // Agreement now only appears as modal
               setTimeout(() => { showAgreementModal(); }, 300);
            } else {
               const agreedAt = agreementDetails?.acceptedAt;
               // Persist per-user cache
               localStorage.setItem(agreementStorageKey(), 'true');
            }
         } else {
            console.error('Failed to check agreement status:', result.error);
            // If backend fails, don't show modal to avoid blocking user
         }

      } catch (error) {
         console.error('Error checking agreement status:', error);
         // If backend fails, don't show modal to avoid blocking user
      }
   }

   function showAgreementModal() {
      const modal = document.getElementById('agreement-modal');
      
      if (modal) {
         
         // Remove hidden class and add animation
         modal.classList.remove('hidden');
         modal.style.display = 'block';
         
         // Prevent background scrolling
         document.body.style.overflow = 'hidden';
         
         // Focus on the modal for accessibility
         setTimeout(() => {
            modal.focus();
         }, 100);
         
         // Add animation effect
         setTimeout(() => {
            modal.style.opacity = '1';
         }, 10);
         
         // Update mitra information in the modal
         updateAgreementModalWithCurrentData();
         
      } else {
         console.error('[DEBUG] Modal element NOT found!');
      }
   }

   function hideAgreementModal() {

      const modal = document.getElementById('agreement-modal');
      if (modal) {
         // Add fade out animation
         modal.style.opacity = '0';
         
         setTimeout(() => {
            modal.classList.add('hidden');
            modal.style.display = 'none';
            
            // Restore background scrolling
            document.body.style.overflow = '';
         }, 300);
      }
   }

   // Function to update agreement modal with current mitra data
   function updateAgreementModalWithCurrentData() {
      try {
         // Try to get mitra data from localStorage first
         const mitraDataString = localStorage.getItem('mitraUser');
         let mitraData = null;

         if (mitraDataString) {
            mitraData = JSON.parse(mitraDataString);
         }

         // If no data in localStorage, try to get from current session data
         if (!mitraData) {
            // Try to get from window object if available (from previous loads)
            const windowData = (window as any).currentMitraData;
            if (windowData) {
               mitraData = windowData;
            }
         }

         // If we have mitra data, update the modal
         if (mitraData) {
            updateAgreementModalInfo(mitraData);
         } else {
            console.warn('[DEBUG] No mitra data available for agreement modal');
            // Set default values
            updateAgreementModalInfo({
               namaMitra: 'Data tidak tersedia',
               noHp: 'Data tidak tersedia',
               email: localStorage.getItem('mitraUserEmail') || 'Data tidak tersedia',
               sistemKemitraan: 'Data tidak tersedia',
               paketUsaha: '',
               alamatMitra: 'Data tidak tersedia',
               hargaPaket: 'Data tidak tersedia'
            });
         }
      } catch (error) {
         console.error('[DEBUG] Error updating agreement modal with current data:', error);
         // Set default values on error
         updateAgreementModalInfo({
            namaMitra: 'Error memuat data',
            noHp: 'Error memuat data',
            email: 'Error memuat data',
            sistemKemitraan: 'Error memuat data',
            paketUsaha: '',
            alamatMitra: 'Error memuat data',
            hargaPaket: 'Error memuat data'
         });
      }
   }

   // Function to update mitra information in agreement modal
   function updateAgreementModalInfo(mitraData: any) {

      // Update Nama
      const namaElement = document.getElementById('agreement-nama');
      if (namaElement) {
         namaElement.textContent = mitraData?.nama || mitraData?.namaMitra || 'Tidak tersedia';
      }

      // Update No HP
      const noHpElement = document.getElementById('agreement-no-hp');
      if (noHpElement) {
         noHpElement.textContent = mitraData?.noHp || mitraData?.nomorHp || mitraData?.phone || 'Tidak tersedia';
      }

      // Update Email
      const emailElement = document.getElementById('agreement-email');
      if (emailElement) {
         emailElement.textContent = mitraData?.email || 'Tidak tersedia';
      }

      // Update Sistem Kemitraan
      const kemitraanElement = document.getElementById('agreement-kemitraan');
      if (kemitraanElement) {
         const sistemKemitraan = mitraData?.sistemKemitraan || 'Tidak tersedia';
         const paketUsaha = mitraData?.paketUsaha ? ` - ${mitraData.paketUsaha}` : '';
         kemitraanElement.textContent = sistemKemitraan + paketUsaha;
      }

      // Update Alamat
      const alamatElement = document.getElementById('agreement-alamat');
      if (alamatElement) {
         alamatElement.textContent = mitraData?.alamatMitra || mitraData?.alamat || mitraData?.address || 'Tidak tersedia';
      }

      // Update Nilai Paket Usaha
      const nilaiPaketElement = document.getElementById('agreement-nilai-paket');
      if (nilaiPaketElement) {
         let nilaiPaket = mitraData?.hargaPaket || mitraData?.nilaiPaketUsaha || mitraData?.totalPrice || mitraData?.harga || 'Tidak tersedia';
         
         // Format as currency if it's a number
         if (typeof nilaiPaket === 'number') {
            nilaiPaket = nilaiPaket.toLocaleString('id-ID', { style: 'currency', currency: 'IDR' });
         } else if (typeof nilaiPaket === 'string' && !isNaN(Number(nilaiPaket))) {
            nilaiPaket = Number(nilaiPaket).toLocaleString('id-ID', { style: 'currency', currency: 'IDR' });
         }
         
         nilaiPaketElement.textContent = nilaiPaket;
      }

      // Update Brand Name in agreement text
      const brandNameElement = document.getElementById('agreement-brand-name');
      if (brandNameElement) {
         // Use business package as brand name, fallback to partnership system if not available
         const brandName = mitraData?.paketUsaha || mitraData?.namaPaket || mitraData?.brandName || mitraData?.sistemKemitraan || 'Sagawa Group';
         brandNameElement.textContent = brandName;
      }
   }

   // Agreement will now only appear as modal - dashboard agreement functions removed

   function showNotification(message: string, type: 'success' | 'error' = 'success') {
      // Create notification element
      const notification = document.createElement('div');
      const bgColor = type === 'success' ? 'bg-green-500' : 'bg-red-500';
      
      notification.className = `fixed top-4 right-4 ${bgColor} text-white px-6 py-3 rounded-lg shadow-lg z-50 transform transition-all duration-300 translate-x-full opacity-0`;
      notification.innerHTML = `
         <div class="flex items-center">
            <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
               ${type === 'success' 
                  ? '<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>'
                  : '<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>'
               }
            </svg>
            <span>${message}</span>
         </div>
      `;
      
      // Add to DOM
      document.body.appendChild(notification);
      
      // Animate in
      setTimeout(() => {
         notification.classList.remove('translate-x-full', 'opacity-0');
      }, 100);
      
      // Remove after 3 seconds
      setTimeout(() => {
         notification.classList.add('translate-x-full', 'opacity-0');
         setTimeout(() => {
            if (notification.parentNode) {
               notification.parentNode.removeChild(notification);
            }
         }, 300);
      }, 3000);
   }

   // Agreement will now only appear as modal - dashboard agreement functions removed

   function updateProfileHeader(data: any) {
      // Store user email for agreement modal detection
      if (data.email) {
         localStorage.setItem('mitraUserEmail', data.email);
      }

      // Update avatar with first letter of name - support both nama and namaMitra fields
      const profileAvatar = document.getElementById('profile-avatar');
      const displayName = data.nama || data.namaMitra || 'M';
      const firstLetter = displayName.charAt(0).toUpperCase();
      
      if (profileAvatar) profileAvatar.textContent = firstLetter;

      // Update profile info
      const profileName = document.getElementById('profile-name');
      const profileEmail = document.getElementById('profile-email');
      const profileStatus = document.getElementById('profile-status');

      if (profileName) profileName.textContent = displayName || 'Nama tidak tersedia';
      if (profileEmail) profileEmail.textContent = data.email || 'Email tidak tersedia';

      // Status badge
      if (profileStatus) {
         let statusText = 'Status tidak diketahui';
         if (data.isApproved) {
            statusText = 'Mitra Disetujui';
         } else if (data.status === 'pending') {
            statusText = 'Menunggu Persetujuan';
         } else if (data.status === 'rejected') {
            statusText = 'Ditolak';
         }
         profileStatus.textContent = statusText;
      }
   }

   async function updateStatisticsCards(data: any) {
      // Kemitraan Status
      const kemitraanStatus = document.getElementById('kemitraan-status');
      if (kemitraanStatus) {
         let status = 'Pending';
         if (data.isApproved) {
            status = 'Aktif';
         } else if (data.status === 'rejected') {
            status = 'Ditolak';
         }
         kemitraanStatus.textContent = status;
      }

      // Status Pelunasan
      const pelunasanStatus = document.getElementById('pelunasan-status');
      const pelunasanStatusLabel = pelunasanStatus?.previousElementSibling;
      if (pelunasanStatus) {
         // Use the same logic as in kewajiban.astro
         const hasKekurangan = data && typeof data.kekurangan !== 'undefined' && data.kekurangan !== null;
         const isKekuranganZero = hasKekurangan && !isNaN(Number(data.kekurangan)) && Number(data.kekurangan) <= 0;

         // Parse numeric values for comparison (same as isUserPaidOff function)
         const parseNumber = (v: any) => {
            if (v === null || typeof v === 'undefined') return null;
            if (typeof v === 'number') return v;
            if (typeof v === 'string') {
               const cleaned = v.replace(/[^0-9.,-]/g, '');
               if (cleaned === '') return null;
               const commaCount = (cleaned.match(/,/g) || []).length;
               const dotCount = (cleaned.match(/\./g) || []).length;
               let normalized = cleaned;
               if (commaCount > 0 && dotCount > 0 && cleaned.indexOf(',') > cleaned.indexOf('.')) {
                  normalized = cleaned.replace(/\./g, '').replace(/,/g, '.');
               } else if (commaCount > 0 && dotCount === 0) {
                  normalized = cleaned.replace(/,/g, '.');
               } else {
                  normalized = cleaned.replace(/,/g, '.');
               }
               const n = parseFloat(normalized);
               return isNaN(n) ? null : n;
            }
            return null;
         };

         const totalPaid = parseNumber(data.totalPaid ?? data.paidAmount ?? data.total_pembayaran ?? data.jumlahPembayaran ?? data.pembayaranTotal ?? null);
         const packagePrice = parseNumber(data.hargaPaket ?? data.nilaiPaketUsaha ?? data.totalPrice ?? data.totalHarga ?? data.harga ?? null);
         const paidByComparison = (totalPaid !== null && packagePrice !== null && totalPaid >= packagePrice);

         const pelunasanStatuses = [];
         try {
            if (Array.isArray(data?.pelunasan)) {
               data.pelunasan.forEach((p: any) => {
                  if (p && typeof p.isPaid !== 'undefined' && p.isPaid === true) pelunasanStatuses.push('paid');
               });
            } else if (data?.pelunasan && typeof data.pelunasan === 'object' && data.pelunasan.status) {
               pelunasanStatuses.push(String(data.pelunasan.status).toLowerCase());
            }
            if (data?.statusPelunasan) pelunasanStatuses.push(String(data.statusPelunasan).toLowerCase());
            if (data?.pelunasanStatus) pelunasanStatuses.push(String(data.pelunasanStatus).toLowerCase());
            if (data?.paymentStatus) pelunasanStatuses.push(String(data.paymentStatus).toLowerCase());
            if (data?.keteranganPelunasan) pelunasanStatuses.push(String(data.keteranganPelunasan).toLowerCase());
         } catch (e) { /* ignore shape issues */ }

         // Only treat payment-specific approval signals as pelunasan approved.
         const isPelunasanApproved = (
            data?.pelunasanApproved === true ||
            pelunasanStatuses.includes('approved') ||
            pelunasanStatuses.includes('lunas') ||
            pelunasanStatuses.includes('paid') ||
            (typeof data?.statusPelunasan === 'string' && ['approved', 'lunas', 'paid'].includes(data.statusPelunasan.toLowerCase()))
         );

         const isPaidOff = (
            data?.nilaiPaketUsaha === 'Full Payment' ||
            data?.isFullPayment === true ||
            data?.isPaidOff === true ||
            isPelunasanApproved ||
            isKekuranganZero ||
            paidByComparison
         );

         // Additional simple check for "Lunas" status
         const hasLunasStatus = (
            String(data?.statusPelunasan).toLowerCase() === 'lunas' ||
            String(data?.pelunasanStatus).toLowerCase() === 'lunas' ||
            String(data?.paymentStatus).toLowerCase() === 'lunas' ||
            (data?.pelunasan && String(data.pelunasan.status).toLowerCase() === 'lunas')
         );

         // Force show agreement if status is explicitly "Lunas" or isPaidOff is true
         const shouldShowAgreement = isPaidOff || hasLunasStatus;

         // Debug logging

         if (shouldShowAgreement) {
            // Show explicitly as "Lunas" and keep element visible so user sees the status
            pelunasanStatus.textContent = 'Lunas';
            pelunasanStatus.className = 'text-green-600 font-bold';
            pelunasanStatus.style.display = '';
            if (pelunasanStatusLabel && pelunasanStatusLabel instanceof HTMLElement) pelunasanStatusLabel.style.display = '';
            
            // Agreement will now only appear as modal - no inline dashboard section
            
            // Check agreement status from backend and show modal if needed
            await checkAgreementStatusFromBackend(data);
         } else {
            pelunasanStatus.textContent = 'Belum Lunas';
            pelunasanStatus.className = 'text-red-600 font-bold';
            pelunasanStatus.style.display = '';
            if (pelunasanStatusLabel && pelunasanStatusLabel instanceof HTMLElement) pelunasanStatusLabel.style.display = '';
            
            // Agreement section removed from dashboard - no need to hide
         }
      }

      // Sistem Kemitraan
      const sistemKemitraan = document.getElementById('sistem-kemitraan');
      if (sistemKemitraan) {
         sistemKemitraan.textContent = data.sistemKemitraan || 'Tidak tersedia';
      }

      // Paket Usaha
      const paketUsaha = document.getElementById('paket-usaha');
      if (paketUsaha) {
         paketUsaha.textContent = data.paketUsaha || 'Tidak tersedia';
      }

      // Nilai Paket (ambil dari hargaPaket)
      const nilaiPaket = document.getElementById('nilai-paket');
      if (nilaiPaket) {
         let harga = data.hargaPaket;
         if (typeof harga === 'number') {
            nilaiPaket.textContent = harga.toLocaleString('id-ID', { style: 'currency', currency: 'IDR' });
         } else {
            nilaiPaket.textContent = 'Tidak tersedia';
         }
      }

      // Show financial section only for Autopilot & Semi Autopilot
      const financialSection = document.getElementById('financial-section');
      const financialSummaryCards = document.getElementById('financial-summary-cards');
      const sistemKemitraanText = data.sistemKemitraan?.toLowerCase() || '';
      
      // Check if user is self-managed (hide financial reports)
      const isSelfManaged = sistemKemitraanText.includes('self') || sistemKemitraanText.includes('managed');
      
      if (financialSection && (sistemKemitraanText.includes('autopilot') || sistemKemitraanText.includes('semi'))) {
         financialSection.classList.remove('hidden');
         updateFinancialSummary(data);
         initializeFinancialSection();
      } else if (financialSection) {
         financialSection.classList.add('hidden');
      }
      
      // Hide financial summary cards for self-managed mitra
      if (financialSummaryCards) {
         if (isSelfManaged) {
            financialSummaryCards.classList.add('hidden');
         } else {
            financialSummaryCards.classList.remove('hidden');
         }
      }
   }

   function updateFinancialSummary(data: any) {
      // Mock data untuk demo - nanti bisa diambil dari API yang sesuai
      const omsetHarian = Math.random() * 5000000; // Simulasi omset harian
      const omsetBulanan = Math.random() * 100000000; // Simulasi omset bulanan
      const belanjaHarian = Math.random() * 2000000; // Simulasi belanja harian

      // Update Omset Harian
      const omsetHarianElement = document.getElementById('omset-harian');
      if (omsetHarianElement) {
         omsetHarianElement.textContent = omsetHarian.toLocaleString('id-ID', { style: 'currency', currency: 'IDR' });
      }

      // Update Omset Bulanan
      const omsetBulananElement = document.getElementById('omset-bulanan');
      if (omsetBulananElement) {
         omsetBulananElement.textContent = omsetBulanan.toLocaleString('id-ID', { style: 'currency', currency: 'IDR' });
      }

      // Update Belanja Harian
      const belanjaHarianElement = document.getElementById('belanja-harian');
      if (belanjaHarianElement) {
         belanjaHarianElement.textContent = belanjaHarian.toLocaleString('id-ID', { style: 'currency', currency: 'IDR' });
      }

   }

   function updateDetailedInfo(data: any) {
      // Personal Information
      const detailNama = document.getElementById('detail-nama');
      const detailEmail = document.getElementById('detail-email');
      const detailHp = document.getElementById('detail-hp');
      const detailAlamat = document.getElementById('detail-alamat');

      if (detailNama) detailNama.textContent = data.nama || data.namaMitra || 'Tidak tersedia';
      if (detailEmail) detailEmail.textContent = data.email || 'Tidak tersedia';
      if (detailHp) detailHp.textContent = data.noHp || 'Tidak tersedia';
      if (detailAlamat) detailAlamat.textContent = data.alamatMitra || 'Tidak tersedia';

      // Partnership Information
      const detailSistem = document.getElementById('detail-sistem');
      const detailPaket = document.getElementById('detail-paket');
      const detailSales = document.getElementById('detail-sales');
      const detailApprovalBadge = document.getElementById('detail-approval-badge');
      const detailJoinDate = document.getElementById('detail-join-date');

      if (detailSistem) detailSistem.textContent = data.sistemKemitraan || 'Tidak tersedia';
      if (detailPaket) detailPaket.textContent = data.paketUsaha || 'Tidak tersedia';
      if (detailSales) detailSales.textContent = data.sales || 'Tidak tersedia';

      // Approval badge
      if (detailApprovalBadge) {
         let badgeClass = 'bg-yellow-100 text-yellow-800';
         let badgeText = 'Menunggu';
         
         if (data.isApproved) {
            badgeClass = 'bg-green-100 text-green-800';
            badgeText = 'Disetujui';
         } else if (data.status === 'rejected') {
            badgeClass = 'bg-red-100 text-red-800';
            badgeText = 'Ditolak';
         }

         detailApprovalBadge.className = `inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${badgeClass}`;
         detailApprovalBadge.textContent = badgeText;
      }

      // Join date - try multiple possible field names
      if (detailJoinDate) {
         // Try different possible field names for join date
         const joinDateValue = data.joinDate || data.createdAt || data.tanggalBergabung || data.join_date || data.created_at;

         if (joinDateValue) {
            try {
               const date = new Date(joinDateValue);
               // Check if date is valid
               if (!isNaN(date.getTime())) {
                  detailJoinDate.textContent = date.toLocaleDateString('id-ID', {
                     year: 'numeric',
                     month: 'long',
                     day: 'numeric'
                  });
               } else {
                  detailJoinDate.textContent = 'Format tanggal tidak valid';
                  console.warn('[DEBUG] Invalid join date format:', joinDateValue);
               }
            } catch (error) {
               detailJoinDate.textContent = 'Error parsing tanggal';
               console.error('[DEBUG] Error parsing join date:', error, joinDateValue);
            }
         } else {
            // Fallback: use current date as join date if no date field is available
            const currentDate = new Date();
            detailJoinDate.textContent = currentDate.toLocaleDateString('id-ID', {
               year: 'numeric',
               month: 'long',
               day: 'numeric'
            });
         }
      } else {
         console.warn('[DEBUG] detail-join-date element not found');
      }
   }

   function updateActivityInfo(data: any) {
      // Last login - handle multiple possible field names and show real-time info
      const lastLogin = document.getElementById('last-login');
      if (lastLogin) {
         const lastLoginTime = data.lastLogin || data.lastLoginAt || data.last_login || data.updatedAt;
         
         if (lastLoginTime) {
            const date = new Date(lastLoginTime);
            const now = new Date();
            const diffInHours = Math.floor((now.getTime() - date.getTime()) / (1000 * 60 * 60));
            
            let displayText;
            if (diffInHours < 1) {
               displayText = 'Baru saja';
            } else if (diffInHours < 24) {
               displayText = `${diffInHours} jam yang lalu`;
            } else if (diffInHours < 168) { // 7 days
               const diffInDays = Math.floor(diffInHours / 24);
               displayText = `${diffInDays} hari yang lalu`;
            } else {
               displayText = date.toLocaleDateString('id-ID', {
                  year: 'numeric',
                  month: 'long',
                  day: 'numeric',
                  hour: '2-digit',
                  minute: '2-digit'
               });
            }
            lastLogin.textContent = displayText;
         } else {
            lastLogin.textContent = 'Belum pernah login';
         }
      }

      // Account created - handle multiple field names with better formatting
      const accountCreated = document.getElementById('account-created');
      if (accountCreated) {
         const createdTime = data.createdAt || data.created_at || data.tanggalDaftar || data.joinDate || data.registeredAt;
         
         if (createdTime) {
            const date = new Date(createdTime);
            const now = new Date();
            const diffInDays = Math.floor((now.getTime() - date.getTime()) / (1000 * 60 * 60 * 24));
            
            let displayText;
            if (diffInDays === 0) {
               displayText = 'Hari ini';
            } else if (diffInDays === 1) {
               displayText = 'Kemarin';
            } else if (diffInDays < 30) {
               displayText = `${diffInDays} hari yang lalu`;
            } else if (diffInDays < 365) {
               const diffInMonths = Math.floor(diffInDays / 30);
               displayText = `${diffInMonths} bulan yang lalu`;
            } else {
               displayText = date.toLocaleDateString('id-ID', {
                  year: 'numeric',
                  month: 'long',
                  day: 'numeric'
               });
            }
            accountCreated.textContent = displayText;
         } else {
            accountCreated.textContent = 'Tidak diketahui';
         }
      }

      // Account status - enhanced with multiple status checks and visual indicators
      const accountStatus = document.getElementById('account-status');
      if (accountStatus) {
         const statusIndicator = accountStatus.previousElementSibling?.querySelector('div');
         
         // Check multiple possible status fields
         const isActive = data.isActive !== false && 
                          data.status !== 'inactive' && 
                          data.status !== 'suspended' && 
                          data.statusAkun !== 'tidak_aktif' && 
                          data.accountStatus !== 'inactive';
         
         const isPending = data.status === 'pending' || data.statusAkun === 'menunggu_persetujuan';
         const isSuspended = data.status === 'suspended' || data.statusAkun === 'suspend';
         
         let statusText;
         let statusColor = 'bg-amber-500'; // default
         
         if (isSuspended) {
            statusText = 'Ditangguhkan';
            statusColor = 'bg-red-500';
         } else if (isPending) {
            statusText = 'Menunggu Persetujuan';
            statusColor = 'bg-yellow-500';
         } else if (isActive) {
            statusText = 'Aktif';
            statusColor = 'bg-green-500';
         } else {
            statusText = 'Tidak Aktif';
            statusColor = 'bg-gray-500';
         }
         
         accountStatus.textContent = statusText;
         
         // Update status indicator color
         if (statusIndicator) {
            statusIndicator.className = `w-2 h-2 sm:w-3 sm:h-3 ${statusColor} rounded-full shadow-sm`;
         }
      }
   }

   // Financial Section Functions - Google Sheets Integration
   function initializeFinancialSection() {
      loadUserSheetsUrl();
      setupSheetsEventListeners();
      loadFinancialDataFromSheets();
      setInterval(loadFinancialDataFromSheets, 5 * 60 * 1000);
   }

   async function saveUserSheetsUrl(url: string) {
      try {
         const token = localStorage.getItem('mitraToken');
         updateConnectionStatus('connecting', 'Menyimpan link...');
         
         const response = await fetch(`${API_URL}/api/mitra/sheets-url`, {
            method: 'POST',
            headers: {
               'Authorization': `Bearer ${token}`,
               'Content-Type': 'application/json'
            },
            body: JSON.stringify({ sheetsUrl: url })
         });

         const result = await response.json();
         
         if (response.ok && result.success) {
            showNotification('Link Google Sheets berhasil disimpan!', 'success');
            updateConnectionStatus('connected', 'Link tersimpan');
            // Enable open button
            const openBtn = document.getElementById('open-sheets-btn') as HTMLButtonElement;
            if (openBtn) openBtn.disabled = false;
            loadFinancialDataFromSheets();
         } else {
            throw new Error(result.error || 'Gagal menyimpan link');
         }

      } catch (error) {
         console.error('Error saving sheets URL:', error);
         updateConnectionStatus('error', 'Gagal menyimpan link');
         showNotification('Gagal menyimpan link Google Sheets', 'error');
      }
   }

   async function loadUserSheetsUrl() {
      try {
         const token = localStorage.getItem('mitraToken');
         const response = await fetch(`${API_URL}/api/mitra/sheets-url`, {
            method: 'GET',
            headers: {
               'Authorization': `Bearer ${token}`,
               'Content-Type': 'application/json'
            }
         });

         const result = await response.json();
         
         if (response.ok && result.success) {
            const sheetsInput = document.getElementById('sheets-url-input') as HTMLInputElement;
            const openBtn = document.getElementById('open-sheets-btn') as HTMLButtonElement;
            if (sheetsInput) {
               sheetsInput.value = result.data.sheetsUrl || '';
            }
            if (openBtn) openBtn.disabled = !(result.data.sheetsUrl && result.data.sheetsUrl.length > 0);
            updateConnectionStatus('connected', 'Terhubung ke Google Sheets');
         } else {
            await createUserGoogleSheets();
         }

      } catch (error) {
         console.error('Error loading sheets URL:', error);
         updateConnectionStatus('error', 'Gagal memuat link Sheets');
         
         // Use demo/template URL for development
         const sheetsInput = document.getElementById('sheets-url-input') as HTMLInputElement;
         if (sheetsInput) {
            sheetsInput.value = '';
         }
      }
   }

   async function createUserGoogleSheets() {
      try {
         const token = localStorage.getItem('mitraToken');
         updateConnectionStatus('connecting', 'Membuat Google Sheets...');
         
         const response = await fetch(`${API_URL}/api/mitra/create-sheets`, {
            method: 'POST',
            headers: {
               'Authorization': `Bearer ${token}`,
               'Content-Type': 'application/json'
            }
         });

         const result = await response.json();
         
         if (response.ok && result.success) {
            const sheetsInput = document.getElementById('sheets-url-input') as HTMLInputElement;
            if (sheetsInput) {
               sheetsInput.value = result.data.sheetsUrl;
            }
            updateConnectionStatus('connected', 'Sheets baru dibuat');
            showNotification('Google Sheets baru telah dibuat untuk Anda!', 'success');
         } else {
            throw new Error(result.error || 'Gagal membuat Google Sheets');
         }

      } catch (error) {
         console.error('Error creating Google Sheets:', error);
         updateConnectionStatus('error', 'Gagal membuat Sheets');
         showNotification('Gagal membuat Google Sheets. Coba lagi nanti.', 'error');
      }
   }

   function setupSheetsEventListeners() {
      // Save & Sync button
      const saveBtn = document.getElementById('save-sheets-url');
      if (saveBtn) {
         saveBtn.addEventListener('click', async function() {
            const input = document.getElementById('sheets-url-input') as HTMLInputElement;
            const url = input?.value?.trim();
            
            if (!url) {
               showNotification('Masukkan link Google Sheets terlebih dahulu!', 'error');
               return;
            }
            
            if (!url.includes('docs.google.com/spreadsheets')) {
               showNotification('Link harus berupa Google Sheets yang valid!', 'error');
               return;
            }
            
            await saveUserSheetsUrl(url);
         });
      }
      
      // Sync Now button
      const syncBtn = document.getElementById('sync-now-btn');
      if (syncBtn) {
         syncBtn.addEventListener('click', function() {
            loadFinancialDataFromSheets();
         });
      }
      
      // Open Sheets button
      const openBtn = document.getElementById('open-sheets-btn');
      if (openBtn) {
         openBtn.addEventListener('click', function() {
            const input = document.getElementById('sheets-url-input') as HTMLInputElement;
            const url = input?.value?.trim();
            if (url) {
               window.open(url, '_blank');
            }
         });
      }
   }

   async function loadFinancialDataFromSheets() {
      try {
         const token = localStorage.getItem('mitraToken');
         updateConnectionStatus('syncing', 'Sinkronisasi data...');
         
         const response = await fetch(`${API_URL}/api/mitra/sheets-data`, {
            method: 'GET',
            headers: {
               'Authorization': `Bearer ${token}`,
               'Content-Type': 'application/json'
            }
         });

         const result = await response.json();
         
         if (response.ok && result.success) {
            const data = result.data;
            
            if (data.today) {
               updateTodayFinancialDisplay(data.today);
            }
            
            if (data.monthly) {
               updateMonthlyFinancialDisplay(data.monthly);
            }
            
            if (data.weekly) {
               updateWeeklyFinancialDisplay(data.weekly);
            }
            
            if (data.history) {
               updateFinancialHistory(data.history);
            }
            
            updateConnectionStatus('connected', 'Data tersinkron');
            updateLastSyncTime();
            
         } else {
            throw new Error(result.error || 'Gagal memuat data dari Sheets');
         }

      } catch (error) {
         console.error('Error loading sheets data:', error);
         updateConnectionStatus('error', 'Gagal sync data');
         
         // Use mock data for development
         useMockFinancialData();
      }
   }

   function updateConnectionStatus(status: 'connecting' | 'connected' | 'syncing' | 'error' | 'none', message: string) {
      const statusElement = document.getElementById('connection-status');
      if (!statusElement) return;
      
      // Update status display
      const dot = statusElement.querySelector('div');
      const text = statusElement.querySelector('span');
      
      if (dot && text) {
         // Reset classes
         dot.className = 'w-3 h-3 rounded-full mr-2';
         
         // Set appropriate status color and message
         switch (status) {
            case 'connected':
               dot.classList.add('bg-green-400');
               text.textContent = `Terhubung - ${message}`;
               
               // Enable open button
               const openBtn = document.getElementById('open-sheets-btn') as HTMLButtonElement;
               if (openBtn) {
                  openBtn.disabled = false;
                  openBtn.classList.remove('opacity-50');
               }
               break;
               
            case 'syncing':
            case 'connecting':
               dot.classList.add('bg-blue-400');
               text.textContent = `${message}`;
               break;
               
            case 'error':
               dot.classList.add('bg-red-400');
               text.textContent = `Error - ${message}`;
               break;
               
            default:
               dot.classList.add('bg-yellow-400');
               text.textContent = message;
         }
      }
   }

   function updateLastSyncTime() {
      const timeElement = document.getElementById('last-sync-time');
      if (timeElement) {
         const now = new Date();
         timeElement.textContent = `Terakhir sync: ${now.toLocaleTimeString('id-ID')}`;
      }
   }

   // Update display functions (now receives data from Google Sheets)
   function updateTodayFinancialDisplay(data: any) {
      const omsetElement = document.getElementById('omset-hari-ini');
      const belanjaElement = document.getElementById('belanja-hari-ini');
      const omsetTimeElement = document.getElementById('omset-update-time');
      const belanjaTimeElement = document.getElementById('belanja-update-time');

      if (omsetElement) {
         omsetElement.textContent = formatRupiah(data.omset || 0);
      }
      
      if (belanjaElement) {
         belanjaElement.textContent = formatRupiah(data.belanja || 0);
      }

      if (omsetTimeElement) {
         omsetTimeElement.textContent = 'Dari Google Sheets';
      }
      
      if (belanjaTimeElement) {
         belanjaTimeElement.textContent = 'Dari Google Sheets';
      }
   }

   function updateMonthlyFinancialDisplay(data: any) {
      const omsetBulananElement = document.getElementById('omset-bulanan');
      const periodeElement = document.getElementById('omset-bulanan-periode');

      if (omsetBulananElement) {
         omsetBulananElement.textContent = formatRupiah(data.totalOmset || 0);
      }

      // Tampilkan hanya 'Dari Google Sheets' untuk periode
      if (periodeElement) {
         periodeElement.textContent = 'Dari Google Sheets';
      }
   }

   function updateWeeklyFinancialDisplay(data: any) {
      const avgOmsetElement = document.getElementById('avg-omset-7days');
      const avgBelanjaElement = document.getElementById('avg-belanja-7days');
      const avgProfitElement = document.getElementById('avg-profit-7days');

      if (avgOmsetElement) {
         avgOmsetElement.textContent = formatRupiah(data.avgOmset || 0);
      }

      if (avgBelanjaElement) {
         avgBelanjaElement.textContent = formatRupiah(data.avgBelanja || 0);
      }

      if (avgProfitElement) {
         const profit = (data.avgOmset || 0) - (data.avgBelanja || 0);
         avgProfitElement.textContent = formatRupiah(profit);
         avgProfitElement.className = `font-semibold ${profit >= 0 ? 'text-green-600' : 'text-red-600'}`;
      }
   }

   function updateFinancialHistory(data: any[]) {
      const historyElement = document.getElementById('recent-history');
      if (!historyElement) return;

      if (!data || data.length === 0) {
         historyElement.innerHTML = `
            <div class="text-center text-gray-500 py-8">
               Menunggu data dari Google Sheets...
            </div>
         `;
         return;
      }

      historyElement.innerHTML = data.map(item => {
         const date = new Date(item.date).toLocaleDateString('id-ID', { 
            weekday: 'short', 
            month: 'short', 
            day: 'numeric' 
         });
         const profit = (item.omset || 0) - (item.belanja || 0);
         const profitColor = profit >= 0 ? 'text-green-600' : 'text-red-600';

         return `
            <div class="flex justify-between items-center p-3 bg-gray-50 dark:bg-gray-700 rounded-lg">
               <div>
                  <p class="font-medium text-sm">${date}</p>
                  <p class="text-xs text-gray-500">Omset: ${formatRupiah(item.omset || 0)}</p>
               </div>
               <div class="text-right">
                  <p class="text-xs text-gray-500">Belanja: ${formatRupiah(item.belanja || 0)}</p>
                  <p class="font-semibold text-sm ${profitColor}">Profit: ${formatRupiah(profit)}</p>
               </div>
            </div>
         `;
      }).join('');
   }

   function useMockFinancialData() {
      
      updateTodayFinancialDisplay({
         omset: 0,
         belanja: 0
      });

      updateMonthlyFinancialDisplay({
         totalOmset: 0,
         totalDays: 0
      });

      updateWeeklyFinancialDisplay({
         avgOmset: 0,
         avgBelanja: 0
      });

      const mockHistory = [
         { date: '2025-08-24', omset: 0, belanja: 0 },
         { date: '2025-08-23', omset: 0, belanja: 0 },
         { date: '2025-08-22', omset: 0, belanja: 0 },
         { date: '2025-08-21', omset: 0, belanja: 0 },
         { date: '2025-08-20', omset: 0, belanja: 0 }
      ];

      updateFinancialHistory(mockHistory);
      
      updateConnectionStatus('connected', 'Mode Development');
      updateLastSyncTime();
   }

   function formatRupiah(amount: number): string {
      return new Intl.NumberFormat('id-ID', {
         style: 'currency',
         currency: 'IDR',
         minimumFractionDigits: 0,
         maximumFractionDigits: 0
      }).format(amount);
   }

   // Expose functions to global scope for navbar integration
   (window as any).updateDashboardMargin = updateDashboardMargin;
   (window as any).initializeDashboardMargin = initializeDashboardMargin;
</script>
</Layout>