---
// Page Kewajiban Mitra: hanya untuk mitra yang belum lunas atau baru DP
import type { APIContext } from 'astro';

import Layout from '../../layouts/Layout.astro';
import MitraSidebar from '../../components/mitra/sidebar/MitraSidebar.astro';
import MitraNavbar from '../../components/mitra/navbar/MitraNavbar.astro';


---

<Layout title="Kewajiban Mitra">

<!-- Modern Kewajiban Styles -->
<style>
  /* CSS Custom Properties for performance */
  :root {
    --primary-gradient: linear-gradient(135deg, #f59e0b, #fbbf24);
    --success-gradient: linear-gradient(135deg, #22c55e, #16a34a);
    --warning-gradient: linear-gradient(135deg, #f59e0b, #fbbf24);
    --danger-gradient: linear-gradient(135deg, #ef4444, #dc2626);
    --shadow-light: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
    --shadow-hover: 0 10px 15px -3px rgba(0, 0, 0, 0.1);
  }
  
  /* Global fixes for scroll stability */
  * {
    transform: translateZ(0);
    will-change: auto;
  }
  
  *,
  *::before,
  *::after {
    -webkit-backface-visibility: hidden;
    backface-visibility: hidden;
  }
  
  body, html {
    overflow-x: hidden;
    scroll-behavior: smooth;
    -webkit-overflow-scrolling: touch;
    background-color: #fefefe;
  }
  
  /* Optimized card styling */
  .modern-card {
    transition: transform 0.2s ease, box-shadow 0.2s ease;
  }
  
  .modern-card:hover {
    transform: translateY(-2px);
    box-shadow: var(--shadow-hover);
  }

  /* Optimized status badge styling */
  .status-badge {
    background: var(--warning-gradient);
  }
  
  .status-badge-success {
    background: var(--success-gradient);
  }
  
  .status-badge-warning {
    background: var(--warning-gradient);
  }
  
  .status-badge-danger {
    background: var(--danger-gradient);
  }

  /* Optimized button styling */
  .btn-primary {
    background: var(--primary-gradient);
    transition: transform 0.2s ease, box-shadow 0.2s ease;
  }
  
  .btn-primary:hover {
    transform: translateY(-1px);
    box-shadow: var(--shadow-hover);
  }
  
  .btn-success {
    background: var(--success-gradient) !important;
    transition: transform 0.2s ease, box-shadow 0.2s ease;
  }
  
  .btn-success:hover {
    transform: translateY(-1px);
    box-shadow: var(--shadow-hover);
  }

  /* Optimized loading animation */
  .loading-shimmer {
    background: linear-gradient(90deg, #f0f0f0 25%, #e0e0e0 50%, #f0f0f0 75%);
    background-size: 200% 100%;
    animation: shimmer 1.5s ease-in-out infinite;
  }
  
  @keyframes shimmer {
    0% { background-position: -200% 0; }
    100% { background-position: 200% 0; }
  }

  /* Background pattern - consistent with dashboard */
  .dashboard-bg {
    background: linear-gradient(135deg, #fefefe 0%, #f8f9ff 25%, #fff8f1 50%, #f0f9ff 75%, #fefefe 100%);
    background-size: 400% 400%;
    animation: gradientShift 15s ease infinite;
    min-height: 100vh;
    /* No margin-left needed - sidebar handles its own positioning */
  }
  
  @keyframes gradientShift {
    0%, 100% { background-position: 0% 50%; }
    50% { background-position: 100% 50%; }
  }

  /* Mobile responsive improvements */
  @media (max-width: 640px) {
    .modern-card {
      margin: 0.5rem;
      padding: 1rem !important;
    }
    
    .modern-card:hover {
      transform: translateY(-1px);
    }
    
    /* Dashboard bg adjustments for mobile */
    .dashboard-bg {
      padding: 0.5rem !important;
    }
    .dashboard-bg > div {
      padding: 1rem !important;
      margin-top: 4rem !important;
    }
  }
  
  @media (max-width: 480px) {
    .dashboard-bg {
      padding: 0.25rem !important;
    }
    .dashboard-bg > div {
      padding: 0.75rem !important;
      margin-top: 4rem !important;
    }
    /* Header adjustments */
    .mb-4 {
      margin-bottom: 1rem !important;
    }
    .bg-gradient-to-r {
      padding: 1rem !important;
    }
    .text-2xl {
      font-size: 1.25rem !important;
    }
    .w-12 {
      width: 2.5rem !important;
      height: 2.5rem !important;
    }
  }
</style>
  <MitraNavbar />
  <MitraSidebar currentPage="kewajiban" showKewajiban={true} />
  
  <div class="dashboard-bg min-h-screen p-2 sm:p-4 transition-all duration-300" style="transform: translate3d(0, 0, 0); -webkit-backface-visibility: hidden; backface-visibility: hidden;">
    <div class="p-2 sm:p-6 mt-16" style="transform: translate3d(0, 0, 0); -webkit-backface-visibility: hidden; backface-visibility: hidden;">
      <!-- Breadcrumb -->
      <nav class="flex mt-2 mb-4" aria-label="Breadcrumb">
        <ol class="inline-flex items-center space-x-1 md:space-x-3 overflow-x-auto">
          <li class="inline-flex items-center flex-shrink-0">
            <a href="/user/dashboard" class="inline-flex items-center text-xs sm:text-sm font-medium text-gray-700 hover:text-amber-600 dark:text-gray-400 dark:hover:text-orange-500 transition-colors">
              <svg class="w-3 h-3 me-2.5 flex-shrink-0" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 20 20">
                <path d="m19.707 9.293-2-2-7-7a1 1 0 0 0-1.414 0l-7 7-2 2a1 1 0 0 0 1.414 1.414L2 10.414V18a2 2 0 0 0 2 2h3a1 1 0 0 0 1-1v-4a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1v4a1 1 0 0 0 1 1h3a2 2 0 0 0 2-2v-7.586l.293.293a1 1 0 0 0 1.414-1.414Z"/>
              </svg>
              Dashboard
            </a>
          </li>
          <li class="flex-shrink-0">
            <div class="flex items-center">
              <svg class="w-3 h-3 text-gray-400 mx-1 flex-shrink-0" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 6 10">
                <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m1 9 4-4-4-4"/>
              </svg>
              <span class="ms-1 text-xs sm:text-sm font-medium text-gray-500 md:ms-2 dark:text-gray-400 whitespace-nowrap">Kewajiban Mitra</span>
            </div>
          </li>
        </ol>
      </nav>

      <!-- Page Header -->
      <div class="bg-gradient-to-r from-amber-500 to-orange-500 rounded-xl p-4 sm:p-6 mb-4 sm:mb-6 text-white shadow-xl">
        <div class="flex flex-col sm:flex-row items-center sm:items-start gap-4">
          <div class="w-12 h-12 sm:w-16 sm:h-16 rounded-full bg-white bg-opacity-20 flex items-center justify-center text-xl sm:text-2xl font-bold flex-shrink-0">
            <svg class="w-6 h-6 sm:w-8 sm:h-8" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 7.5h1.5m-1.5 3h1.5m-7.5 3h7.5m-7.5 3h7.5m3-9h3.375c.621 0 1.125.504 1.125 1.125V18a2.25 2.25 0 0 1-2.25 2.25M16.5 7.5V18a2.25 2.25 0 0 0 2.25 2.25M16.5 7.5V4.875c0-.621-.504-1.125-1.125-1.125H4.125C3.504 3.75 3 4.254 3 4.875V18a2.25 2.25 0 0 0 2.25 2.25h13.5M6 7.5h3v3H6v-3Z"></path>
            </svg>
          </div>
          <div class="text-center sm:text-left">
            <h1 class="text-2xl sm:text-3xl font-bold mb-1 sm:mb-2">Kewajiban Mitra</h1>
            <p class="opacity-90 text-sm sm:text-lg">Pantau status pembayaran dan kewajiban Anda</p>
          </div>
        </div>
      </div>

      <!-- Loading State -->
      <div id="loading-state" class="text-center py-12">
        <div class="modern-card rounded-xl p-8 max-w-md mx-auto">
          <div class="loading-shimmer rounded-full h-16 w-16 mx-auto mb-4"></div>
          <div class="loading-shimmer h-4 rounded mb-2"></div>
          <div class="loading-shimmer h-3 rounded w-3/4 mx-auto"></div>
        </div>
      </div>

      <!-- Main Content -->
      <div id="kewajiban-content" class="hidden">
        <!-- Content will be populated by JavaScript -->
      </div>
    </div>
  </div>
</Layout>

<script type="module">
  // Listen for navbar actions
  document.addEventListener('mitraNavbarAction', function(event) {
    const action = event.detail.action;
    
    if (action === 'logout') {
      // Clear session data but keep remembered credentials
      localStorage.removeItem('mitraToken');
      localStorage.removeItem('mitraUser');
      localStorage.removeItem('mitraUserEmail');window.location.href = '/login';
    }
  });

  // Initialize dashboard for overlay mode
  function initializeDashboardMargin() {
    // In overlay mode, we don't need to manage margins
    // Dashboard content stays fixed, sidebar appears as overlay
    console.log('Kewajiban page initialized for overlay mode');
  }

  // Function to update dashboard for overlay mode (placeholder for compatibility)
  function updateDashboardMargin(sidebarVisible) {
    // In overlay mode, dashboard content doesn't move
    // Sidebar appears/disappears as an overlay on top
    console.log('Sidebar overlay state on kewajiban page:', sidebarVisible);
  }

  // Expose functions to global scope for sidebar integration
  window.updateDashboardMargin = updateDashboardMargin;
  window.initializeDashboardMargin = initializeDashboardMargin;

  document.addEventListener('DOMContentLoaded', async () => {
    // Initialize dashboard for overlay mode
    initializeDashboardMargin();
    let API_URL = 'http://localhost:3000'; // Fixed port to 3000
    try {
      if (typeof import.meta !== 'undefined' && import.meta.env && import.meta.env.PUBLIC_API_URL) {
        if (import.meta.env.PUBLIC_API_URL && import.meta.env.PUBLIC_API_URL.startsWith('http')) {
          API_URL = import.meta.env.PUBLIC_API_URL;
        }
      }
    } catch (e) { 
      console.warn('Environment variable error, using fallback API_URL:', API_URL);
    }
    
    // Cache session data to avoid repeated localStorage access
    const sessionData = {
      email: localStorage.getItem('mitraUserEmail') || localStorage.getItem('email'),
      token: localStorage.getItem('mitraToken')
    };
    
    const loadingState = document.getElementById('loading-state');
    const container = document.getElementById('kewajiban-content');
    let mitra = null;

    if (sessionData.email) {
      try {
        // Sequential API calls with individual error handling for better reliability
        let mitraRes, agreementRes, pelunasanRes;
        let mitraData, agreementData, pelunasanData;
        
        // 1. Get mitra data (most critical) - with improved error handling
        try {
          console.log('🔍 Fetching mitra data for email:', sessionData.email);
          const controller = new AbortController();
          const timeoutId = setTimeout(() => controller.abort(), 8000);
          
          mitraRes = await fetch(`${API_URL}/api/mitra/by-email?email=${encodeURIComponent(sessionData.email)}`, {
            method: 'GET',
            headers: {
              'Content-Type': 'application/json',
              'Authorization': sessionData.token ? `Bearer ${sessionData.token}` : ''
            },
            signal: controller.signal
          });
          
          clearTimeout(timeoutId);
          
          if (mitraRes.ok) {
            mitraData = await mitraRes.json();
            console.log('✅ Raw mitra data received:', mitraData);
            if (!mitraData.error) {
              mitra = mitraData;
              console.log('✅ Mitra data processed:', {
                nama: mitra.nama,
                email: mitra.email,
                statusPelunasan: mitra.statusPelunasan,
                kekurangan: mitra.kekurangan,
                hargaPaket: mitra.hargaPaket
              });
            } else {
              console.error('❌ Mitra API returned error:', mitraData.error);
            }
          } else {
            console.error('❌ Mitra API response not OK:', mitraRes.status, mitraRes.statusText);
          }
        } catch (e) {
          console.error('❌ Mitra API Error:', e);
          if (e.name === 'AbortError') {
            console.error('❌ Mitra API request timed out');
          }
        }

        // 2. Get agreement status (optional)
        let agreementAccepted = true; // Default to true
        if (sessionData.token) {
          try {
            agreementRes = await fetch(`${API_URL}/api/mitra/agreement-status`, {
              method: 'GET',
              headers: {
                'Authorization': `Bearer ${sessionData.token}`,
                'Content-Type': 'application/json'
              }
            });
            if (agreementRes.ok) {
              agreementData = await agreementRes.json();
              if (agreementData.success) {
                agreementAccepted = !!agreementData.data.hasAccepted;
              }
            }
          } catch (e) {
            console.error('Agreement API Error:', e);
            // Keep default agreementAccepted = true
          }
        }

        // 3. Get actual pelunasan data (payment history) - this determines UI
        let pelunasanExists = false; // Default to false for users who haven't paid
        try {
          console.log('💰 Checking if user has submitted pelunasan form for email:', sessionData.email);
          const controller = new AbortController();
          const timeoutId = setTimeout(() => controller.abort(), 6000);
          
          // Use the correct endpoint to check if user has submitted pelunasan form
          pelunasanRes = await fetch(`${API_URL}/api/mitra/pelunasan-exists?email=${encodeURIComponent(sessionData.email)}`, {
            method: 'GET',
            headers: {
              'Content-Type': 'application/json',
              'Authorization': sessionData.token ? `Bearer ${sessionData.token}` : ''
            },
            signal: controller.signal
          });
          
          clearTimeout(timeoutId);
          
          if (pelunasanRes.ok) {
            const rawData = await pelunasanRes.json();
            console.log('💳 Pelunasan exists response:', rawData);
            
            // Check if user has submitted pelunasan form (regardless of approval status)
            if (rawData && typeof rawData.exists === 'boolean') {
              pelunasanExists = rawData.exists;
              console.log('✅ Pelunasan form submission status:', {
                userEmail: sessionData.email,
                hasSubmittedForm: pelunasanExists,
                shouldShowWaitingStatus: pelunasanExists,
                shouldShowPayButton: !pelunasanExists
              });
            } else {
              console.log('📋 Unexpected response format from pelunasan-exists endpoint');
              pelunasanExists = false;
            }
          } else {
            console.error('❌ Pelunasan-exists API response not OK:', pelunasanRes.status);
            pelunasanExists = false;
          }
        } catch (e) {
          console.error('❌ Pelunasan-exists API Error:', e);
          if (e.name === 'AbortError') {
            console.error('❌ Pelunasan-exists API request timed out');
          }
          // Critical: Do NOT fallback to localStorage for payment status
          // This could show wrong status for users who haven't submitted form
          pelunasanExists = false;
          console.log('🔄 Using safe default: showing PAY button due to API error');
        }

        // Store results for later use with clear logging
        console.log('🎯 Final kewajiban data:', {
          agreementAccepted,
          pelunasanExists,
          userShouldSeeBayarButton: !pelunasanExists,
          userShouldSeeWaitingMessage: pelunasanExists
        });
        window.kewajibanData = { agreementAccepted, pelunasanExists };

      } catch (e) { 
        console.error('❌ General API Error:', e);
        // CRITICAL: For payment status, always default to safe state (show pay button)
        // Do NOT use localStorage fallback as it may give false positive verification status
        console.log('⚠️ API failed - defaulting to safe state: user will see PAY button');
        window.kewajibanData = { 
          agreementAccepted: true, // Assume agreement is OK to avoid blocking user
          pelunasanExists: false   // Always show pay button when API fails
        };
      }
    } else {
      // No email found - safe default is to show pay button
      console.log('⚠️ No email found in session - showing pay button as safe default');
      window.kewajibanData = { 
        agreementAccepted: true, 
        pelunasanExists: false   // Show pay button when no email
      };
    }

    // Always hide loading state and show content, regardless of API success/failure
    if (loadingState) loadingState.classList.add('hidden');
    if (container) container.classList.remove('hidden');

    // Check if we have mitra data
    if (!mitra) {
      console.warn('No mitra data found. Email:', sessionData.email);
      container.innerHTML = `
        <div class="modern-card rounded-xl p-4 sm:p-8 text-center max-w-md mx-auto">
          <div class="w-12 h-12 sm:w-16 sm:h-16 rounded-full bg-red-100 flex items-center justify-center text-red-500 mx-auto mb-3 sm:mb-4">
            <svg class="w-6 h-6 sm:w-8 sm:h-8" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
            </svg>
          </div>
          <h3 class="text-base sm:text-lg font-semibold text-gray-900 mb-2">Data Tidak Ditemukan</h3>
          <p class="text-red-600 mb-3 sm:mb-4 text-sm sm:text-base">
            Data mitra tidak ditemukan untuk email: <br>
            <code class="text-xs bg-gray-100 px-2 py-1 rounded">${sessionData.email || 'Tidak ada email'}</code>
          </p>
          <div class="flex flex-col sm:flex-row gap-2 sm:gap-4">
            <button onclick="window.location.reload()" class="btn-primary px-4 sm:px-6 py-2 sm:py-3 text-white font-semibold rounded-xl shadow-lg text-sm sm:text-base w-full sm:w-auto">
              Muat Ulang
            </button>
            <a href="/login" class="btn-success inline-flex items-center px-4 sm:px-6 py-2 sm:py-3 text-white font-semibold rounded-xl shadow-lg text-sm sm:text-base w-full sm:w-auto justify-center">
              Login Ulang
            </a>
          </div>
        </div>
      `;
      return;
    }

    try {
      // Update navbar profile info (optional, don't fail if this doesn't work)
      try {
        if (typeof window !== 'undefined' && window.mitraNavbar && typeof window.mitraNavbar.updateUserInfo === 'function') {
          window.mitraNavbar.updateUserInfo(mitra);
        }
      } catch (navError) {
        console.warn('Navbar update failed:', navError);
      }

      // Enhanced payment status logic for DP/Belum Lunas detection
      console.log('Processing payment status for mitra:', {
        email: mitra?.email,
        kekurangan: mitra?.kekurangan,
        hargaPaket: mitra?.hargaPaket,
        nominalDP: mitra?.nominalDP,
        nilaiPaketUsaha: mitra?.nilaiPaketUsaha,
        statusPelunasan: mitra?.statusPelunasan,
        pelunasanApproved: mitra?.pelunasanApproved
      });

      // Parse numeric values safely
      const parseNumeric = (value) => {
        if (value === null || value === undefined || value === '') return 0;
        if (typeof value === 'number') return value;
        if (typeof value === 'string') {
          // Handle Indonesian number format (1.234.567,89)
          const cleaned = value.replace(/\./g, '').replace(',', '.');
          const parsed = parseFloat(cleaned);
          return isNaN(parsed) ? 0 : parsed;
        }
        return 0;
      };

      const kekurangan = parseNumeric(mitra?.kekurangan);
      const hargaPaket = parseNumeric(mitra?.hargaPaket);
      const nominalDP = parseNumeric(mitra?.nominalDP);

      // Check various payment status indicators
      const pelunasanStatuses = [];
      try {
        if (Array.isArray(mitra?.pelunasan)) {
          mitra.pelunasan.forEach(p => {
            if (p && p.status) pelunasanStatuses.push(String(p.status).toLowerCase());
          });
        } else if (mitra?.pelunasan && typeof mitra.pelunasan === 'object' && mitra.pelunasan.status) {
          pelunasanStatuses.push(String(mitra.pelunasan.status).toLowerCase());
        }
        if (mitra?.statusPelunasan) pelunasanStatuses.push(String(mitra.statusPelunasan).toLowerCase());
        if (mitra?.pelunasanStatus) pelunasanStatuses.push(String(mitra.pelunasanStatus).toLowerCase());
        if (mitra?.paymentStatus) pelunasanStatuses.push(String(mitra.paymentStatus).toLowerCase());
      } catch (e) { /* ignore shape issues */ }

      // Determine if pelunasan is approved/completed
      const isPelunasanApproved = (
        mitra?.pelunasanApproved === true ||
        mitra?.isPaidOff === true ||
        mitra?.isFullPayment === true ||
        pelunasanStatuses.includes('approved') ||
        pelunasanStatuses.includes('lunas') ||
        pelunasanStatuses.includes('completed') ||
        (typeof mitra?.statusPelunasan === 'string' && ['approved', 'lunas', 'completed'].includes(mitra.statusPelunasan.toLowerCase()))
      );

      // Enhanced logic to determine if payment is complete
      const isPaidOff = (
        // Explicit payment flags
        isPelunasanApproved ||
        // Kekurangan is zero or negative
        (kekurangan <= 0 && hargaPaket > 0) ||
        // Full payment indicators
        mitra?.nilaiPaketUsaha === 'Full Payment' ||
        String(mitra?.nilaiPaketUsaha || '').toLowerCase().includes('full') ||
        String(mitra?.nilaiPaketUsaha || '').toLowerCase().includes('lunas')
      );

      // Additional check: if mitra has significant kekurangan (more than 10% of package price), they need to pay
      const hasSignificantDebt = (
        kekurangan > 0 && 
        hargaPaket > 0 && 
        (kekurangan / hargaPaket) > 0.1 // More than 10% remaining
      );

      // Override isPaidOff if there's significant debt
      const requiresPayment = hasSignificantDebt && !isPelunasanApproved;

      console.log('[DEBUG] Payment Status Analysis:', {
        kekurangan,
        hargaPaket,
        nominalDP,
        isPelunasanApproved,
        hasSignificantDebt,
        requiresPayment,
        finalIsPaidOff: isPaidOff && !requiresPayment,
        pelunasanStatuses
      });

      // Final determination: Show payment UI if not paid off OR requires payment
      const shouldShowPaymentUI = !isPaidOff || requiresPayment;

      console.log('[DEBUG] Final UI Decision:', {
        shouldShowPaymentUI,
        isPaidOff,
        requiresPayment,
        willShowPaymentUI: shouldShowPaymentUI
      });

      if (!shouldShowPaymentUI && isPaidOff) {
        // Use cached agreement data
        const agreementAccepted = window.kewajibanData?.agreementAccepted !== false;
        
        const extraAction = agreementAccepted ? '' : `
          <div class="mt-4 sm:mt-6 p-3 sm:p-4 content-center bg-white border-l-4 border-red-500 rounded-xl shadow-md">
            <div class="flex flex-col sm:flex-row items-start sm:items-center gap-3">
              <svg class="w-5 h-5 text-amber-600 flex-shrink-0" fill="currentColor" viewBox="0 0 20 20">
                <path fill-rule="evenodd" d="M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z" clip-rule="evenodd"></path>
              </svg>
              <div class="flex-1">
                <p class="text-amber-900 font-bold text-sm sm:text-base">Agreement Belum Ditandatangani</p>
                <p class="text-amber-800 text-xs sm:text-sm mt-1">Silakan buka dashboard untuk menandatangani agreement</p>
              </div>
            </div>
            <div class="mt-3 sm:mt-4">
              <a href="/user/dashboard" class="btn-primary border border-red-300 inline-flex px-4 text-red-500 sm:px-6 py-2 sm:py-3 font-semibold rounded-xl shadow-lg w-full sm:w-auto text-center justify-center">
                <svg class="w-5 h-5 mr-3 sm:w-5 h-5" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-file-pen-line-icon lucide-file-pen-line"><path d="m18 5-2.414-2.414A2 2 0 0 0 14.172 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2"/><path d="M21.378 12.626a1 1 0 0 0-3.004-3.004l-4.01 4.012a2 2 0 0 0-.506.854l-.837 2.87a.5.5 0 0 0 .62.62l2.87-.837a2 2 0 0 0 .854-.506z"/><path d="M8 18h1"/></svg>
                Tandatangani Agreement
              </a>
            </div>
          </div>
        `;

        container.innerHTML = `
          <div class="max-w-4xl mx-auto px-2 sm:px-0">
            <!-- Success Card -->
            <div class="modern-card rounded-xl p-4 sm:p-8 text-center mb-4 sm:mb-6">
              <div class="w-16 h-16 sm:w-20 sm:h-20 rounded-full bg-gradient-to-r from-green-100 to-emerald-100 flex items-center justify-center text-green-600 mx-auto mb-4 sm:mb-6">
                <svg class="w-8 h-8 sm:w-12 sm:h-12" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                </svg>
              </div>
              <h2 class="text-xl sm:text-2xl font-bold bg-gradient-to-r from-green-600 to-emerald-600 bg-clip-text text-transparent mb-3 sm:mb-4">
                Kewajiban Lunas
              </h2>
              <p class="text-gray-600 text-sm sm:text-lg mb-4 sm:mb-6">
                <strong>Selamat!</strong> Anda telah melunasi kewajiban dan resmi menjadi mitra Sagawa Group.
              </p>
              <div class="status-badge-success inline-flex items-center px-4 sm:px-6 py-2 sm:py-3 rounded-full text-green-600 font-semibold shadow-lg text-sm sm:text-base">
                <svg class="w-4 h-4 sm:w-5 sm:h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
                </svg>
                Status: Lunas
              </div>
            </div>
            ${extraAction}
          </div>
        `;
      } else if (shouldShowPaymentUI) {
        // Show payment due status for DP/unpaid mitra
        console.log('[DEBUG] Showing payment UI for DP/unpaid mitra');
        
        function formatCurrency(amount) {
          return typeof amount === 'number'
            ? new Intl.NumberFormat('id-ID', { style: 'currency', currency: 'IDR' }).format(amount)
            : 'N/A';
        }

        container.innerHTML = `
          <div class="max-w-4xl mx-auto px-2 sm:px-0">
            <!-- Mitra Profile Card -->
            <div class="modern-card rounded-xl p-4 sm:p-8 mb-4 sm:mb-6">
              <div class="flex flex-col sm:flex-row items-center sm:items-start gap-4 sm:gap-6">
                <div class="w-16 h-16 sm:w-20 sm:h-20 rounded-full bg-gradient-to-r from-amber-500 to-orange-500 flex items-center justify-center text-2xl sm:text-3xl font-bold text-white flex-shrink-0">
                  ${mitra.namaMitra ? mitra.namaMitra.charAt(0).toUpperCase() : 'M'}
                </div>
                <div class="text-center sm:text-left flex-1 min-w-0">
                  <h2 class="text-xl sm:text-2xl font-bold bg-gradient-to-r from-amber-600 to-orange-600 bg-clip-text text-transparent mb-1 sm:mb-2 truncate">
                    ${mitra.namaMitra || 'Nama Mitra'}
                  </h2>
                  <p class="text-gray-600 text-sm sm:text-lg mb-2 sm:mb-3 break-all">${mitra.email || 'Email tidak tersedia'}</p>
                  <span class="status-badge-warning inline-flex items-center px-3 sm:px-4 py-1 sm:py-2 rounded-full text-amber-800 bg-amber-100 font-medium text-xs sm:text-sm">
                    ${requiresPayment ? 'Belum Lunas / DP' : (isPaidOff ? 'Lunas' : 'Belum Lunas')}
                  </span>
                </div>
              </div>
            </div>

            <!-- Payment Status Card -->
            <div class="modern-card rounded-xl shadow-xl p-4 sm:p-6 mb-4 sm:mb-6 bg-gradient-to-r from-gray-50 to-gray-100 border border-gray-200">
              <div class="mb-4 sm:mb-6">
                <h3 class="text-lg sm:text-xl font-bold text-gray-800 mb-3 sm:mb-4 flex items-center">
                  <svg class="w-5 h-5 sm:w-6 sm:h-6 mr-2 sm:mr-3 text-amber-600 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 7h6m0 10v-3m-3 3h.01M9 17h.01M9 14h.01M12 14h.01M15 11h.01M12 11h.01M9 11h.01M7 21h10a2 2 0 002-2V5a2 2 0 00-2-2H7a2 2 0 00-2 2v14a2 2 0 002 2z"></path>
                  </svg>
                  <span class="truncate">Detail Pembayaran</span>
                </h3>
                <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-3 sm:gap-6">
                  <div class="bg-gradient-to-r from-amber-500 to-orange-500 rounded-lg p-3 sm:p-4 shadow-md">
                    <p class="text-white text-opacity-90 text-xs sm:text-sm font-semibold mb-1">Harga Paket</p>
                    <p class="text-white text-lg sm:text-xl font-bold truncate">${mitra.hargaPaket ? formatCurrency(mitra.hargaPaket) : 'N/A'}</p>
                  </div>
                  <div class="bg-gradient-to-r from-blue-500 to-blue-600 rounded-lg p-3 sm:p-4 shadow-md">
                    <p class="text-white text-opacity-90 text-xs sm:text-sm font-semibold mb-1">Nominal DP</p>
                    <p class="text-white text-lg sm:text-xl font-bold truncate">${mitra.nominalDP ? formatCurrency(mitra.nominalDP) : 'N/A'}</p>
                  </div>
                  <div class="bg-gradient-to-r from-red-500 to-red-600 rounded-lg p-3 sm:p-4 shadow-md sm:col-span-2 lg:col-span-1">
                    <p class="text-white text-opacity-90 text-xs sm:text-sm font-semibold mb-1">Kekurangan</p>
                    <p class="text-white text-lg sm:text-xl font-bold truncate">${mitra.kekurangan ? formatCurrency(mitra.kekurangan) : 'N/A'}</p>
                  </div>
                </div>
              </div>
            </div>

            <!-- Action Card -->
            <div class="modern-card rounded-xl p-4 sm:p-8">
              <div class="flex flex-col lg:flex-row lg:items-center lg:justify-between gap-4 sm:gap-6">
                <div class="flex flex-col sm:flex-row items-start gap-3 sm:gap-4 flex-1">
                  <div class="w-10 h-10 sm:w-12 sm:h-12 rounded-full bg-red-100 flex items-center justify-center text-red-500 flex-shrink-0">
                    <svg class="w-5 h-5 sm:w-6 sm:h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                    </svg>
                  </div>
                  <div class="flex-1 min-w-0">
                    <h3 class="text-base sm:text-lg font-semibold text-gray-900 mb-1 sm:mb-2">Tindakan Diperlukan</h3>
                    <p class="text-gray-600 text-sm sm:text-base">Untuk melunasi kewajiban Anda, silakan klik tombol bayar di bawah ini.</p>
                  </div>
                </div>
                
                <div class="flex flex-col gap-3 sm:gap-4 w-full lg:w-auto">
                  <a 
                    id="btnBayarPelunasan" 
                    href="/user/form-pelunasan" 
                    class="btn-success inline-flex items-center px-6 sm:px-8 py-3 sm:py-4 text-black font-semibold rounded-xl shadow-lg transition-all duration-200 w-full lg:w-auto text-center justify-center"
                  >
                    <svg class="w-4 h-4 sm:w-5 sm:h-5 mr-2 sm:mr-3 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.25 18.75a60.07 60.07 0 0 1 15.797 2.101c.727.198 1.453-.342 1.453-1.096V18.75M3.75 4.5v.75A.75.75 0 0 1 3 6h-.75m0 0v-.375c0-.621.504-1.125 1.125-1.125H20.25M2.25 6v9m18-10.5v.75c0 .414.336.75.75.75h.75m-1.5-1.5h.375c.621 0 1.125.504 1.125 1.125v9.75c0 .621-.504 1.125-1.125 1.125h-.375m1.5-1.5H21a.75.75 0 0 0-.75.75v.75m0 0H3.75m0 0h-.375a1.125 1.125 0 0 1-1.125-1.125V15m1.5 1.5v-.75A.75.75 0 0 0 3 15h-.75M15 10.5a3 3 0 1 1-6 0 3 3 0 0 1 6 0Zm3 0h.008v.008H18V10.5Zm-12 0h.008v.008H6V10.5Z" ></path>
                    </svg>
                    <span class="truncate">Bayar Sekarang</span>
                  </a>
                  
                  <div id="notifPelunasan" class="hidden w-full lg:w-auto">
                    <div class="bg-white border-2 border-blue-200 rounded-xl p-3 sm:p-4 shadow-md">
                      <div class="flex flex-col sm:flex-row items-start sm:items-center text-blue-800 gap-2 sm:gap-3">
                        <svg class="w-5 h-5 text-blue-600 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01"></path>
                        </svg>
                        <div class="flex-1 min-w-0">
                          <p class="font-bold text-sm sm:text-base text-blue-900">Sedang Diproses</p>
                          <p class="text-xs sm:text-sm mt-1 text-blue-700">Form pelunasan Anda sedang diperiksa</p>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        `;
      } else {
        // Edge case: Neither paid off nor requiring payment UI
        console.warn('[DEBUG] Edge case: No matching UI condition', {
          shouldShowPaymentUI,
          isPaidOff,
          requiresPayment,
          mitra: mitra ? 'Present' : 'Missing'
        });
        
        // Show a fallback state
        container.innerHTML = `
          <div class="max-w-4xl mx-auto px-2 sm:px-0">
            <div class="modern-card rounded-xl p-4 sm:p-8 text-center">
              <div class="w-12 h-12 sm:w-16 sm:h-16 rounded-full bg-gray-100 flex items-center justify-center text-gray-500 mx-auto mb-3 sm:mb-4">
                <svg class="w-6 h-6 sm:w-8 sm:h-8" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8.228 9c.549-1.165 2.03-2 3.772-2 2.21 0 4 1.343 4 3 0 1.4-1.278 2.575-3.006 2.907-.542.104-.994.54-.994 1.093m0 3h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                </svg>
              </div>
              <h3 class="text-base sm:text-lg font-semibold text-gray-900 mb-2">Status Tidak Diketahui</h3>
              <p class="text-gray-600 mb-3 sm:mb-4 text-sm sm:text-base">
                Tidak dapat menentukan status pembayaran. Silakan hubungi admin untuk bantuan.
              </p>
              <div class="flex flex-col sm:flex-row gap-2 sm:gap-4 justify-center">
                <button onclick="window.location.reload()" class="btn-primary px-4 sm:px-6 py-2 sm:py-3 text-white font-semibold rounded-xl shadow-lg text-sm sm:text-base">
                  Muat Ulang
                </button>
                <a href="/user/dashboard" class="btn-success px-4 sm:px-6 py-2 sm:py-3 text-white font-semibold rounded-xl shadow-lg text-sm sm:text-base text-center">
                  Dashboard
                </a>
              </div>
            </div>
          </div>
        `;
      }
    } catch (err) {
      console.error('Critical rendering error:', err);
      console.error('Error details:', {
        message: err.message,
        stack: err.stack,
        mitra: mitra ? 'Present' : 'Missing',
        email: sessionData?.email
      });
      
      // Robust fallback UI
      container.innerHTML = `
        <div class="modern-card rounded-xl p-4 sm:p-8 text-center max-w-md mx-auto">
          <div class="w-12 h-12 sm:w-16 sm:h-16 rounded-full bg-red-100 flex items-center justify-center text-red-500 mx-auto mb-3 sm:mb-4">
            <svg class="w-6 h-6 sm:w-8 sm:h-8" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
            </svg>
          </div>
          <h3 class="text-base sm:text-lg font-semibold text-gray-900 mb-2">Terjadi Kesalahan</h3>
          <p class="text-red-600 mb-3 sm:mb-4 text-sm sm:text-base">
            Error saat memproses data mitra.<br>
            <small class="text-gray-500">${err.message}</small>
          </p>
          <div class="flex center sm:flex-row gap-2 sm:gap-4">
            <button onclick="window.location.reload()" class="border-t-orange-400 bg-amber-500 px-4 sm:px-6 py-2 sm:py-3 text-black font-semibold rounded-xl shadow-lg text-sm sm:text-base w-full sm:w-auto">
              Muat Ulang
            </button>
            <a href="/user/dashboard" class="btn-success px-4 sm:px-6 py-2 sm:py-3 text-black font-semibold rounded-xl shadow-lg text-sm sm:text-base w-full sm:w-auto text-center">
              Ke Dashboard
            </a>
          </div>
        </div>
      `;
    }

    // CRITICAL: Payment status checking - this determines what user sees
    try {
      const btnBayar = document.getElementById('btnBayarPelunasan');
      const notifPelunasan = document.getElementById('notifPelunasan');
      
      if (sessionData.email && btnBayar && notifPelunasan) {
        // Use ONLY cached data from API calls above, no localStorage fallback
        const pelunasanExists = (window.kewajibanData?.pelunasanExists === true);
        
        console.log('🎯 FINAL UI Decision:', {
          email: sessionData.email,
          apiCachedStatus: window.kewajibanData?.pelunasanExists,
          willShowPayButton: !pelunasanExists,
          willShowVerificationMessage: pelunasanExists,
          userHasSubmittedForm: pelunasanExists
        });
        
        if (pelunasanExists) {
          console.log('✅ User has submitted pelunasan form - showing WAITING FOR VERIFICATION');
          // Replace pay button with disabled state
          btnBayar.classList.remove('btn-success');
          btnBayar.classList.add('bg-gray-500', 'text-white', 'cursor-not-allowed');
          btnBayar.removeAttribute('href');
          btnBayar.setAttribute('disabled', 'true');
          btnBayar.innerHTML = `
            <svg class="w-4 h-4 sm:w-5 sm:h-5 mr-2 sm:mr-3 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
            </svg>
            <span class="truncate">Menunggu Verifikasi</span>
          `;
          notifPelunasan.classList.remove('hidden');
        } else {
          console.log('💳 User has NOT submitted pelunasan form - showing PAY NOW button');
          // Keep pay button active and hide verification message
          btnBayar.classList.remove('bg-gray-500', 'text-white', 'cursor-not-allowed');
          btnBayar.classList.add('btn-success');
          btnBayar.removeAttribute('disabled');
          btnBayar.setAttribute('href', '/user/form-pelunasan');
          btnBayar.innerHTML = `
            <svg class="w-4 h-4 sm:w-5 sm:h-5 mr-2 sm:mr-3 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1"></path>
            </svg>
            <span class="truncate">Bayar Sekarang</span>
          `;
          notifPelunasan.classList.add('hidden');
        }
      } else {
        console.warn('Pelunasan button elements not found or missing email');
      }
    } catch (pelunasanError) {
      console.error('Error in pelunasan status check:', pelunasanError);
    }
  });

  // Helper function to show notifications
  function showKewajibanNotification(message, type = 'success') {
    const notification = document.createElement('div');
    const bgColor = type === 'success' ? 'from-green-500 to-emerald-500' : 'from-red-500 to-rose-500';

    notification.className = `fixed top-4 right-4 bg-gradient-to-r ${bgColor} text-white px-6 py-4 rounded-xl shadow-xl z-50 transform transition-all duration-300 translate-x-full opacity-0`;
    notification.innerHTML = `
      <div class="flex items-center">
        <svg class="w-6 h-6 mr-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          ${type === 'success'
            ? '<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>'
            : '<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>'
          }
        </svg>
        <span class="font-medium">${message}</span>
      </div>
    `;

    document.body.appendChild(notification);

    setTimeout(() => {
      notification.classList.remove('translate-x-full', 'opacity-0');
    }, 100);

    setTimeout(() => {
      notification.classList.add('translate-x-full', 'opacity-0');
      setTimeout(() => {
        if (notification.parentNode) {
          notification.parentNode.removeChild(notification);
        }
      }, 300);
    }, 4000);
  }

  // Ensure functions are available globally for sidebar integration
  if (typeof window !== 'undefined') {
    window.updateDashboardMargin = updateDashboardMargin;
    window.initializeDashboardMargin = initializeDashboardMargin;
  }
</script>
