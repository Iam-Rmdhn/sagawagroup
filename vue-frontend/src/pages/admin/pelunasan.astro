
---
import Layout from '../../layouts/Layout.astro';
import AdminSidebar from '../../components/admin/sidebar/AdminSidebar.astro';
import AdminNavbar from '../../components/admin/navbar/AdminNavbar.astro';
---
<Layout title="Pelunasan Mitra">
	<style>
		/* Copy style dari dashboard.astro agar konsisten */
		* { transform: translateZ(0); will-change: auto; }
		*, *::before, *::after { -webkit-backface-visibility: hidden; backface-visibility: hidden; -webkit-perspective: 1000px; perspective: 1000px; }
		body, html { overflow-x: hidden; scroll-behavior: smooth; -webkit-overflow-scrolling: touch; }
		::-webkit-scrollbar { width: 8px; height: 8px; }
		::-webkit-scrollbar-track { background: rgba(251, 191, 36, 0.1); border-radius: 4px; }
		::-webkit-scrollbar-thumb { background: linear-gradient(135deg, rgb(245 158 11), rgb(251 191 36)); border-radius: 4px; transition: all 0.3s ease; }
		::-webkit-scrollbar-thumb:hover { background: linear-gradient(135deg, rgb(251 191 36), rgb(252 211 77)); transform: scale(1.1); }
		* { scrollbar-width: thin; scrollbar-color: rgb(245 158 11) rgba(251, 191, 36, 0.1); }
		img, video, iframe { height: auto; max-width: 100%; }
		.fixed, .sticky { transform: translate3d(0, 0, 0); -webkit-backface-visibility: hidden; backface-visibility: hidden; }
				/* Ensure logout button is always clickable */
		#logout-btn {
			pointer-events: auto !important;
			cursor: pointer !important;
		}
		
		#logout-btn:disabled {
			pointer-events: auto !important;
			cursor: pointer !important;
			opacity: 1 !important;
		}
		.modern-table { background: linear-gradient(135deg, rgba(255, 255, 255, 0.98) 0%, rgba(251, 191, 36, 0.02) 100%); backdrop-filter: blur(12px); border: 1px solid rgba(251, 191, 36, 0.1); transform: translate3d(0, 0, 0); -webkit-backface-visibility: hidden; backface-visibility: hidden; position: relative; }
		.loading-pulse { animation: pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite; }
		@keyframes pulse { 0%, 100% { opacity: 1; } 50% { opacity: 0.5; } }
		
		/* Dashboard responsive layout - Copy exact from dashboard.astro */
		.dashboard-bg {
			/* No margin-left needed - sidebar handles its own positioning */
		}
		
		/* Mobile specific layout improvements */
		@media (max-width: 480px) {
			.dashboard-bg {
				padding: 0.5rem !important;
			}
			.dashboard-bg > div {
				padding: 1rem !important;
				margin-top: 4rem !important;
			}
			/* Header adjustments */
			.mb-8 {
				margin-bottom: 1.5rem !important;
			}
			.bg-gradient-to-r {
				padding: 1rem !important;
			}
			.text-2xl {
				font-size: 1.25rem !important;
			}
			.w-12 {
				width: 2.5rem !important;
				height: 2.5rem !important;
			}
		}

		/* Mobile-specific enhancements - completely redesigned */
		@media (max-width: 640px) {
			.modern-table { 
				margin: 0; 
				border-radius: 1rem; 
				overflow: hidden;
			}
			.modern-table .overflow-x-auto {
				overflow-x: auto;
				-webkit-overflow-scrolling: touch;
			}
			.modern-table table { 
				font-size: 0.75rem;
				min-width: 600px; /* Ensure table has minimum width to prevent header cutoff */
				width: 100%;
			}
			.modern-table th, .modern-table td { 
				padding: 0.5rem !important;
				vertical-align: top;
				word-wrap: break-word;
				white-space: nowrap; /* Prevent text wrapping in headers */
			}
			
			/* Hide less important columns on mobile for better readability */
			.modern-table th:nth-child(2), /* Email */
			.modern-table td:nth-child(2),
			.modern-table th:nth-child(3), /* No HP */
			.modern-table td:nth-child(3),
			.modern-table th:nth-child(4), /* Paket Usaha */
			.modern-table td:nth-child(4) { 
				display: none; 
			}
			
			/* Adjust remaining column widths - fixed widths for proper header alignment */
			.modern-table th:nth-child(1), /* Nama Mitra */
			.modern-table td:nth-child(1) { 
				width: 180px; 
				min-width: 180px;
			}
			.modern-table th:nth-child(5), /* Nominal */
			.modern-table td:nth-child(5) { 
				width: 150px; 
				min-width: 150px;
				text-align: right;
			}
			.modern-table th:nth-child(6), /* Status */
			.modern-table td:nth-child(6) { 
				width: 120px; 
				min-width: 120px;
				text-align: center;
			}
			.modern-table th:nth-child(7), /* Actions */
			.modern-table td:nth-child(7) { 
				width: 150px; 
				min-width: 150px;
				text-align: center;
			}
			
			/* Action buttons - icon only on mobile */
			.modern-table .btn-text {
				display: none !important;
			}
			.modern-table button {
				padding: 0.5rem !important;
				margin: 0.125rem !important;
				min-width: 32px !important;
				width: auto !important;
				height: 32px !important;
				border-radius: 0.375rem !important;
				display: inline-flex !important;
				align-items: center !important;
				justify-content: center !important;
			}
			.modern-table button svg {
				width: 14px !important;
				height: 14px !important;
				margin: 0 !important;
			}
			
			/* Status badge adjustments */
			.modern-table .status-badge {
				font-size: 0.625rem !important;
				padding: 0.25rem 0.5rem !important;
			}
			
			/* Ensure table header doesn't get cut off */
			.modern-table thead {
				position: sticky;
				top: 0;
				z-index: 10;
			}
			
			/* Make sure table container has proper scrolling */
			.modern-table .overflow-x-auto {
				position: relative;
			}
		}
		
		@media (max-width: 1024px) and (min-width: 641px) {
			/* Tablet adjustments - show more columns but keep icon-only buttons */
			.modern-table table { 
				min-width: 800px; /* Ensure adequate width for tablet */
			}
			.modern-table th:nth-child(2), 
			.modern-table td:nth-child(2),
			.modern-table th:nth-child(3), 
			.modern-table td:nth-child(3) { 
				display: table-cell; 
			}
			
			/* Action buttons - icon only on tablet too */
			.modern-table .btn-text {
				display: none !important;
			}
			.modern-table button {
				padding: 0.5rem !important;
				margin: 0.125rem !important;
				min-width: 36px !important;
				width: auto !important;
				height: 36px !important;
				border-radius: 0.5rem !important;
				display: inline-flex !important;
				align-items: center !important;
				justify-content: center !important;
			}
			.modern-table button svg {
				width: 16px !important;
				height: 16px !important;
				margin: 0 !important;
			}
		}
		
		/* Touch-friendly interactions */
		@media (pointer: coarse) {
			button { min-height: 44px; min-width: 44px; }
			.modern-table button { min-height: 36px; }
		}
		
		/* Image Modal Styles */
		#imageModal {
			backdrop-filter: blur(2px);
			-webkit-backdrop-filter: blur(2px);
		}
		
		#imageModal img {
			max-width: 95vw;
			max-height: 95vh;
			box-shadow: 0 25px 50px -12px rgba(0, 0, 0, 0.5);
		}
		
		/* Ensure modal stacking order */
		.z-\[100\] {
			z-index: 100 !important;
		}
		
		.z-\[110\] {
			z-index: 110 !important;
		}

		/* Sidebar behavior consistent with dashboard */
		
		/* Stats cards styling */
		.stats-card {
			background: linear-gradient(135deg, rgba(255, 255, 255, 0.95) 0%, rgba(251, 191, 36, 0.05) 100%);
			backdrop-filter: blur(10px);
			border: 1px solid rgba(251, 191, 36, 0.1);
			transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
			transform: translate3d(0, 0, 0);
			-webkit-backface-visibility: hidden;
			backface-visibility: hidden;
			position: relative;
		}
		
		.stats-card:hover {
			transform: translate3d(0, -4px, 0);
			box-shadow: 0 20px 25px -5px rgba(251, 191, 36, 0.1), 0 10px 10px -5px rgba(251, 191, 36, 0.04);
			border-color: rgba(251, 191, 36, 0.2);
		}
		
		/* Stats icon styling */
		.stats-icon {
			background: linear-gradient(135deg, rgb(245 158 11), rgb(249 115 22));
			transform: translate3d(0, 0, 0);
			-webkit-backface-visibility: hidden;
			backface-visibility: hidden;
		}
		
		/* Chart container styling */
		.chart-container {
			background: linear-gradient(135deg, rgba(255, 255, 255, 0.98) 0%, rgba(251, 191, 36, 0.02) 100%);
			backdrop-filter: blur(12px);
			border: 1px solid rgba(251, 191, 36, 0.1);
			transform: translate3d(0, 0, 0);
			-webkit-backface-visibility: hidden;
			backface-visibility: hidden;
			position: relative;
		}
		
		/* Responsive grid */
		.stats-grid {
			display: grid;
			grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
			gap: 1.5rem;
		}
		
		/* Mobile First Responsive Design */
		@media (max-width: 480px) {
			/* Extra small devices */
			.stats-grid {
				grid-template-columns: 1fr;
				gap: 0.75rem;
			}
			.stats-card {
				padding: 1rem !important;
			}
			.stats-card .text-3xl {
				font-size: 1.875rem !important;
			}
			.chart-container {
				height: auto !important;
				min-height: 250px !important;
			}
			.chart-container .p-6 {
				padding: 1rem !important;
			}
			.chart-container .grid {
				grid-template-columns: 1fr !important;
				gap: 0.5rem !important;
			}
			.chart-container canvas {
				max-width: 180px !important;
				max-height: 180px !important;
				width: 180px !important;
				height: 180px !important;
			}
			/* Hide statistics on mobile - only show chart */
			.mobile-stats {
				display: none !important;
			}
			/* Center chart on mobile */
			.chart-container .grid > div:first-child {
				order: 1;
				display: flex;
				justify-content: center;
				align-items: center;
			}
		}
		
		/* Consolidated with other mobile styles above - no duplication needed */
		
		@media (min-width: 641px) and (max-width: 1024px) {
			/* Tablet layout - same as desktop but smaller sizes */
			.stats-grid {
				grid-template-columns: repeat(auto-fit, minmax(220px, 1fr));
				gap: 1rem;
			}
			.stats-card {
				padding: 1.25rem !important;
			}
			.stats-card .text-3xl {
				font-size: 1.75rem !important;
			}
			.chart-container {
				height: auto !important;
				min-height: 400px !important;
			}
			.chart-container .p-6 {
				padding: 1.25rem !important;
			}
			/* Keep desktop layout but adjust chart size */
			.chart-container .grid {
				grid-template-columns: 1fr 1fr;
				gap: 1.25rem;
			}
			.chart-container canvas {
				max-width: 280px !important;
				max-height: 280px !important;
				width: 280px !important;
				height: 280px !important;
			}
			/* Show statistics on tablet like desktop */
			.mobile-stats {
				display: flex !important;
				flex-direction: column !important;
				gap: 1rem !important;
			}
			.mobile-stats > div {
				flex: none !important;
			}
		}
	</style>
	<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
	<script>
		// Cek login admin
		if (typeof window !== 'undefined') {
			const token = localStorage.getItem('adminToken');
			const user = localStorage.getItem('adminUser');
			if (!token || !user) window.location.href = '/login';
		}
	</script>
	<AdminNavbar />
	<AdminSidebar currentPage="pelunasan" />
	<div class="dashboard-bg min-h-screen p-4 transition-all duration-300" style="transform: translate3d(0, 0, 0); -webkit-backface-visibility: hidden; backface-visibility: hidden;">
		<div class="p-6 mt-16" style="transform: translate3d(0, 0, 0); -webkit-backface-visibility: hidden; backface-visibility: hidden;">
			<!-- Welcome Header -->
			<div class="mb-6 sm:mb-8 pt-3">
				<div class="bg-gradient-to-r from-green-700 to-green-900 rounded-2xl p-6 text-green-50 shadow-2xl">
					<div class="flex items-center space-x-4">
						<svg class="w-12 h-12 mr-2"width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-banknote-arrow-up-icon lucide-banknote-arrow-up"><path d="M12 18H4a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h16a2 2 0 0 1 2 2v5"/><path d="M18 12h.01"/><path d="M19 22v-6"/><path d="m22 19-3-3-3 3"/><path d="M6 12h.01"/><circle cx="12" cy="12" r="2"/></svg>
						<div>
							<h1 class="text-2xl font-bold">Pelunasan Mitra</h1>
							<p class="text-green-100">Daftar pelunasan mitra franchise</p>
						</div>
					</div>
				</div>
			</div>
			
			<!-- Chart Section - Improved Layout -->
			<div class="chart-container rounded-xl sm:rounded-2xl shadow-2xl overflow-hidden mb-6 sm:mb-8">
				<div class="bg-gradient-to-r from-white to-orange-50/30 px-4 py-4 sm:px-6 sm:py-5 border-b border-orange-200/50">
					<div class="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-2 sm:gap-4">
						<div>
							<h3 class="text-lg sm:text-xl font-bold text-gray-900">Statistik Pelunasan</h3>
							<p class="text-xs sm:text-sm text-gray-600 mt-1">Visualisasi data pelunasan dan pendapatan mitra</p>
						</div>
					</div>
				</div>
				<div class="p-4 sm:p-6">
					<div class="grid grid-cols-1 lg:grid-cols-5 gap-4 sm:gap-6">
						<!-- Chart - 2 columns on desktop -->
						<div class="flex items-center justify-center lg:col-span-2">
							<div class="w-full flex justify-center">
								<canvas id="pelunasanChart" class="max-w-full"></canvas>
							</div>
						</div>
						<!-- Stats and Summary - 3 columns on desktop -->
						<div class="flex flex-col justify-center space-y-3 sm:space-y-4 lg:col-span-3">
							<!-- Total Revenue Card - Featured -->
							<div class="bg-gradient-to-br from-green-500 to-emerald-600 p-4 sm:p-6 rounded-xl border-2 border-green-400 shadow-lg">
								<div class="flex items-center justify-between mb-2">
									<div class="flex items-center">
										<div class="w-10 h-10 sm:w-12 sm:h-12 flex items-center justify-center mr-3">
											<svg class="w-10 h-10 mr-1 text-white" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-wallet-icon lucide-wallet"><path d="M19 7V4a1 1 0 0 0-1-1H5a2 2 0 0 0 0 4h15a1 1 0 0 1 1 1v4h-3a2 2 0 0 0 0 4h3a1 1 0 0 0 1-1v-2a1 1 0 0 0-1-1"/><path d="M3 5v14a2 2 0 0 0 2 2h15a1 1 0 0 0 1-1v-4"/></svg>
										</div>
										<div>
											<p class="text-xs sm:text-sm font-medium text-white text-opacity-90">Total Pendapatan Pelunasan</p>
											<p class="text-2xl sm:text-3xl font-bold text-white" id="total-revenue">Rp 0</p>
										</div>
									</div>
								</div>
								<p class="text-xs text-white text-opacity-80 mt-2">Dari mitra yang telah melunasi pembayaran</p>
							</div>
							
							<!-- Stats Grid -->
							<div class="grid grid-cols-2 gap-3 sm:gap-4">
								<div class="bg-green-50 p-3 sm:p-4 rounded-lg border border-green-200">
									<div class="flex items-center">
										<div class="flex items-center justify-between mr-4">
											<div class="w-8 h-8 flex items-center justify-center">
												<svg class="w-8 h-8 text-green-600" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-user-check-icon lucide-user-check"><path d="m16 11 2 2 4-4"/><path d="M16 21v-2a4 4 0 0 0-4-4H6a4 4 0 0 0-4 4v2"/><circle cx="9" cy="7" r="4"/></svg>
											</div>
										</div>
										<div>
											<p class="text-xs sm:text-sm font-medium text-gray-600">Mitra Lunas</p>
											<p class="text-xl sm:text-2xl font-bold text-green-600" id="chart-lunas">-</p>
											<p class="text-xs text-gray-500 mt-1">Sudah disetujui</p>
										</div>
									</div>
								</div>
								
								<div class="bg-red-50 p-3 sm:p-4 rounded-lg border border-red-200">
									<div class="flex items-center">
										<div class="flex items-center justify-between mr-2">
											<div class="w-8 h-8 flex items-center justify-center">
												<svg class="w-8 h-8 text-red-500" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-hourglass-icon lucide-hourglass"><path d="M5 22h14"/><path d="M5 2h14"/><path d="M17 22v-4.172a2 2 0 0 0-.586-1.414L12 12l-4.414 4.414A2 2 0 0 0 7 17.828V22"/><path d="M7 2v4.172a2 2 0 0 0 .586 1.414L12 12l4.414-4.414A2 2 0 0 0 17 6.172V2"/></svg>
											</div>
										</div>
										<div>
											<p class="text-xs sm:text-sm font-medium text-gray-600">Pending Approve</p>
											<p class="text-xl sm:text-2xl font-bold text-red-600" id="chart-pending">-</p>
											<p class="text-xs text-gray-500 mt-1">Menunggu approve</p>
										</div>
									</div>
								</div>
								
								<div class="bg-amber-50 p-3 sm:p-4 rounded-lg border border-amber-200 col-span-2">
									<div class="flex items-center justify-between">
										<div class="flex items-center">
											<div class="w-8 h-8 flex items-center justify-center mr-3">
												<svg class="w-8 h-8 text-amber-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
													<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z"/>
												</svg>
											</div>
											<div>
												<p class="text-xs sm:text-sm font-medium text-gray-600">Total Mitra</p>
												<p class="text-xl sm:text-2xl font-bold text-amber-600" id="chart-total">-</p>
											</div>
										</div>
									</div>
								</div>
							</div>
						</div>
					</div>
				</div>
			</div>
			
			<div class="modern-table rounded-2xl shadow-2xl overflow-hidden">
				<div class="bg-gradient-to-r from-white to-orange-50/30 px-6 py-5 border-b border-orange-200/50">
					<div class="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4">
						<div>
							<h3 class="text-xl font-bold text-gray-900">Pelunasan Mitra</h3>
							<p class="text-sm text-gray-600 mt-1">Kelola data pelunasan mitra</p>
						</div>
						<button id="refresh-btn" class="inline-flex items-center px-4 py-2 bg-gradient-to-r from-amber-500 to-orange-600 text-white font-medium rounded-xl hover:from-amber-600 hover:to-orange-700 focus:outline-none focus:ring-2 focus:ring-amber-500 focus:ring-offset-2 transition-all duration-200 shadow-lg hover:shadow-xl">
							<svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path></svg>
							Refresh Data
						</button>
					</div>
				</div>
				<div class="overflow-x-auto">
					<table class="w-full text-sm text-left">
						<thead class="text-xs text-gray-700 uppercase bg-gradient-to-r from-orange-50 to-amber-50 border-b border-orange-200/50">
							<tr>
								<th class="px-6 py-4 font-semibold">Nama Mitra</th>
								<th class="px-6 py-4 font-semibold">Email</th>
								<th class="px-6 py-4 font-semibold">No HP</th>
								<th class="px-6 py-4 font-semibold">Paket Usaha</th>
								<th class="px-6 py-4 font-semibold text-right">Nominal Pelunasan</th>
								<th class="px-6 py-4 font-semibold text-center">Status</th>
								<th class="px-6 py-4 font-semibold text-center">Actions</th>
							</tr>
						</thead>
						<tbody id="pelunasan-table-body" class="divide-y divide-gray-100">
							<tr>
								<td colspan="7" class="px-6 py-8 text-center">
									<div class="flex items-center justify-center">
										<div class="loading-pulse">
											<svg class="animate-spin -ml-1 mr-3 h-5 w-5 text-amber-500" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24"><circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle><path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path></svg>
											Memuat data...
										</div>
									</div>
								</td>
							</tr>
						</tbody>
					</table>
				</div>
			</div>
		</div>
	</div>
	<!-- Modal untuk Detail Pelunasan Mitra -->
	<div id="pelunasanDetailModal" class="hidden fixed inset-0 z-50 overflow-y-auto" style="transform: translate3d(0, 0, 0); -webkit-backface-visibility: hidden; backface-visibility: hidden;">
		<div class="flex items-end justify-center min-h-screen px-2 pt-4 pb-4 text-center sm:block sm:p-0 sm:items-center">
			<div class="fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity" onclick="closePelunasanDetailModal()" style="transform: translate3d(0, 0, 0); -webkit-backface-visibility: hidden; backface-visibility: hidden;"></div>
			<!-- Mobile: Full screen modal, Desktop: Max width modal -->
			<div class="inline-block align-bottom bg-white rounded-t-2xl sm:rounded-lg text-left overflow-hidden shadow-xl transform transition-all w-full sm:my-8 sm:align-middle sm:max-w-4xl sm:w-full max-h-[90vh] sm:max-h-[80vh]" style="transform: translate3d(0, 0, 0); -webkit-backface-visibility: hidden; backface-visibility: hidden;">
				<div class="bg-white px-3 pt-4 pb-4 sm:px-6 sm:pt-5 sm:pb-4 max-h-[90vh] sm:max-h-[80vh] overflow-y-auto">
					<!-- Header with better mobile spacing -->
					<div class="flex justify-between items-start mb-4 sticky top-0 bg-white pb-2 border-b border-gray-100 sm:border-none sm:pb-4">
						<h3 class="text-lg sm:text-xl leading-6 font-semibold text-gray-900 pr-4">Detail Pelunasan Mitra</h3>
						<button onclick="closePelunasanDetailModal()" class="flex-shrink-0 p-1 text-gray-400 hover:text-gray-600 hover:bg-gray-100 rounded-full transition-all">
							<svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path></svg>
						</button>
					</div>
					<!-- Content area with better mobile layout -->
					<div id="pelunasanDetailContent" class="grid grid-cols-1 lg:grid-cols-2 gap-4 sm:gap-6"></div>
					<!-- Footer buttons with mobile-friendly layout -->
					<div class="mt-6 pt-4 border-t border-gray-100 flex justify-end space-x-3 sticky bottom-0 bg-white">
						<button onclick="closePelunasanDetailModal()" class="px-4 py-2 bg-gradient-to-r from-gray-500 to-gray-600 text-white rounded-lg hover:from-gray-600 hover:to-gray-700 transition-all font-medium shadow-sm">Tutup</button>
					</div>
				</div>
			</div>
		</div>
	</div>

	<!-- Image Modal untuk memperbesar gambar -->
	<div id="imageModal" class="hidden fixed inset-0 z-[100] bg-black bg-opacity-90 p-4" style="transform: translate3d(0, 0, 0); -webkit-backface-visibility: hidden; backface-visibility: hidden;">
		<div class="relative max-w-6xl max-h-full flex items-center justify-center w-full h-full">
			<button onclick="closeImageModal()" class="absolute -top-12 right-0 text-white hover:text-gray-300 z-[110] bg-black bg-opacity-50 rounded-full p-2 transition-all hover:bg-opacity-70">
				<svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
					<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
				</svg>
			</button>
			<img id="modalImage" src="" alt="Bukti Transfer" class="max-w-full max-h-full object-contain rounded-lg shadow-2xl" style="transform: translate3d(0, 0, 0); -webkit-backface-visibility: hidden; backface-visibility: hidden;">
		</div>
	</div>

	<script>
		const API_URL = import.meta.env.PUBLIC_API_URL || 'http://localhost:3000';
		
		// Chart instance
		let pelunasanChart: any = null;
		
		// Handle token expiration
		function handleTokenExpiration(): void {
			console.log('Token expired, redirecting to login...');
			localStorage.removeItem('adminToken');
			localStorage.removeItem('adminUser');
			
			// Show notification before redirect
			import('sweetalert2').then(Swal => {
				Swal.default.fire({
					title: "Sesi Berakhir",
					text: "Sesi login Anda telah berakhir. Silakan login kembali.",
					icon: "warning",
					confirmButtonText: "Login",
					allowOutsideClick: false,
					allowEscapeKey: false
				}).then(() => {
					window.location.href = '/admin/login';
				});
			}).catch(() => {
				// Fallback if sweetalert2 fails to load
				alert('Sesi login Anda telah berakhir. Silakan login kembali.');
				window.location.href = '/admin/login';
			});
		}
		
		// Listen for navbar actions
		document.addEventListener('adminNavbarAction', function(event: Event) {
			const customEvent = event as CustomEvent;
			const action = customEvent.detail.action;
			
			if (action === 'logout') {
				localStorage.removeItem('adminToken');
				localStorage.removeItem('adminUser');
				window.location.href = '/admin/login';
			}
		});
		async function loadPelunasanData(): Promise<void> {
			const tableBody = document.getElementById('pelunasan-table-body');
			const token = localStorage.getItem('adminToken');
			if (!token || !tableBody) {
				console.error('Missing token or table body element');
				return;
			}
			
			try {
				console.log('Loading pelunasan data...');
				console.log('API_URL:', API_URL);
				console.log('Token exists:', !!token);
				
				tableBody.innerHTML = '<tr><td colspan="7" class="px-6 py-4 text-center text-gray-500">Loading...</td></tr>';
				
				// Add cache-busting parameter to prevent caching issues
				const cacheBuster = new Date().getTime();
				console.log('Fetching from:', `${API_URL}/api/admin/mitra_pelunasan?t=${cacheBuster}`);
				
				const response = await fetch(`${API_URL}/api/admin/mitra_pelunasan?t=${cacheBuster}`, {
					method: 'GET',
					headers: { 
						'Authorization': `Bearer ${token}`, 
						'Content-Type': 'application/json',
						'Cache-Control': 'no-cache, no-store, must-revalidate',
						'Pragma': 'no-cache',
						'Expires': '0'
					},
				});
				
				console.log('Response status:', response.status);
				console.log('Response ok:', response.ok);
				
				if (!response.ok) {
					// Handle authentication errors (token expired)
					if (response.status === 401 || response.status === 403) {
						console.error('Authentication failed - token expired');
						handleTokenExpiration();
						return;
					}
					
					const errorText = await response.text();
					console.error('Response error:', errorText);
					throw new Error(`HTTP ${response.status}: ${errorText}`);
				}
				
			const result = await response.json();
			console.log('Pelunasan data loaded:', result);
			
			if (result.success && result.data) {
				const pelunasans = result.data;
				console.log('Number of pelunasan records:', pelunasans.length);
				
				// Update stats
				updateStats(pelunasans);
				
				// Update chart
				updateChart(pelunasans);
				
				if (pelunasans.length === 0) {
						tableBody.innerHTML = `<tr><td colspan="7" class="px-6 py-12 text-center text-gray-500">Tidak ada data pelunasan</td></tr>`;
						return;
					}
					let tableHTML = '';
					pelunasans.forEach((item: any, idx: number) => {
						console.log(`Processing item ${idx + 1}:`, { 
							namaMitra: item.namaMitra, 
							statusPelunasan: item.statusPelunasan,
							updatedAt: item.updatedAt
						});
						
						const statusColor = item.statusPelunasan === 'lunas' ? 'bg-green-100 text-green-800 border-green-200' : 'bg-yellow-100 text-yellow-800 border-yellow-200';
						tableHTML += `
							<tr class="bg-white hover:bg-gradient-to-r hover:from-orange-50/30 hover:to-amber-50/30 transition-all duration-200 ${idx % 2 === 0 ? 'bg-gray-50/30' : ''}">
								<th class="px-6 py-4 font-semibold text-gray-900">${item.namaMitra || 'N/A'}</th>
								<td class="px-6 py-4 text-gray-700">${item.email || 'N/A'}</td>
								<td class="px-6 py-4 text-gray-700">${item.noHp || 'N/A'}</td>
								<td class="px-6 py-4">${item.paketUsaha || 'N/A'}</td>
								<td class="px-6 py-4 text-right">${item.nominalPelunasan ? formatCurrency(item.nominalPelunasan) : 'N/A'}</td>
								<td class="px-6 py-4 text-center"><span class="status-badge inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-semibold border ${statusColor}">${item.statusPelunasan || 'belum'}</span></td>
								<td class="px-6 py-4 text-center">
								<button onclick="showPelunasanDetail('${item._id}')" class="inline-flex items-center px-3 py-1.5 bg-gradient-to-r from-blue-500 to-blue-600 text-white text-xs font-medium rounded-lg hover:from-blue-600 hover:to-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-1 transition-all duration-200 shadow-sm hover:shadow-md mr-2" title="Lihat Detail">
									<svg class="w-3 h-3 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"></path></svg><span class="btn-text">Detail</span>
								</button>
								${item.statusPelunasan === 'lunas' ? 
									`<button disabled class="inline-flex items-center px-3 py-1.5 bg-gray-400 text-gray-200 text-xs font-medium rounded-lg cursor-not-allowed opacity-60 mr-2" title="Sudah Lunas">
										<svg class="w-3 h-3 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" /></svg><span class="btn-text">Sudah Lunas</span>
									</button>
									<button onclick="deletePelunasan('${item._id}', '${item.namaMitra}')" class="inline-flex items-center px-3 py-1.5 bg-gradient-to-r from-red-500 to-red-600 text-white text-xs font-medium rounded-lg hover:from-red-600 hover:to-red-700 focus:outline-none focus:ring-2 focus:ring-red-500 focus:ring-offset-1 transition-all duration-200 shadow-sm hover:shadow-md" title="Hapus">
										<svg class="w-3 h-3 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path></svg><span class="btn-text">Hapus</span>
									</button>` :
									`<button onclick="approvePelunasan('${item.namaMitra}')" class="inline-flex items-center px-3 py-1.5 bg-gradient-to-r from-green-500 to-green-600 text-white text-xs font-medium rounded-lg hover:from-green-600 hover:to-green-700 focus:outline-none focus:ring-2 focus:ring-green-500 focus:ring-offset-1 transition-all duration-200 shadow-sm hover:shadow-md mr-2" title="Approve">
										<svg class="w-3 h-3 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" /></svg><span class="btn-text">Approve</span>
									</button>`
								}
								</td>
							</tr>
						`;
					});
					console.log('Final table HTML length:', tableHTML.length);
					
					// Force DOM update
					tableBody.innerHTML = tableHTML;
					
					// Force browser reflow/repaint
					tableBody.offsetHeight;
					
				} else {
					console.error('Load data failed:', result);
					tableBody.innerHTML = '<tr><td colspan="7" class="px-6 py-4 text-center text-red-500">Error loading data</td></tr>';
				}
					} catch (error) {
						const err = error as any;
						console.error('Load pelunasan data error:', err);
						
						// Check if error is related to token expiration
						if (err.message && (err.message.includes('jwt expired') || err.message.includes('Invalid token'))) {
							handleTokenExpiration();
							return;
						}
						
						tableBody.innerHTML = `<tr><td colspan="7" class="px-6 py-4 text-center text-red-500">Error: ${err.message || err}</td></tr>`;
					}
		}
		
		function updateStats(pelunasans: any[]): void {
			const lunas = pelunasans.filter(p => p.statusPelunasan === 'lunas').length;
			const pending = pelunasans.filter(p => p.statusPelunasan !== 'lunas').length;
			
			// Calculate total revenue from lunas only - with proper number parsing
			const totalRevenue = pelunasans
				.filter(p => p.statusPelunasan === 'lunas')
				.reduce((sum, p) => {
					// Parse nominal to number, handle string or number format
					let nominal = 0;
					if (p.nominalPelunasan) {
						// If it's already a number, use it
						if (typeof p.nominalPelunasan === 'number') {
							nominal = p.nominalPelunasan;
						} 
						// If it's a string, parse it
						else if (typeof p.nominalPelunasan === 'string') {
							// Remove any non-digit characters except dot and comma
							const cleaned = p.nominalPelunasan.replace(/[^\d.,]/g, '');
							nominal = parseFloat(cleaned.replace(/,/g, '')) || 0;
						}
					}
					console.log('Mitra:', p.namaMitra, 'Nominal:', nominal, 'Original:', p.nominalPelunasan);
					return sum + nominal;
				}, 0);
			
			console.log('Total Revenue Calculated:', totalRevenue);
			
			// Update revenue display
			const totalRevenueEl = document.getElementById('total-revenue');
			if (totalRevenueEl) {
				totalRevenueEl.textContent = formatCurrency(totalRevenue);
			}
			
			// Update chart legend
			const chartLunas = document.getElementById('chart-lunas');
			const chartPending = document.getElementById('chart-pending');
			const chartTotal = document.getElementById('chart-total');
			
			if (chartLunas) chartLunas.textContent = lunas.toString();
			if (chartPending) chartPending.textContent = pending.toString();
			if (chartTotal) chartTotal.textContent = pelunasans.length.toString();
		}
		
		function updateChart(pelunasans: any[]): void {
			const lunas = pelunasans.filter(p => p.statusPelunasan === 'lunas').length;
			const pending = pelunasans.filter(p => p.statusPelunasan !== 'lunas').length;
			
			const ctx = document.getElementById('pelunasanChart') as HTMLCanvasElement;
			if (!ctx) return;
			
			// Destroy existing chart if exists
			if (pelunasanChart) {
				pelunasanChart.destroy();
			}
			
			// Set responsive canvas size based on breakpoints
			let chartSize = 300; // Default desktop size
			
			if (window.innerWidth <= 480) {
				chartSize = 180; // Extra small mobile
			} else if (window.innerWidth <= 640) {
				chartSize = 220; // Small mobile
			} else if (window.innerWidth <= 1024) {
				chartSize = 280; // Tablet
			}
			
			ctx.width = chartSize;
			ctx.height = chartSize;
			ctx.style.maxWidth = chartSize + 'px';
			ctx.style.maxHeight = chartSize + 'px';
			
			// Create new donut chart
			pelunasanChart = new (window as any).Chart(ctx, {
				type: 'doughnut',
				data: {
					labels: ['Mitra Lunas', 'Pending Approve'],
					datasets: [{
						data: [lunas, pending],
						backgroundColor: [
							'#22C55E', // Green for lunas
							'#EAB308'  // Yellow for pending
						],
						borderColor: [
							'#FFFFFF',
							'#FFFFFF'
						],
						borderWidth: 3,
						hoverBackgroundColor: [
							'#16A34A',
							'#CA8A04'
						],
						hoverBorderColor: '#FFFFFF',
						hoverBorderWidth: 4
					}]
				},
				options: {
					responsive: true,
					maintainAspectRatio: true,
					cutout: '60%', // Makes it a donut chart
					plugins: {
						legend: {
							display: false // We'll use custom legend
						},
						tooltip: {
							backgroundColor: 'rgba(0, 0, 0, 0.8)',
							titleColor: '#FFFFFF',
							bodyColor: '#FFFFFF',
							borderColor: 'rgba(251, 191, 36, 0.3)',
							borderWidth: 1,
							cornerRadius: 8,
							padding: 12,
							displayColors: true,
							callbacks: {
								label: function(context: any) {
									const total = context.dataset.data.reduce((a: number, b: number) => a + b, 0);
									const percentage = ((context.parsed * 100) / total).toFixed(1);
									return `${context.label}: ${context.parsed} mitra (${percentage}%)`;
								}
							}
						}
					},
					animation: {
						animateRotate: true,
						animateScale: true,
						duration: 1000,
						easing: 'easeOutCubic'
					}
				}
			});
		}
		
		async function showPelunasanDetail(id: string): Promise<void> {
			const token = localStorage.getItem('adminToken');
			const modal = document.getElementById('pelunasanDetailModal');
			const content = document.getElementById('pelunasanDetailContent');
			if (!token || !modal || !content) return;
			try {
				modal.classList.remove('hidden');
				content.innerHTML = '<div class="col-span-2 text-center">Loading...</div>';
				const response = await fetch(`${API_URL}/api/admin/mitra_pelunasan`, { method: 'GET', headers: { 'Authorization': `Bearer ${token}`, 'Content-Type': 'application/json' } });
				
				// Handle authentication errors
				if (!response.ok && (response.status === 401 || response.status === 403)) {
					modal.classList.add('hidden');
					handleTokenExpiration();
					return;
				}
				
				const result = await response.json();
				if (result.success && result.data) {
					  const pelunasan = result.data.find((x: any) => x._id === id);
					if (!pelunasan) { content.innerHTML = '<div class="col-span-2 text-center text-red-500">Data tidak ditemukan</div>'; return; }
					content.innerHTML = `
						<div class="bg-gradient-to-r from-orange-50 to-amber-50 p-3 sm:p-4 rounded-lg border border-orange-200/50">
							<h4 class="font-semibold text-gray-900 mb-3 text-base sm:text-lg flex items-center">
								<svg class="w-5 h-5 mr-2 text-orange-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
									<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
								</svg>
								Data Mitra
							</h4>
							<div class="space-y-3">
								<div class="flex flex-col sm:flex-row sm:justify-between">
									<span class="text-sm font-medium text-gray-600 mb-1 sm:mb-0">Nama Mitra:</span> 
									<span class="text-sm sm:text-base font-semibold text-gray-900">${pelunasan.namaMitra || 'N/A'}</span>
								</div>
								<div class="flex flex-col sm:flex-row sm:justify-between">
									<span class="text-sm font-medium text-gray-600 mb-1 sm:mb-0">Email:</span> 
									<span class="text-sm sm:text-base text-gray-900 break-all">${pelunasan.email || 'N/A'}</span>
								</div>
								<div class="flex flex-col sm:flex-row sm:justify-between">
									<span class="text-sm font-medium text-gray-600 mb-1 sm:mb-0">No HP:</span> 
									<span class="text-sm sm:text-base text-gray-900">${pelunasan.noHp || 'N/A'}</span>
								</div>
								<div class="flex flex-col sm:flex-row sm:justify-between">
									<span class="text-sm font-medium text-gray-600 mb-1 sm:mb-0">Alamat:</span> 
									<span class="text-sm sm:text-base text-gray-900 text-right">${pelunasan.alamatMitra || 'N/A'}</span>
								</div>
								<div class="flex flex-col sm:flex-row sm:justify-between">
									<span class="text-sm font-medium text-gray-600 mb-1 sm:mb-0">Paket Usaha:</span> 
									<span class="text-sm sm:text-base font-medium text-orange-600">${pelunasan.paketUsaha || 'N/A'}</span>
								</div>
							</div>
						</div>
						<div class="bg-gradient-to-r from-green-50 to-emerald-50 p-3 sm:p-4 rounded-lg border border-green-200/50">
							<h4 class="font-semibold text-gray-900 mb-3 text-base sm:text-lg flex items-center">
								<svg class="w-5 h-5 mr-2 text-green-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
									<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1" />
								</svg>
								Informasi Pelunasan
							</h4>
							<div class="space-y-3">
								<div class="flex flex-col sm:flex-row sm:justify-between">
									<span class="text-sm font-medium text-gray-600 mb-1 sm:mb-0">Nominal Pelunasan:</span> 
									<span class="text-sm sm:text-base font-bold text-green-600">${pelunasan.nominalPelunasan ? formatCurrency(pelunasan.nominalPelunasan) : 'N/A'}</span>
								</div>
								<div class="flex flex-col sm:flex-row sm:justify-between items-start sm:items-center">
									<span class="text-sm font-medium text-gray-600 mb-1 sm:mb-0">Status:</span> 
									<span class="inline-flex items-center px-3 py-1.5 text-xs font-semibold rounded-full ${pelunasan.statusPelunasan === 'lunas' ? 'bg-green-100 text-green-800 border border-green-200' : 'bg-yellow-100 text-yellow-800 border border-yellow-200'}">${pelunasan.statusPelunasan || 'belum'}</span>
								</div>
								<div class="flex flex-col sm:flex-row sm:justify-between">
									<span class="text-sm font-medium text-gray-600 mb-1 sm:mb-0">Nama Pengirim:</span> 
									<span class="text-sm sm:text-base text-gray-900">${pelunasan.namaPengirim || 'N/A'}</span>
								</div>
								<div class="flex flex-col sm:flex-row sm:justify-between">
									<span class="text-sm font-medium text-gray-600 mb-1 sm:mb-0">No Rekening:</span> 
									<span class="text-sm sm:text-base font-mono text-gray-900">${pelunasan.noRekPengirim || 'N/A'}</span>
								</div>
								<div class="flex flex-col sm:flex-row sm:justify-between">
									<span class="text-sm font-medium text-gray-600 mb-1 sm:mb-0">Bank Pengirim:</span> 
									<span class="text-sm sm:text-base font-medium text-gray-900">${pelunasan.bankPengirim || 'N/A'}</span>
								</div>
							</div>
						</div>
						<div class="bg-gradient-to-r from-blue-50 to-indigo-50 p-3 sm:p-4 rounded-lg border border-blue-200/50 lg:col-span-2">
							<h4 class="font-semibold text-gray-900 mb-4 text-base sm:text-lg flex items-center">
								<svg class="w-5 h-5 mr-2 text-blue-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
									<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z" />
								</svg>
								Bukti Transfer
							</h4>
							<div class="bg-white rounded-lg p-2 border border-gray-200">
								${pelunasan.buktiTransfer ? 
									`<div class="relative">
										<img src="${pelunasan.buktiTransfer}" alt="Bukti Transfer" 
											class="w-full max-w-md mx-auto h-auto max-h-64 sm:max-h-80 object-contain bg-gray-50 rounded-lg shadow-sm cursor-pointer hover:shadow-md transition-shadow"
											onclick="openImageModal('${pelunasan.buktiTransfer}')">
										<div class="mt-2 text-center">
											<button onclick="openImageModal('${pelunasan.buktiTransfer}')" 
												class="text-xs sm:text-sm text-blue-600 hover:text-blue-800 underline">
												Klik untuk memperbesar
											</button>
										</div>
									</div>` : 
									'<div class="text-center py-8"><span class="text-gray-500 text-sm">Tidak ada bukti transfer</span></div>'}
							</div>
						</div>
						<div class="bg-gradient-to-r from-purple-50 to-pink-50 p-3 sm:p-4 rounded-lg border border-purple-200/50 lg:col-span-2">
							<h4 class="font-semibold text-gray-900 mb-3 text-base sm:text-lg flex items-center">
								<svg class="w-5 h-5 mr-2 text-purple-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
									<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
								</svg>
								Informasi Waktu
							</h4>
							<div class="grid grid-cols-1 sm:grid-cols-2 gap-3">
								<div class="flex flex-col">
									<span class="text-sm font-medium text-gray-600 mb-1">Dibuat:</span> 
									<span class="text-sm text-gray-900">${pelunasan.createdAt ? formatDate(pelunasan.createdAt) : 'N/A'}</span>
								</div>
								<div class="flex flex-col">
									<span class="text-sm font-medium text-gray-600 mb-1">Diupdate:</span> 
									<span class="text-sm text-gray-900">${pelunasan.updatedAt ? formatDate(pelunasan.updatedAt) : 'N/A'}</span>
								</div>
							</div>
						</div>
					`;
				} else {
					content.innerHTML = '<div class="col-span-2 text-center text-red-500">Error loading detail</div>';
				}
					} catch (error) {
						const err = error as any;
						
						// Check if error is related to token expiration
						if (err.message && (err.message.includes('jwt expired') || err.message.includes('Invalid token'))) {
							modal.classList.add('hidden');
							handleTokenExpiration();
							return;
						}
						
						content.innerHTML = `<div class="col-span-2 text-center text-red-500">Error: ${err.message || err}</div>`;
					}
		}
		function closePelunasanDetailModal(): void {
			const modal = document.getElementById('pelunasanDetailModal');
			if (modal) modal.classList.add('hidden');
		}

		function openImageModal(imageUrl: string): void {
			const modal = document.getElementById('imageModal');
			const img = document.getElementById('modalImage') as HTMLImageElement;
			if (modal && img) {
				img.src = imageUrl;
				modal.classList.remove('hidden');
				// Use flexbox layout when modal is shown
				modal.style.display = 'flex';
				modal.style.alignItems = 'center';
				modal.style.justifyContent = 'center';
				
				// Prevent scrolling on body when modal is open
				document.body.style.overflow = 'hidden';
			}
		}

		function closeImageModal(): void {
			const modal = document.getElementById('imageModal');
			const img = document.getElementById('modalImage') as HTMLImageElement;
			if (modal && img) {
				modal.classList.add('hidden');
				modal.style.display = 'none';
				img.src = ''; // Clear image src to prevent memory leaks
				
				// Restore body scroll
				document.body.style.overflow = '';
			}
		}
		function formatCurrency(amount: number): string {
			return new Intl.NumberFormat('id-ID', { style: 'currency', currency: 'IDR', minimumFractionDigits: 0, maximumFractionDigits: 0 }).format(amount);
		}
		function formatDate(dateString: string): string {
			return new Date(dateString).toLocaleDateString('id-ID', { year: 'numeric', month: 'long', day: 'numeric', hour: '2-digit', minute: '2-digit' });
		}
		document.addEventListener('DOMContentLoaded', function() {
			loadPelunasanData();
			const refreshBtn = document.getElementById('refresh-btn');
			if (refreshBtn) refreshBtn.addEventListener('click', function(e) { e.preventDefault(); loadPelunasanData(); });
			
			// Add resize listener for responsive chart
			let resizeTimeout: any;
			window.addEventListener('resize', function() {
				clearTimeout(resizeTimeout);
				resizeTimeout = setTimeout(function() {
					if (pelunasanChart) {
						const ctx = document.getElementById('pelunasanChart') as HTMLCanvasElement;
						if (ctx) {
							// Set responsive canvas size based on breakpoints
							let chartSize = 300; // Default desktop size
							
							if (window.innerWidth <= 480) {
								chartSize = 180; // Extra small mobile
							} else if (window.innerWidth <= 640) {
								chartSize = 220; // Small mobile
							} else if (window.innerWidth <= 1024) {
								chartSize = 280; // Tablet
							}
							
							ctx.width = chartSize;
							ctx.height = chartSize;
							ctx.style.maxWidth = chartSize + 'px';
							ctx.style.maxHeight = chartSize + 'px';
							
							pelunasanChart.resize();
						}
					}
				}, 250);
			});
			
			// Add event listeners for image modal
			const imageModal = document.getElementById('imageModal');
			if (imageModal) {
				// Close modal when clicking on the backdrop
				imageModal.addEventListener('click', function(e) {
					if (e.target === imageModal) {
						closeImageModal();
					}
				});
			}
			
			// Close modal with ESC key
			document.addEventListener('keydown', function(e) {
				if (e.key === 'Escape') {
					const modal = document.getElementById('imageModal');
					if (modal && !modal.classList.contains('hidden')) {
						closeImageModal();
					}
				}
			});
		});
		// Extend window type for global functions
		(window as any).showPelunasanDetail = showPelunasanDetail;
		(window as any).closePelunasanDetailModal = closePelunasanDetailModal;
		(window as any).openImageModal = openImageModal;
		(window as any).closeImageModal = closeImageModal;
		(window as any).approvePelunasan = async function(namaMitra: string) {
			const token = localStorage.getItem('adminToken');
			if (!token) {
				await import('sweetalert2').then(Swal => {
					Swal.default.fire({
						title: "Error",
						text: "Mitra tidak ditemukan",
						icon: "error"
					});
				});
				return;
			}
			
			const result = await import('sweetalert2').then(Swal => {
				return Swal.default.fire({
					title: "Apakah anda yakin?",
					text: `Apakah anda yakin untuk menyetujui pelunasan mitra ${namaMitra}?`,
					icon: "question",
					showCancelButton: true,
					confirmButtonColor: "#3085d6",
					cancelButtonColor: "#d33",
					confirmButtonText: "Ya",
					cancelButtonText: "Tidak"
				});
			});
			
			if (!result.isConfirmed) {
				return;
			}
			
			try {
				console.log('Approve pelunasan - namaMitra:', namaMitra);
				console.log('API_URL:', API_URL);
				
				const response = await fetch(`${API_URL}/api/admin/mitra_pelunasan/approve`, {
					method: 'POST',
					headers: { 
						'Authorization': `Bearer ${token}`, 
						'Content-Type': 'application/json'
					},
					body: JSON.stringify({ namaMitra })
				});
				console.log('Approve response status:', response.status);
				
				// Handle authentication errors
				if (!response.ok && (response.status === 401 || response.status === 403)) {
					handleTokenExpiration();
					return;
				}
				
				const data = await response.json();
				console.log('Approve response data:', data);
				
				if (response.ok && data.success) {
					// Show success message
					await import('sweetalert2').then(Swal => {
						Swal.default.fire({
							title: "Berhasil!",
							text: "Pelunasan mitra telah disetujui",
							icon: "success",
							timer: 2000,
							showConfirmButton: false
						});
					});
					
					// Force refresh data with multiple strategies
					console.log('Reloading pelunasan data after approve...');
					
					// Strategy 1: Immediate reload
					await loadPelunasanData();
					
					// Strategy 2: Delayed reload for safety
					setTimeout(async () => {
						console.log('Secondary reload after 1 second...');
						await loadPelunasanData();
					}, 1000);
					
				} else {
					console.error('Approve failed:', data);
					await import('sweetalert2').then(Swal => {
						Swal.default.fire({
							title: "Error",
							text: data.message || data.error || 'Gagal approve pelunasan',
							icon: "error"
						});
					});
				}
			} catch (err) {
				console.error('Approve pelunasan error:', err);
				const error = err as any;
				
				// Check if error is related to token expiration
				if (error.message && (error.message.includes('jwt expired') || error.message.includes('Invalid token'))) {
					handleTokenExpiration();
					return;
				}
				
				await import('sweetalert2').then(Swal => {
					Swal.default.fire({
						title: "Error",
						text: "Terjadi error saat approve pelunasan",
						icon: "error"
					});
				});
			}
		};
		(window as any).deletePelunasan = async function(id: string, namaMitra: string) {
			const token = localStorage.getItem('adminToken');
			if (!token) {
				await import('sweetalert2').then(Swal => {
					Swal.default.fire({
						title: "Error",
						text: "Token admin tidak ditemukan",
						icon: "error"
					});
				});
				return;
			}
			
			const result = await import('sweetalert2').then(Swal => {
				return Swal.default.fire({
					title: "Hapus Mitra?",
					text: `Apakah anda yakin ingin menghapus data pelunasan mitra ${namaMitra}? Data yang dihapus tidak dapat dikembalikan.`,
					icon: "warning",
					showCancelButton: true,
					confirmButtonColor: "#d33",
					cancelButtonColor: "#3085d6",
					confirmButtonText: "Ya, Hapus",
					cancelButtonText: "Batal"
				});
			});
			
			if (!result.isConfirmed) {
				return;
			}
			
			try {
				const response = await fetch(`${API_URL}/api/admin/mitra_pelunasan/${id}`, {
					method: 'DELETE',
					headers: { 'Authorization': `Bearer ${token}`, 'Content-Type': 'application/json' },
				});
				
				// Handle authentication errors
				if (!response.ok && (response.status === 401 || response.status === 403)) {
					handleTokenExpiration();
					return;
				}
				
				const data = await response.json();
				if (response.ok && data.success) {
					await import('sweetalert2').then(Swal => {
						Swal.default.fire({
							title: "Terhapus!",
							text: "Data pelunasan mitra telah dihapus",
							icon: "success"
						});
					});
					loadPelunasanData();
				} else {
					await import('sweetalert2').then(Swal => {
						Swal.default.fire({
							title: "Error",
							text: data.message || 'Gagal menghapus data pelunasan',
							icon: "error"
						});
					});
				}
			} catch (err) {
				const error = err as any;
				
				// Check if error is related to token expiration
				if (error.message && (error.message.includes('jwt expired') || error.message.includes('Invalid token'))) {
					handleTokenExpiration();
					return;
				}
				
				await import('sweetalert2').then(Swal => {
					Swal.default.fire({
						title: "Error",
						text: "Terjadi error saat menghapus data pelunasan",
						icon: "error"
					});
				});
			}
		};
	</script>
</Layout>
