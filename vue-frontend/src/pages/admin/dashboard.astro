---
// Admin Dashboard
import Layout from '../../layouts/Layout.astro';
import AdminSidebar from '../../components/admin/sidebar/AdminSidebar.astro';
import AdminNavbar from '../../components/admin/navbar/AdminNavbar.astro';
---
<Layout title="Admin Dashboard">
  <!-- Modern Dashboard Styles -->
  <style>
    /* Global fixes for scroll stability */
    * {
      transform: translateZ(0);
      will-change: auto;
    }
    
    *,
    *::before,
    *::after {
      -webkit-backface-visibility: hidden;
      backface-visibility: hidden;
      -webkit-perspective: 1000px;
      perspective: 1000px;
    }
    
    body, html {
      overflow-x: hidden;
      scroll-behavior: smooth;
      -webkit-overflow-scrolling: touch;
    }
    
    /* Custom Amber Scrollbar */
    ::-webkit-scrollbar {
      width: 8px;
      height: 8px;
    }
    
    ::-webkit-scrollbar-track {
      background: rgba(251, 191, 36, 0.1);
      border-radius: 4px;
    }
    
    ::-webkit-scrollbar-thumb {
      background: linear-gradient(135deg, rgb(245 158 11), rgb(251 191 36));
      border-radius: 4px;
      transition: all 0.3s ease;
    }
    
    ::-webkit-scrollbar-thumb:hover {
      background: linear-gradient(135deg, rgb(251 191 36), rgb(252 211 77));
      transform: scale(1.1);
    }
    
    /* Firefox scrollbar styling */
    * {
      scrollbar-width: thin;
      scrollbar-color: rgb(245 158 11) rgba(251, 191, 36, 0.1);
    }
    
    /* Prevent layout shifts */
    img, video, iframe {
      height: auto;
      max-width: 100%;
    }
    
    /* Fix for fixed/sticky elements */
    .fixed, .sticky {
      transform: translate3d(0, 0, 0);
      -webkit-backface-visibility: hidden;
      backface-visibility: hidden;
    }
    
    /* Modern gradient backgrounds */
    .stats-card {
      background: linear-gradient(135deg, rgba(255, 255, 255, 0.95) 0%, rgba(251, 191, 36, 0.05) 100%);
      backdrop-filter: blur(10px);
      border: 1px solid rgba(251, 191, 36, 0.1);
      transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
      transform: translate3d(0, 0, 0);
      -webkit-backface-visibility: hidden;
      backface-visibility: hidden;
      position: relative;
    }
    
    .stats-card:hover {
      transform: translate3d(0, -4px, 0);
      box-shadow: 0 20px 25px -5px rgba(251, 191, 36, 0.1), 0 10px 10px -5px rgba(251, 191, 36, 0.04);
      border-color: rgba(251, 191, 36, 0.2);
    }
    
    /* Icon containers with gradient backgrounds */
    .stats-icon {
      background: linear-gradient(135deg, rgb(245 158 11), rgb(249 115 22));
      background-size: 200% 200%;
      animation: gradientShift 6s ease infinite;
      transform: translate3d(0, 0, 0);
      -webkit-backface-visibility: hidden;
      backface-visibility: hidden;
    }
    
    .stats-icon.users {
      background: linear-gradient(135deg, rgb(245 158 11), rgb(249 115 22));
    }
    
    .stats-icon.dp {
      background: linear-gradient(135deg, rgb(249 115 22), rgb(239 68 68));
    }
    
    .stats-icon.fp {
      background: linear-gradient(135deg, rgb(239 68 68), rgb(220 38 38));
    }
    
    .stats-icon.pending {
      background: linear-gradient(135deg, rgb(245 158 11), rgb(251 191 36));
    }
    
    @keyframes gradientShift {
      0%, 100% { background-position: 0% 50%; }
      50% { background-position: 100% 50%; }
    }
    
    /* Stats number animation */
    .stats-number {
      font-feature-settings: "tnum";
      transition: all 0.3s ease;
    }
    
    /* Card hover effects */
    .stats-card:hover .stats-number {
      transform: scale(1.05);
    }
    
    /* Modern table styling */
    .modern-table {
      background: linear-gradient(135deg, rgba(255, 255, 255, 0.98) 0%, rgba(251, 191, 36, 0.02) 100%);
      backdrop-filter: blur(12px);
      border: 1px solid rgba(251, 191, 36, 0.1);
      transform: translate3d(0, 0, 0);
      -webkit-backface-visibility: hidden;
      backface-visibility: hidden;
      position: relative;
    }
    
    /* Loading animation */
    @keyframes pulse {
      0%, 100% { opacity: 1; }
      50% { opacity: 0.5; }
    }
    
    .loading-pulse {
      animation: pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite;
    }
    
    /* Responsive grid */
    .stats-grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
      gap: 1.5rem;
    }
    
    @media (max-width: 640px) {
      .stats-grid {
        grid-template-columns: 1fr;
        gap: 1rem;
      }
      .stats-card {
        padding: 1.25rem;
      }
    }

    @media (min-width: 768px) and (max-width: 1024px) {
      .stats-grid {
        grid-template-columns: repeat(2, 1fr);
      }
    }

    /* Mobile responsive styles for chart */
    @media (max-width: 640px) {
      /* Chart container mobile optimization */
      .chart-container {
        height: 280px !important;
        margin-bottom: 1rem;
      }
      
      /* Header responsive */
      .chart-header {
        padding: 1rem !important;
      }
      
      .chart-header h3 {
        font-size: 1.125rem !important;
        line-height: 1.5;
      }
      
      .chart-header p {
        font-size: 0.75rem !important;
        margin-top: 0.25rem !important;
      }
      
      /* Legend responsive */
      .chart-legend {
        flex-direction: column !important;
        align-items: flex-start !important;
        gap: 0.5rem !important;
      }
      
      .chart-legend-item {
        font-size: 0.75rem !important;
      }
      
      /* Chart content padding */
      .chart-content {
        padding: 1rem !important;
      }
      
      /* Total amount cards mobile */
      .total-amounts {
        grid-template-columns: 1fr !important;
        gap: 0.75rem !important;
      }
      
      .amount-card {
        padding: 0.75rem !important;
      }
      
      .amount-card p:first-child {
        font-size: 0.75rem !important;
      }
      
      .amount-card p:last-child {
        font-size: 1.25rem !important;
        font-weight: 700;
      }
    }

    @media (max-width: 480px) {
      /* Extra small mobile devices */
      .chart-container {
        height: 250px !important;
      }
      
      .chart-header h3 {
        font-size: 1rem !important;
      }
      
      .amount-card p:last-child {
        font-size: 1.125rem !important;
      }
    }

    /* Tablet responsive styles for chart */
    @media (min-width: 641px) and (max-width: 1024px) {
      .chart-container {
        height: 350px !important;
      }
      
      .chart-header {
        padding: 1.25rem !important;
      }
      
      .chart-content {
        padding: 1.25rem !important;
      }
    }    /* Ensure logout button is always clickable */
    #logout-btn {
      pointer-events: auto !important;
      cursor: pointer !important;
    }
    
    #logout-btn:disabled {
      pointer-events: auto !important;
      cursor: pointer !important;
      opacity: 1 !important;
    }
    
    /* Stats visibility and layout */
    .stats-set {
      width: 100%;
      transition: opacity 0.3s ease;
      transform: translate3d(0, 0, 0);
      -webkit-backface-visibility: hidden;
      backface-visibility: hidden;
      position: relative;
    }
    .stats-set.hidden {
      display: none;
    }
    
    /* User stats - centered layout */
    .user-stats .stats-grid {
      max-width: 700px;
      margin: 0 auto;
      grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    }
  </style>

  <!-- Chart.js Library -->
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

  <!-- Authentication Protection Script -->
  <script>
    // Cek apakah user sudah login
    if (typeof window !== 'undefined') {
      const token = localStorage.getItem('adminToken');
      const user = localStorage.getItem('adminUser');
      
      if (!token || !user) {
        window.location.href = '/admin/login';
      }
    }
  </script>

  <AdminNavbar />

<AdminSidebar currentPage="dashboard" />

<div class="dashboard-bg min-h-screen p-4 sm:ml-72 transition-all duration-300" style="transform: translate3d(0, 0, 0); -webkit-backface-visibility: hidden; backface-visibility: hidden;">
   <div class="p-6 mt-16" style="transform: translate3d(0, 0, 0); -webkit-backface-visibility: hidden; backface-visibility: hidden;">
      <!-- Welcome Header -->
      <div class="mb-8">
         <div class="bg-gradient-to-r from-amber-500 to-orange-600 rounded-2xl p-6 text-white shadow-2xl">
            <div class="flex items-center space-x-4">
               <div class="w-12 h-12 bg-white/20 rounded-xl flex items-center justify-center backdrop-blur-sm">
                  <svg class="w-7 h-7 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                     <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z"></path>
                  </svg>
               </div>
               <div>
                  <h1 class="text-2xl font-bold">Dashboard Admin</h1>
                  <p class="text-amber-100">Sistem Manajemen Mitra Sagawa</p>
               </div>
            </div>
         </div>
      </div>

      <!-- Dynamic Stats Cards -->
      <div id="stats-container" class="mb-8" style="transform: translate3d(0, 0, 0); -webkit-backface-visibility: hidden; backface-visibility: hidden;">
         <!-- Dashboard Stats (default) -->
         <div class="stats-set dashboard-stats" style="transform: translate3d(0, 0, 0); -webkit-backface-visibility: hidden; backface-visibility: hidden;">
            <div class="stats-grid">
               <div class="stats-card rounded-2xl p-6 shadow-lg">
                  <div class="flex items-center justify-between">
                     <div>
                        <p class="text-sm font-medium text-gray-600 mb-1">Total Pengguna</p>
                        <p class="stats-number text-3xl font-bold text-gray-900" id="total-users">
                           <span class="loading-pulse">-</span>
                        </p>
                        <p class="text-xs text-amber-600 mt-2">
                           <span class="inline-flex items-center">
                              <svg class="w-3 h-3 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                 <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 7h8m0 0v8m0-8l-8 8-4-4-6 6"></path>
                              </svg>
                              Semua user terdaftar
                           </span>
                        </p>
                     </div>
                     <div class="stats-icon users w-14 h-14 rounded-xl flex items-center justify-center shadow-lg">
                        <svg class="w-7 h-7 text-white" fill="currentColor" viewBox="0 0 20 20">
                           <path d="M9 6a3 3 0 11-6 0 3 3 0 016 0zM17 6a3 3 0 11-6 0 3 3 0 016 0zM12.93 17c.046-.327.07-.66.07-1a6.97 6.97 0 00-1.5-4.33A5 5 0 0119 16v1h-6.07zM6 11a5 5 0 015 5v1H1v-1a5 5 0 015-5z"></path>
                        </svg>
                     </div>
                  </div>
               </div>

               <div class="stats-card rounded-2xl p-6 shadow-lg">
                  <div class="flex items-center justify-between">
                     <div>
                        <p class="text-sm font-medium text-gray-600 mb-1">DP Masuk</p>
                        <p class="stats-number text-2xl font-bold text-gray-900" id="dp-masuk">
                           <span class="loading-pulse">-</span>
                        </p>
                        <p class="text-xs text-orange-600 mt-2">
                           <span class="inline-flex items-center">
                              <svg class="w-3 h-3 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                 <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1"></path>
                              </svg>
                              Down Payment
                           </span>
                        </p>
                     </div>
                     <div class="stats-icon dp w-14 h-14 rounded-xl flex items-center justify-center shadow-lg">
                        <svg class="w-7 h-7 text-white" fill="currentColor" viewBox="0 0 20 20">
                           <path fill-rule="evenodd" d="M4 4a2 2 0 00-2 2v4a2 2 0 002 2V6h10a2 2 0 00-2-2H4zm2 6a2 2 0 012-2h8a2 2 0 012 2v4a2 2 0 01-2 2H8a2 2 0 01-2-2v-4zm6 4a2 2 0 100-4 2 2 0 000 4z" clip-rule="evenodd"></path>
                        </svg>
                     </div>
                  </div>
               </div>

               <div class="stats-card rounded-2xl p-6 shadow-lg">
                  <div class="flex items-center justify-between">
                     <div>
                        <p class="text-sm font-medium text-gray-600 mb-1">FP Masuk</p>
                        <p class="stats-number text-2xl font-bold text-gray-900" id="fp-masuk">
                           <span class="loading-pulse">-</span>
                        </p>
                        <p class="text-xs text-red-600 mt-2">
                           <span class="inline-flex items-center">
                              <svg class="w-3 h-3 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                 <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                              </svg>
                              Full Payment
                           </span>
                        </p>
                     </div>
                     <div class="stats-icon fp w-14 h-14 rounded-xl flex items-center justify-center shadow-lg">
                        <svg class="w-7 h-7 text-white" fill="currentColor" viewBox="0 0 20 20">
                           <path d="M8.433 7.418c.155-.103.346-.196.567-.267v1.698a2.305 2.305 0 01-.567-.267C8.07 8.34 8 8.114 8 8c0-.114.07-.34.433-.582zM11 12.849v-1.698c.22.071.412.164.567.267.364.243.433.468.433.582 0 .114-.07.34-.433.582a2.305 2.305 0 01-.567.267z"></path>
                           <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm1-13a1 1 0 10-2 0v.092a4.535 4.535 0 00-1.676.662C6.602 6.234 6 7.009 6 8c0 .99.602 1.765 1.324 2.246.48.32 1.054.545 1.676.662v1.941c-.391-.127-.68-.317-.843-.504a1 1 0 10-1.51 1.31c.562.649 1.413 1.076 2.353 1.253V15a1 1 0 102 0v-.092a4.535 4.535 0 001.676-.662C13.398 13.766 14 12.991 14 12c0-.99-.602-1.765-1.324-2.246A4.535 4.535 0 0011 9.092V7.151c.391.127.68.317.843.504a1 1 0 101.511-1.31c-.563-.649-1.413-1.076-2.354-1.253V5z" clip-rule="evenodd"></path>
                        </svg>
                     </div>
                  </div>
               </div>

               <div class="stats-card rounded-2xl p-6 shadow-lg">
                  <div class="flex items-center justify-between">
                     <div>
                        <p class="text-sm font-medium text-gray-600 mb-1">Pending</p>
                        <p class="stats-number text-3xl font-bold text-gray-900" id="pending-dashboard">
                           <span class="loading-pulse">-</span>
                        </p>
                        <p class="text-xs text-amber-600 mt-2">
                           <span class="inline-flex items-center">
                              <svg class="w-3 h-3 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                 <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                              </svg>
                              Menunggu approval
                           </span>
                        </p>
                     </div>
                     <div class="stats-icon pending w-14 h-14 rounded-xl flex items-center justify-center shadow-lg">
                        <svg class="w-7 h-7 text-white" fill="currentColor" viewBox="0 0 20 20">
                           <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm1-12a1 1 0 10-2 0v4a1 1 0 00.293.707l2.828 2.829a1 1 0 101.415-1.415L11 9.586V6z" clip-rule="evenodd"></path>
                        </svg>
                     </div>
                  </div>
               </div>
            </div>
         </div>
         
         <!-- User Stats (for User menu) -->
         <div class="stats-set user-stats hidden">
            <div class="stats-grid">
               <div class="stats-card rounded-2xl p-6 shadow-lg">
                  <div class="flex items-center justify-between">
                     <div>
                        <p class="text-sm font-medium text-gray-600 mb-1">Total Users</p>
                        <p class="stats-number text-3xl font-bold text-gray-900" id="total-users-user">
                           <span class="loading-pulse">-</span>
                        </p>
                        <p class="text-xs text-amber-600 mt-2">
                           <span class="inline-flex items-center">
                              <svg class="w-3 h-3 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                 <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z"></path>
                              </svg>
                              Semua pengguna
                           </span>
                        </p>
                     </div>
                     <div class="stats-icon users w-14 h-14 rounded-xl flex items-center justify-center shadow-lg">
                        <svg class="w-7 h-7 text-white" fill="currentColor" viewBox="0 0 20 20">
                           <path d="M9 6a3 3 0 11-6 0 3 3 0 016 0zM17 6a3 3 0 11-6 0 3 3 0 016 0zM12.93 17c.046-.327.07-.66.07-1a6.97 6.97 0 00-1.5-4.33A5 5 0 0119 16v1h-6.07zM6 11a5 5 0 015 5v1H1v-1a5 5 0 015-5z"></path>
                        </svg>
                     </div>
                  </div>
               </div>

               <div class="stats-card rounded-2xl p-6 shadow-lg">
                  <div class="flex items-center justify-between">
                     <div>
                        <p class="text-sm font-medium text-gray-600 mb-1">Pending</p>
                        <p class="stats-number text-3xl font-bold text-gray-900" id="pending-user">
                           <span class="loading-pulse">-</span>
                        </p>
                        <p class="text-xs text-amber-600 mt-2">
                           <span class="inline-flex items-center">
                              <svg class="w-3 h-3 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                 <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                              </svg>
                              Menunggu persetujuan
                           </span>
                        </p>
                     </div>
                     <div class="stats-icon pending w-14 h-14 rounded-xl flex items-center justify-center shadow-lg">
                        <svg class="w-7 h-7 text-white" fill="currentColor" viewBox="0 0 20 20">
                           <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm1-12a1 1 0 10-2 0v4a1 1 0 00.293.707l2.828 2.829a1 1 0 101.415-1.415L11 9.586V6z" clip-rule="evenodd"></path>
                        </svg>
                     </div>
                  </div>
               </div>
            </div>
         </div>
      </div>

      <!-- Real-time Payment Chart -->
      <div class="mb-8" style="transform: translate3d(0, 0, 0); -webkit-backface-visibility: hidden; backface-visibility: hidden;">
         <div class="modern-table rounded-2xl shadow-2xl overflow-hidden">
            <div class="chart-header bg-gradient-to-r from-white to-orange-50/30 px-6 py-5 border-b border-orange-200/50">
               <div class="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4">
                  <div>
                     <h3 class="text-xl font-bold text-gray-900">Total Payment Real-time</h3>
                     <p class="text-sm text-gray-600 mt-1">Grafik pembayaran DP dan FP secara real-time</p>
                  </div>
                  <div class="chart-legend flex items-center space-x-4 sm:space-x-2">
                     <div class="chart-legend-item flex items-center space-x-2 text-sm">
                        <div class="w-3 h-3 bg-gradient-to-r from-amber-500 to-orange-600 rounded-full"></div>
                        <span class="text-gray-600">DP</span>
                     </div>
                     <div class="chart-legend-item flex items-center space-x-2 text-sm">
                        <div class="w-3 h-3 bg-gradient-to-r from-red-500 to-red-600 rounded-full"></div>
                        <span class="text-gray-600">FP</span>
                     </div>
                  </div>
               </div>
            </div>
            <div class="chart-content p-6 bg-white">
               <div class="chart-container relative" style="height: 400px;">
                  <canvas id="paymentChart"></canvas>
               </div>
               <div class="total-amounts mt-4 grid grid-cols-2 gap-4">
                  <div class="amount-card text-center p-3 bg-gradient-to-r from-amber-50 to-orange-50 rounded-lg">
                     <p class="text-sm text-gray-600">Total DP</p>
                     <p class="text-2xl font-bold text-amber-600" id="total-dp-amount">Rp 0</p>
                  </div>
                  <div class="amount-card text-center p-3 bg-gradient-to-r from-red-50 to-red-50 rounded-lg">
                     <p class="text-sm text-gray-600">Total FP</p>
                     <p class="text-2xl font-bold text-red-600" id="total-fp-amount">Rp 0</p>
                  </div>
               </div>
            </div>
         </div>
      </div>

      <!-- Modern Data Table -->
      <div class="modern-table rounded-2xl shadow-2xl overflow-hidden">
         <div class="bg-gradient-to-r from-white to-orange-50/30 px-6 py-5 border-b border-orange-200/50">
            <div class="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4">
               <div>
                  <h3 class="text-xl font-bold text-gray-900">Mitra Management</h3>
                  <p class="text-sm text-gray-600 mt-1">Kelola data mitra dan persetujuan pendaftaran</p>
               </div>
               <button id="refresh-btn" class="inline-flex items-center px-4 py-2 bg-gradient-to-r from-amber-500 to-orange-600 text-white font-medium rounded-xl hover:from-amber-600 hover:to-orange-700 focus:outline-none focus:ring-2 focus:ring-amber-500 focus:ring-offset-2 transition-all duration-200 shadow-lg hover:shadow-xl">
                  <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                     <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path>
                  </svg>
                  Refresh Data
               </button>
            </div>
         </div>
         <div class="overflow-x-auto" style="transform: translate3d(0, 0, 0); -webkit-backface-visibility: hidden; backface-visibility: hidden;">
            <table class="w-full text-sm text-left" style="transform: translate3d(0, 0, 0); -webkit-backface-visibility: hidden; backface-visibility: hidden;">
               <thead class="text-xs text-gray-700 uppercase bg-gradient-to-r from-orange-50 to-amber-50 border-b border-orange-200/50" style="transform: translate3d(0, 0, 0); -webkit-backface-visibility: hidden; backface-visibility: hidden;">
                  <tr>
                     <th scope="col" class="px-6 py-4 font-semibold">Nama Mitra</th>
                     <th scope="col" class="px-6 py-4 font-semibold">Email</th>
                     <th scope="col" class="px-6 py-4 font-semibold">No HP</th>
                     <th scope="col" class="px-6 py-4 font-semibold">Paket Usaha</th>
                     <th scope="col" class="px-6 py-4 font-semibold">Sub Brand</th>
                     <th scope="col" class="px-6 py-4 font-semibold">Status</th>
                     <th scope="col" class="px-6 py-4 font-semibold">Actions</th>
                  </tr>
               </thead>
               <tbody id="mitra-table-body" class="divide-y divide-gray-100" style="transform: translate3d(0, 0, 0); -webkit-backface-visibility: hidden; backface-visibility: hidden;">
                  <tr>
                     <td colspan="7" class="px-6 py-8 text-center">
                        <div class="flex items-center justify-center">
                           <div class="loading-pulse">
                              <svg class="animate-spin -ml-1 mr-3 h-5 w-5 text-amber-500" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                                 <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                                 <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                              </svg>
                              Memuat data...
                           </div>
                        </div>
                     </td>
                  </tr>
               </tbody>
            </table>
         </div>
      </div>
   </div>
</div>

<!-- Modal untuk Detail Mitra -->
<div id="mitraDetailModal" class="hidden fixed inset-0 z-50 overflow-y-auto" style="transform: translate3d(0, 0, 0); -webkit-backface-visibility: hidden; backface-visibility: hidden;">
  <div class="flex items-center justify-center min-h-screen px-4 pt-4 pb-20 text-center sm:block sm:p-0">
    <!-- Background overlay -->
    <div class="fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity" onclick="closeMitraDetailModal()" style="transform: translate3d(0, 0, 0); -webkit-backface-visibility: hidden; backface-visibility: hidden;"></div>
    
    <!-- Modal panel -->
    <div class="inline-block align-bottom bg-white rounded-lg text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-4xl sm:w-full" style="transform: translate3d(0, 0, 0); -webkit-backface-visibility: hidden; backface-visibility: hidden;">
      <div class="bg-white px-4 pt-5 pb-4 sm:p-6 sm:pb-4">
        <div class="flex justify-between items-center mb-4">
          <h3 class="text-lg leading-6 font-medium text-gray-900">Detail Mitra</h3>
          <button onclick="closeMitraDetailModal()" class="text-gray-400 hover:text-gray-600">
            <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
            </svg>
          </button>
        </div>
        
        <!-- Modal Content -->
        <div id="mitraDetailContent" class="grid grid-cols-1 md:grid-cols-2 gap-6"></div>
        
        <!-- Modal Footer -->
        <div class="mt-6 flex justify-end space-x-3">
          <button onclick="closeMitraDetailModal()" class="px-4 py-2 bg-gray-300 text-gray-700 rounded hover:bg-gray-400 transition">
            Tutup
          </button>
        </div>
      </div>
    </div>
  </div>
</div>

<!-- Modals -->
<div id="imageModal" class="hidden fixed inset-0 z-50 overflow-y-auto bg-black bg-opacity-30" style="transform: translate3d(0, 0, 0); -webkit-backface-visibility: hidden; backface-visibility: hidden;">
  <div class="flex items-center justify-center w-full h-full p-4" style="transform: translate3d(0, 0, 0); -webkit-backface-visibility: hidden; backface-visibility: hidden;">
    <!-- Close button -->
    <button onclick="closeImageModal()" class="absolute top-4 right-4 text-white hover:text-gray-300 z-20" style="transform: translate3d(0, 0, 0); -webkit-backface-visibility: hidden; backface-visibility: hidden;">
      <svg class="w-8 h-8" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
      </svg>
    </button>
    
    <!-- Image container -->
    <div class="max-w-full max-h-full" style="transform: translate3d(0, 0, 0); -webkit-backface-visibility: hidden; backface-visibility: hidden;">
      <img id="modalImage" src="" alt="" class="max-w-full max-h-full object-contain" style="transform: translate3d(0, 0, 0); -webkit-backface-visibility: hidden; backface-visibility: hidden;">
      <p id="modalImageTitle" class="text-black text-center mt-4 text-lg font-medium" style="transform: translate3d(0, 0, 0); -webkit-backface-visibility: hidden; backface-visibility: hidden;"></p>
    </div>
  </div>
</div>

<script>
  // API URL configuration
  const API_URL = import.meta.env.PUBLIC_API_URL || 'http://localhost:5000';
  
  // Listen for navbar actions
  document.addEventListener('adminNavbarAction', function(event: Event) {
    const customEvent = event as CustomEvent;
    const action = customEvent.detail.action;
    
    if (action === 'logout') {
      // Hapus data dari localStorage
      localStorage.removeItem('adminToken');
      localStorage.removeItem('adminUser');
      
      // Jangan hapus remembered credentials saat logout
      // Biarkan credentials tersimpan untuk login berikutnya
      
      // Redirect ke login page
      window.location.href = '/admin/login';
    }
  });

  // Load user information and update navbar
  document.addEventListener('DOMContentLoaded', function() {
    // Apply scroll stability fixes
    document.documentElement.style.scrollBehavior = 'smooth';
    (document.documentElement.style as any).webkitOverflowScrolling = 'touch';
    
    // Force repaint to fix any initial layout issues
    document.body.offsetHeight;
    
    const userString = localStorage.getItem('adminUser');
    if (userString) {
      try {
        const user = JSON.parse(userString);
        
        // Update navbar user info using the exposed function
        if (typeof (window as any).adminNavbar !== 'undefined') {
          (window as any).adminNavbar.updateUserInfo(user);
        }
        
      } catch (error) {
        console.error('Error parsing user data:', error);
      }
    }

    // Initialize sidebar state and main content margin
    initializeSidebarState();

    // Load mitra data
    loadMitraData('dashboard');

    // Listen for sidebar actions
    document.addEventListener('adminSidebarAction', function(event: Event) {
      const customEvent = event as CustomEvent;
      const action = customEvent.detail.action;
      
      switch(action) {
        case 'showAllUsers':
          switchToUserStats();
          loadMitraData('all');
          break;
        case 'showApprovedMitra':
          switchToUserStats();
          loadMitraData('approved');
          break;
        case 'showPendingMitra':
          switchToUserStats();
          loadMitraData('pending');
          break;
        case 'showDashboard':
          switchToDashboardStats();
          loadMitraData('dashboard');
          break;
      }
    });

    // Navbar interactions are now handled by AdminNavbar component

    // Handle refresh button
    const refreshBtn = document.getElementById('refresh-btn');
    if (refreshBtn) {
      refreshBtn.addEventListener('click', function(e) {
        e.preventDefault();
        // Get current active filter
        const activeFilter = getCurrentActiveFilter();
        loadMitraData(activeFilter);
      });
    }

    // Sidebar toggle is now handled by AdminNavbar component
  });

  // Function to initialize sidebar state
  function initializeSidebarState() {
    const sidebar = document.getElementById('logo-sidebar');
    const mainContent = document.querySelector('.dashboard-bg');
    
    if (sidebar && mainContent) {
      const sidebarVisible = localStorage.getItem('sidebarVisible');
      const shouldBeVisible = sidebarVisible === 'true';
      
      console.log('Initializing sidebar state:', shouldBeVisible); // Debug log
      
      // Apply sidebar state
      if (shouldBeVisible) {
        sidebar.classList.remove('-translate-x-full');
      } else {
        sidebar.classList.add('-translate-x-full');
      }
      
      // Apply main content margin
      updateMainContentMargin(shouldBeVisible);
      
      // Listen for sidebar toggle events from navbar
      window.addEventListener('sidebarToggle', function(e: Event) {
        const customEvent = e as CustomEvent;
        const visible = customEvent.detail?.visible;
        if (typeof visible === 'boolean') {
          updateMainContentMargin(visible);
        }
      });
      
      // Handle window resize
      window.addEventListener('resize', function() {
        const currentVisible = !sidebar.classList.contains('-translate-x-full');
        updateMainContentMargin(currentVisible);
      });
    }
  }

  // Function to update main content margin
  function updateMainContentMargin(sidebarVisible: boolean) {
    console.log('Dashboard: updating main content margin:', sidebarVisible); // Debug log
    
    const mainContent = document.querySelector('.dashboard-bg');
    if (mainContent) {
      // Remove existing margin classes
      mainContent.classList.remove('sm:ml-0', 'sm:ml-72');
      
      if (sidebarVisible && window.innerWidth >= 768) {
        // Desktop/tablet with sidebar visible - add left margin
        mainContent.classList.add('sm:ml-72');
        console.log('Dashboard: Added sm:ml-72'); // Debug log
      } else {
        // Mobile or sidebar hidden - remove left margin
        mainContent.classList.add('sm:ml-0');
        console.log('Dashboard: Added sm:ml-0'); // Debug log
      }
    } else {
      console.log('Dashboard: Main content not found'); // Debug log
    }
  }
  function switchToUserStats() {
    const dashboardStats = document.querySelector('.dashboard-stats');
    const userStats = document.querySelector('.user-stats');
    
    if (dashboardStats && userStats) {
      dashboardStats.classList.add('hidden');
      userStats.classList.remove('hidden');
    }
  }

  // Function to switch to Dashboard stats
  function switchToDashboardStats() {
    const dashboardStats = document.querySelector('.dashboard-stats');
    const userStats = document.querySelector('.user-stats');
    const usersDropdown = document.getElementById('users-dropdown');
    
    if (dashboardStats && userStats) {
      userStats.classList.add('hidden');
      dashboardStats.classList.remove('hidden');
    }
    
    // Close users dropdown when switching to dashboard
    if (usersDropdown) {
      usersDropdown.classList.add('hidden');
    }
  }

  // Function to update stats with smooth animation
  function updateStats(mitras: any[], isUserMenu: boolean = false) {
    const totalUsers = mitras.length;
    const pendingCount = mitras.filter(m => m.status === 'pending').length;
    const approvedCount = mitras.filter(m => m.status === 'approved').length;
    
    // Calculate DP and FP totals
    const dpTotal = mitras
      .filter(m => m.nilaiPaketUsaha === 'DP')
      .reduce((sum, m) => sum + (m.yangHarusDibayar || 0), 0);
      
    const fpTotal = mitras
      .filter(m => m.nilaiPaketUsaha === 'Full Payment')
      .reduce((sum, m) => sum + (m.yangHarusDibayar || 0), 0);

    // Animate stats updates
    const animateNumber = (element: HTMLElement | null, finalValue: string, duration: number = 800) => {
      if (!element) return;
      
      // Remove loading state
      element.classList.remove('loading-pulse');
      
      // If it's a currency, animate from 0 to final value
      if (finalValue.includes('Rp')) {
        const finalNumber = parseInt(finalValue.replace(/[^\d]/g, ''));
        let currentNumber = 0;
        const increment = finalNumber / (duration / 16); // 60fps
        
        const animate = () => {
          currentNumber += increment;
          if (currentNumber >= finalNumber) {
            element.textContent = finalValue;
          } else {
            element.textContent = formatCurrency(Math.floor(currentNumber));
            requestAnimationFrame(animate);
          }
        };
        animate();
      } else {
        // For regular numbers
        const finalNumber = parseInt(finalValue);
        let currentNumber = 0;
        const increment = finalNumber / (duration / 16);
        
        const animate = () => {
          currentNumber += increment;
          if (currentNumber >= finalNumber) {
            element.textContent = finalValue;
          } else {
            element.textContent = Math.floor(currentNumber).toString();
            requestAnimationFrame(animate);
          }
        };
        animate();
      }
    };

    if (isUserMenu) {
      // Update User stats with animation
      const totalUsersEl = document.getElementById('total-users-user');
      const pendingUserEl = document.getElementById('pending-user');
      
      setTimeout(() => animateNumber(totalUsersEl, totalUsers.toString()), 100);
      setTimeout(() => animateNumber(pendingUserEl, pendingCount.toString()), 200);
    } else {
      // Update Dashboard stats with staggered animation
      const totalUsersEl = document.getElementById('total-users');
      const dpMasukEl = document.getElementById('dp-masuk');
      const fpMasukEl = document.getElementById('fp-masuk');
      const pendingEl = document.getElementById('pending-dashboard');
      
      setTimeout(() => animateNumber(totalUsersEl, totalUsers.toString()), 100);
      setTimeout(() => animateNumber(dpMasukEl, formatCurrency(dpTotal)), 200);
      setTimeout(() => animateNumber(fpMasukEl, formatCurrency(fpTotal)), 300);
      setTimeout(() => animateNumber(pendingEl, pendingCount.toString()), 400);
    }
  }
  
  // Function to update chart with real mitra data
  function updateChartWithRealData(mitras: any[]) {
    if (!paymentChart || !mitras) return;

    // Process payment data from mitras
    const dpPayments = mitras.filter(m => m.nilaiPaketUsaha === 'DP' && m.status === 'approved');
    const fpPayments = mitras.filter(m => m.nilaiPaketUsaha === 'Full Payment' && m.status === 'approved');
    
    // Create time series data for the last 24 hours
    const now = new Date();
    const timeLabels = [];
    const dpData = [];
    const fpData = [];
    
    // Generate hourly slots for the last 12 hours
    for (let i = 11; i >= 0; i--) {
      const timeSlot = new Date(now.getTime() - i * 60 * 60 * 1000);
      timeLabels.push(timeSlot.toLocaleTimeString('id-ID', { 
        hour: '2-digit', 
        minute: '2-digit' 
      }));
      
      // Count payments in this time slot (simulate distribution)
      // In a real app, you'd filter by createdAt timestamp
      const dpCount = Math.floor(dpPayments.length / 12) + (Math.random() > 0.7 ? Math.floor(Math.random() * 2) : 0);
      const fpCount = Math.floor(fpPayments.length / 12) + (Math.random() > 0.8 ? Math.floor(Math.random() * 2) : 0);
      
      dpData.push(Math.max(0, dpCount));
      fpData.push(Math.max(0, fpCount));
    }

    // Calculate totals
    const totalDPAmount = dpPayments.reduce((sum, m) => sum + (m.yangHarusDibayar || 0), 0);
    const totalFPAmount = fpPayments.reduce((sum, m) => sum + (m.yangHarusDibayar || 0), 0);
    
    // Update chart
    paymentChart.data.labels = timeLabels;
    paymentChart.data.datasets[0].data = dpData;
    paymentChart.data.datasets[1].data = fpData;
    
    paymentChart.update('active');

    // Update total amounts
    const totalDPElement = document.getElementById('total-dp-amount');
    const totalFPElement = document.getElementById('total-fp-amount');

    if (totalDPElement) {
      totalDPElement.textContent = formatRupiah(totalDPAmount);
    }
    
    if (totalFPElement) {
      totalFPElement.textContent = formatRupiah(totalFPAmount);
    }

    console.log('Chart updated with real data:', {
      dpPayments: dpPayments.length,
      fpPayments: fpPayments.length,
      totalDPAmount,
      totalFPAmount
    });
  }

  // Helper function to format currency
  function formatCurrency(amount: number): string {
    return new Intl.NumberFormat('id-ID', {
      style: 'currency',
      currency: 'IDR',
      minimumFractionDigits: 0,
      maximumFractionDigits: 0
    }).format(amount);
  }

  // Active menu management functions are now handled by the AdminSidebar component
  // Access them via window.adminSidebar if needed

  // Function to get current active filter
  function getCurrentActiveFilter(): string {
    const dashboardBtn = document.getElementById('dashboard-menu-btn');
    const showAllUsers = document.getElementById('show-all-users');
    const showApprovedMitra = document.getElementById('show-approved-mitra');
    const showPendingMitra = document.getElementById('show-pending-mitra');
    
    // Check if dashboard menu is active
    if (dashboardBtn && dashboardBtn.classList.contains('active-menu')) {
      return 'dashboard';
    }
    
    // Check if we're in dashboard stats mode
    const dashboardStats = document.querySelector('.dashboard-stats');
    const userStats = document.querySelector('.user-stats');
    
    if (dashboardStats && !dashboardStats.classList.contains('hidden')) {
      return 'dashboard';
    }

    if (showAllUsers && showAllUsers.classList.contains('bg-gray-100')) {
      return 'all';
    } else if (showApprovedMitra && showApprovedMitra.classList.contains('bg-gray-100')) {
      return 'approved';
    } else if (showPendingMitra && showPendingMitra.classList.contains('bg-gray-100')) {
      return 'pending';
    }
    
    return 'dashboard'; // default to dashboard
  }

  // Function to load mitra data
  async function loadMitraData(filter: string = 'all') {
    const tableBody = document.getElementById('mitra-table-body') as HTMLTableSectionElement | null;
    const token = localStorage.getItem('adminToken');

    if (!token) {
      window.location.href = '/admin/login';
      return;
    }

    if (!tableBody) return;

    try {
      tableBody.innerHTML = '<tr><td colspan="7" class="px-6 py-4 text-center text-gray-500">Loading...</td></tr>';

      const response = await fetch(`${API_URL}/api/admin/mitra`, {
        method: 'GET',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json',
        },
      });

      if (!response.ok) {
        throw new Error('Failed to fetch mitra data');
      }

      const result = await response.json();

      if (result.success && result.data) {
        let mitras = result.data;

        // Apply filter based on the filter parameter
        if (filter === 'approved') {
          mitras = mitras.filter((mitra: any) => mitra.status === 'approved');
        } else if (filter === 'pending') {
          mitras = mitras.filter((mitra: any) => mitra.status === 'pending');
        }
        // 'all' and 'dashboard' shows everything, no filtering needed

        // Update page title based on filter
        const titleElement = document.querySelector('.text-xl.font-semibold.text-gray-900.dark\\:text-white');
        if (titleElement) {
          let titleText = 'Mitra Management';
          if (filter === 'approved') {
            titleText = 'Mitra Sagawa (Disetujui)';
          } else if (filter === 'pending') {
            titleText = 'Menunggu Persetujuan';
          } else if (filter === 'all') {
            titleText = 'Semua User & Mitra';
          } else if (filter === 'dashboard') {
            titleText = 'Mitra Management';
          }
          titleElement.textContent = titleText;
        }

        if (mitras.length === 0) {
          let emptyMessage = 'Tidak ada data mitra';
          let emptyDescription = 'Belum ada mitra yang terdaftar dalam sistem';
          let emptyIcon = `
            <svg class="w-12 h-12 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1" d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z"></path>
            </svg>
          `;
          
          if (filter === 'approved') {
            emptyMessage = 'Tidak ada mitra yang disetujui';
            emptyDescription = 'Belum ada mitra yang mendapat persetujuan';
            emptyIcon = `
              <svg class="w-12 h-12 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
              </svg>
            `;
          } else if (filter === 'pending') {
            emptyMessage = 'Tidak ada mitra yang menunggu persetujuan';
            emptyDescription = 'Semua mitra sudah diproses';
            emptyIcon = `
              <svg class="w-12 h-12 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
              </svg>
            `;
          }
          
          tableBody.innerHTML = `
            <tr>
              <td colspan="7" class="px-6 py-12 text-center">
                <div class="flex flex-col items-center justify-center space-y-4">
                  ${emptyIcon}
                  <div>
                    <p class="text-lg font-medium text-gray-600">${emptyMessage}</p>
                    <p class="text-sm text-gray-500 mt-1">${emptyDescription}</p>
                  </div>
                </div>
              </td>
            </tr>
          `;
          
          // Still update stats even if no data
          const isUserMenu = filter !== 'dashboard';
          updateStats(result.data, isUserMenu);
          return;
        }

        let tableHTML = '';
        mitras.forEach((mitra: any, index: number) => {
          const statusColor = mitra.status === 'pending' ? 'bg-amber-100 text-amber-800 border-amber-200' :
                             mitra.status === 'approved' ? 'bg-green-100 text-green-800 border-green-200' :
                             'bg-red-100 text-red-800 border-red-200';
          
          const actionButtons = `
            <div class="flex flex-wrap gap-2">
              <button onclick="showMitraDetail('${mitra._id}')" class="inline-flex items-center px-3 py-1.5 bg-gradient-to-r from-blue-500 to-blue-600 text-white text-xs font-medium rounded-lg hover:from-blue-600 hover:to-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-1 transition-all duration-200 shadow-sm hover:shadow-md">
                <svg class="w-3 h-3 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path>
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"></path>
                </svg>
                Detail
              </button>
              ${mitra.status === 'pending' ? 
                `<button onclick="approveMitra('${mitra._id}', 'approve')" class="inline-flex items-center px-3 py-1.5 bg-gradient-to-r from-green-500 to-green-600 text-white text-xs font-medium rounded-lg hover:from-green-600 hover:to-green-700 focus:outline-none focus:ring-2 focus:ring-green-500 focus:ring-offset-1 transition-all duration-200 shadow-sm hover:shadow-md">
                   <svg class="w-3 h-3 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                     <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
                   </svg>
                   Approve
                 </button>
                 <button onclick="approveMitra('${mitra._id}', 'reject')" class="inline-flex items-center px-3 py-1.5 bg-gradient-to-r from-red-500 to-red-600 text-white text-xs font-medium rounded-lg hover:from-red-600 hover:to-red-700 focus:outline-none focus:ring-2 focus:ring-red-500 focus:ring-offset-1 transition-all duration-200 shadow-sm hover:shadow-md">
                   <svg class="w-3 h-3 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                     <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                   </svg>
                   Reject
                 </button>` :
                `<span class="inline-flex items-center px-3 py-1.5 bg-gray-100 text-gray-600 text-xs font-medium rounded-lg">
                   <svg class="w-3 h-3 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                     ${mitra.status === 'approved' ? 
                       '<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>' :
                       '<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>'
                     }
                   </svg>
                   ${mitra.status === 'approved' ? 'Disetujui' : 'Ditolak'}
                 </span>`
              }
              <button onclick="deleteMitra('${mitra._id}', '${mitra.namaMitra}')" class="inline-flex items-center px-3 py-1.5 bg-gradient-to-r from-red-500 to-red-600 text-white text-xs font-medium rounded-lg hover:from-red-600 hover:to-red-700 focus:outline-none focus:ring-2 focus:ring-red-500 focus:ring-offset-1 transition-all duration-200 shadow-sm hover:shadow-md">
                <svg class="w-3 h-3 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
                </svg>
                Hapus
              </button>
            </div>
          `;

          tableHTML += `
            <tr class="bg-white hover:bg-gradient-to-r hover:from-orange-50/30 hover:to-amber-50/30 transition-all duration-200 ${index % 2 === 0 ? 'bg-gray-50/30' : ''}">
              <th scope="row" class="px-6 py-4 font-semibold text-gray-900">
                ${mitra.namaMitra || 'N/A'}
              </th>
              <td class="px-6 py-4 text-gray-700">${mitra.email || 'N/A'}</td>
              <td class="px-6 py-4 text-gray-700">${mitra.noHp || 'N/A'}</td>
              <td class="px-6 py-4">
                <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800 border border-blue-200">
                  ${mitra.paketUsaha || 'N/A'}
                </span>
              </td>
              <td class="px-6 py-4">
                ${mitra.paketUsaha === 'RM Nusantara' && mitra.rmNusantaraSubMenu ? 
                  `<span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-purple-100 text-purple-800 border border-purple-200">${mitra.rmNusantaraSubMenu}</span>` : 
                  '<span class="text-gray-400 text-xs">-</span>'
                }
              </td>
              <td class="px-6 py-4">
                <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-semibold border ${statusColor}">
                  ${mitra.status === 'pending' ? 
                    '<svg class="w-3 h-3 mr-1 animate-pulse" fill="currentColor" viewBox="0 0 20 20"><path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm1-12a1 1 0 10-2 0v4a1 1 0 00.293.707l2.828 2.829a1 1 0 101.415-1.415L11 9.586V6z" clip-rule="evenodd"></path></svg>' :
                    mitra.status === 'approved' ? 
                    '<svg class="w-3 h-3 mr-1" fill="currentColor" viewBox="0 0 20 20"><path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"></path></svg>' :
                    '<svg class="w-3 h-3 mr-1" fill="currentColor" viewBox="0 0 20 20"><path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd"></path></svg>'
                  }
                  ${mitra.status || 'pending'}
                </span>
              </td>
              <td class="px-6 py-4">
                ${actionButtons}
              </td>
            </tr>
          `;
        });

        tableBody.innerHTML = tableHTML;
        
        // Update stats based on current view
        const isUserMenu = filter !== 'dashboard';
        updateStats(result.data, isUserMenu);
        
        // Update chart with real data
        updateChartWithRealData(result.data);
      } else {
        tableBody.innerHTML = '<tr><td colspan="7" class="px-6 py-4 text-center text-red-500">Error loading data</td></tr>';
      }
    } catch (error: unknown) {
      console.error('Error loading mitra data:', error);
      const errorMessage = error instanceof Error ? error.message : 'Unknown error';
      tableBody.innerHTML = `<tr><td colspan="7" class="px-6 py-4 text-center text-red-500">Error: ${errorMessage}</td></tr>`;
    }
  }

  // Function to approve/reject mitra
  async function approveMitra(mitraId: string, action: 'approve' | 'reject') {
    const token = localStorage.getItem('adminToken');

    if (!token) {
      window.location.href = '/admin/login';
      return;
    }

    const actionText = action === 'approve' ? 'menyetujui' : 'menolak';
    
    const result = await import('sweetalert2').then(Swal => {
      return Swal.default.fire({
        title: `Apakah anda ${actionText} Mitra?`,
        text: `Apakah anda yakin untuk ${actionText} mitra ini?`,
        icon: "question",
        showCancelButton: true,
        confirmButtonColor: "#3085d6",
        cancelButtonColor: "#d33",
        confirmButtonText: "Ya",
        cancelButtonText: "Tidak"
      });
    });

    if (!result.isConfirmed) {
      return;
    }

    try {
      const response = await fetch(`${API_URL}/api/admin/mitra/approve`, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          mitraId: mitraId,
          action: action
        }),
      });

      const data = await response.json();

      if (response.ok && data.success) {
        await import('sweetalert2').then(Swal => {
          Swal.default.fire({
            title: action === 'approve' ? "Approved!" : "Rejected!",
            text: action === 'approve' ? "Mitra disetujui" : "Mitra ditolak",
            icon: "success"
          });
        });
        // Reload mitra data with current filter
        const activeFilter = getCurrentActiveFilter();
        loadMitraData(activeFilter);
      } else {
        await import('sweetalert2').then(Swal => {
          Swal.default.fire({
            title: "Error",
            text: data.error || 'Gagal memproses permintaan',
            icon: "error"
          });
        });
      }
    } catch (error: unknown) {
      console.error('Error approving mitra:', error);
      const errorMessage = error instanceof Error ? error.message : 'Unknown error';
      await import('sweetalert2').then(Swal => {
        Swal.default.fire({
          title: "Error",
          text: `Terjadi kesalahan saat memproses permintaan: ${errorMessage}`,
          icon: "error"
        });
      });
    }
  }

  // Function to delete mitra
  async function deleteMitra(mitraId: string, namaMitra: string) {
    const token = localStorage.getItem('adminToken');

    if (!token) {
      window.location.href = '/admin/login';
      return;
    }

    const result = await import('sweetalert2').then(Swal => {
      return Swal.default.fire({
        title: "Hapus Mitra?",
        text: `Apakah anda yakin ingin menghapus mitra ${namaMitra}? Data yang dihapus tidak dapat dikembalikan.`,
        icon: "warning",
        showCancelButton: true,
        confirmButtonColor: "#d33",
        cancelButtonColor: "#3085d6",
        confirmButtonText: "Ya, Hapus",
        cancelButtonText: "Batal"
      });
    });

    if (!result.isConfirmed) {
      return;
    }

    try {
      const response = await fetch(`${API_URL}/api/admin/mitra/${mitraId}`, {
        method: 'DELETE',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json',
        },
      });

      const data = await response.json();

      if (response.ok && data.success) {
        await import('sweetalert2').then(Swal => {
          Swal.default.fire({
            title: "Terhapus!",
            text: "Data mitra telah dihapus dari database",
            icon: "success"
          });
        });
        // Reload mitra data with current filter
        const activeFilter = getCurrentActiveFilter();
        loadMitraData(activeFilter);
      } else {
        await import('sweetalert2').then(Swal => {
          Swal.default.fire({
            title: "Error",
            text: data.message || 'Gagal menghapus data mitra',
            icon: "error"
          });
        });
      }
    } catch (error: unknown) {
      console.error('Error deleting mitra:', error);
      const errorMessage = error instanceof Error ? error.message : 'Unknown error';
      await import('sweetalert2').then(Swal => {
        Swal.default.fire({
          title: "Error",
          text: `Terjadi kesalahan saat menghapus data mitra: ${errorMessage}`,
          icon: "error"
        });
      });
    }
  }

  // Make functions globally available by extending Window interface
  declare global {
    interface Window {
      approveMitra: (mitraId: string, action: 'approve' | 'reject') => Promise<void>;
      deleteMitra: (mitraId: string, namaMitra: string) => Promise<void>;
      showMitraDetail: (mitraId: string) => Promise<void>;
      closeMitraDetailModal: () => void;
      openImageModal: (imageData: string, title: string) => void;
      closeImageModal: () => void;
    }
  }

  (window as any).approveMitra = approveMitra;
  (window as any).deleteMitra = deleteMitra;

  // Function to show mitra detail modal
  async function showMitraDetail(mitraId: string) {
    const token = localStorage.getItem('adminToken');
    const modal = document.getElementById('mitraDetailModal');
    const content = document.getElementById('mitraDetailContent');

    if (!token || !modal || !content) {
      return;
    }

    try {
      // Show modal first
      modal.classList.remove('hidden');
      content.innerHTML = '<div class="col-span-2 text-center">Loading...</div>';

      const response = await fetch(`${API_URL}/api/admin/mitra/${mitraId}`, {
        method: 'GET',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json',
        },
      });

      if (!response.ok) {
        throw new Error('Failed to fetch mitra detail');
      }

      const result = await response.json();

      if (result.success && result.data) {
        const mitra = result.data;
        displayMitraDetail(mitra);
      } else {
        content.innerHTML = '<div class="col-span-2 text-center text-red-500">Error loading detail</div>';
      }
    } catch (error: unknown) {
      console.error('Error loading mitra detail:', error);
      const errorMessage = error instanceof Error ? error.message : 'Unknown error';
      content.innerHTML = `<div class="col-span-2 text-center text-red-500">Error: ${errorMessage}</div>`;
    }
  }

  // Function to display mitra detail in modal
  function displayMitraDetail(mitra: any) {
    const content = document.getElementById('mitraDetailContent');
    if (!content) return;

    const formatCurrency = (amount: number) => {
      return new Intl.NumberFormat('id-ID', {
        style: 'currency',
        currency: 'IDR'
      }).format(amount);
    };

    const formatDate = (dateString: string) => {
      return new Date(dateString).toLocaleDateString('id-ID', {
        year: 'numeric',
        month: 'long',
        day: 'numeric',
        hour: '2-digit',
        minute: '2-digit'
      });
    };

    content.innerHTML = `


      <!-- Informasi Data Pribadi -->
      <div class="bg-gray-50 p-4 rounded-lg">
        <h4 class="font-semibold text-gray-900 mb-3">Informasi Data Pribadi</h4>
        <div class="space-y-2">
          <div><strong>Nama Mitra:</strong> ${mitra.namaMitra || 'N/A'}</div>
          <div><strong>Email:</strong> ${mitra.email || 'N/A'}</div>
          <div><strong>No HP:</strong> ${mitra.noHp || 'N/A'}</div>
          <div><strong>Alamat:</strong> ${mitra.alamatMitra || 'N/A'}</div>
          <div><strong>Status:</strong> 
            <span class="px-2 py-1 text-xs rounded-full ${mitra.status === 'pending' ? 'bg-yellow-100 text-yellow-800' : mitra.status === 'approved' ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'}">
              ${mitra.status || 'pending'}
            </span>
          </div>
        </div>
      </div>

      <!-- Informasi Kemitraan -->
      <div class="bg-gray-50 p-4 rounded-lg">
        <h4 class="font-semibold text-gray-900 mb-3">Informasi Kemitraan</h4>
        <div class="space-y-2">
          <div><strong>Sistem Kemitraan:</strong> ${mitra.sistemKemitraan || 'N/A'}</div>
          <div><strong>Sales:</strong> ${mitra.sales || 'N/A'}</div>
          <div><strong>Paket Usaha:</strong> ${mitra.paketUsaha || 'N/A'}</div>
          ${mitra.paketUsaha === 'RM Nusantara' && mitra.rmNusantaraSubMenu ? `<div><strong>Sub Brand:</strong> ${mitra.rmNusantaraSubMenu}</div>` : ''}
        </div>
      </div>

      <!-- Informasi Keuangan -->
      <div class="bg-gray-50 p-4 rounded-lg">
        <h4 class="font-semibold text-gray-900 mb-3">Informasi Keuangan</h4>
        <div class="space-y-2">
          <div><strong>Nilai Paket:</strong> ${mitra.nilaiPaketUsaha || 'N/A'}</div>
          <div><strong>Harga Paket:</strong> ${mitra.hargaPaket ? formatCurrency(mitra.hargaPaket) : 'N/A'}</div>
          <div><strong>Nominal DP:</strong> ${mitra.nominalDP ? formatCurrency(mitra.nominalDP) : 'N/A'}</div>
          <div><strong>Nominal Full:</strong> ${mitra.nominalFull ? formatCurrency(mitra.nominalFull) : 'N/A'}</div>
          <div><strong>Yang Harus Dibayar:</strong> ${mitra.yangHarusDibayar ? formatCurrency(mitra.yangHarusDibayar) : 'N/A'}</div>
          <div><strong>Kekurangan:</strong> ${mitra.kekurangan ? formatCurrency(mitra.kekurangan) : 'N/A'}</div>
        </div>
      </div>

      <!-- Informasi Pembayaran -->
      <div class="bg-gray-50 p-4 rounded-lg">
        <h4 class="font-semibold text-gray-900 mb-3">Informasi Pembayaran</h4>
        <div class="space-y-2">
          <div><strong>Metode Pembayaran:</strong> Transfer</div>
          <div><strong>Bank Pengirim:</strong> ${mitra.bankPengirim || 'N/A'}</div>
          <div><strong>No Rekening:</strong> ${mitra.noRekPengirim || 'N/A'}</div>
          <div><strong>Nama Pengirim:</strong> ${mitra.namaPengirim || 'N/A'}</div>
        </div>
      </div>

      <!-- File Dokumen -->
      <div class="bg-gray-50 p-4 rounded-lg col-span-2">
        <h4 class="font-semibold text-gray-900 mb-4">Dokumen & Foto</h4>
        <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
          <!-- Foto KTP -->
          <div class="space-y-2">
            <strong>Foto KTP, NPWP & Foto Mitra:</strong>
            ${mitra.fotoKTP && mitra.fotoKTP !== '' ? `
              <div class="mt-2">
                <div class="border rounded-lg overflow-hidden bg-white shadow-sm">
                  <img src="${mitra.fotoKTP}" 
                       alt="Foto KTP" 
                       class="w-full h-48 object-contain bg-gray-50 cursor-pointer hover:bg-gray-100 transition-all"
                       onclick="openImageModal('${mitra.fotoKTP}', 'Foto KTP - ${mitra.namaMitra}')"
                       onerror="this.style.display='none'; this.nextElementSibling.style.display='block';">
                  <div class="text-red-500 text-sm p-4 hidden text-center">
                    <p>Gagal memuat gambar KTP</p>
                  </div>
                </div>
                <p class="text-xs text-gray-500 mt-2 text-center">Klik untuk memperbesar</p>
              </div>
            ` : '<span class="text-gray-500">Tidak ada foto KTP</span>'}
          </div>
          
          <!-- Bukti Transfer -->
          <div class="space-y-2">
            <strong>Bukti Transfer:</strong>
            ${mitra.buktiTransfer && mitra.buktiTransfer !== '' ? `
              <div class="mt-2">
                <div class="border rounded-lg overflow-hidden bg-white shadow-sm">
                  <img src="${mitra.buktiTransfer}" 
                       alt="Bukti Transfer" 
                       class="w-full h-48 object-contain bg-gray-50 cursor-pointer hover:bg-gray-100 transition-all"
                       onclick="openImageModal('${mitra.buktiTransfer}', 'Bukti Transfer - ${mitra.namaMitra}')"
                       onerror="this.style.display='none'; this.nextElementSibling.style.display='block';">
                  <div class="text-red-500 text-sm p-4 hidden text-center">
                    <p>Gagal memuat bukti transfer</p>
                  </div>
                </div>
                <p class="text-xs text-gray-500 mt-2 text-center">Klik untuk memperbesar</p>
              </div>
            ` : '<span class="text-gray-500">Tidak ada bukti transfer</span>'}
          </div>
        </div>
      </div>

      <!-- Informasi Waktu -->
      <div class="bg-gray-50 p-4 rounded-lg col-span-2">
        <h4 class="font-semibold text-gray-900 mb-3">Informasi Waktu</h4>
        <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div><strong>Dibuat:</strong> ${mitra.createdAt ? formatDate(mitra.createdAt) : 'N/A'}</div>
          <div><strong>Diupdate:</strong> ${mitra.updatedAt ? formatDate(mitra.updatedAt) : 'N/A'}</div>
        </div>
      </div>
    `;
  }

  // Function to close mitra detail modal
  function closeMitraDetailModal() {
    const modal = document.getElementById('mitraDetailModal');
    if (modal) {
      modal.classList.add('hidden');
    }
  }
  
  function isBase64OrDataUrl(str: string): boolean {
    if (!str) return false;
    // Cek jika string dimulai dengan data URL
    if (str.startsWith('data:')) return true;
    if (str.length > 50) return true;
    return false;
  }

  // Function to open image modal
  function openImageModal(imageData: string, title: string) {
    const modal = document.getElementById('imageModal');
    const image = document.getElementById('modalImage') as HTMLImageElement;
    const titleElement = document.getElementById('modalImageTitle');
    
    if (modal && image && titleElement) {
      // Show modal first
      modal.classList.remove('hidden');
      
      // Handle different image data formats
      let imageSrc = '';
      if (imageData.startsWith('data:')) {
        // Already a data URL
        imageSrc = imageData;
      } else {
        // Assume base64 data, add data URL prefix
        imageSrc = `${imageData}`;
      }
      
      console.log('Opening image modal with:', { title, imageSrc: imageSrc.substring(0, 50) + '...' });
      
      image.src = imageSrc;
      image.alt = title;
      titleElement.textContent = title;
      
      image.onerror = function() {
        console.error('Failed to load image:', imageSrc.substring(0, 100));
        titleElement.textContent = title + ' (Gagal memuat gambar)';
        // Show a placeholder message
        image.style.display = 'none';
        const errorMsg = document.createElement('div');
        errorMsg.className = 'text-white text-center p-8';
        errorMsg.innerHTML = `
          <div class="text-red-500 bg-white p-4 rounded">
            <p class="text-lg">Gagal memuat gambar</p>
            <p class="text-sm mt-2">Data gambar mungkin rusak</p>
          </div>
        `;
        image.parentElement?.appendChild(errorMsg);
      };
    }
  }

  // Function to close image modal
  function closeImageModal() {
    const modal = document.getElementById('imageModal');
    if (modal) {
      modal.classList.add('hidden');
    }
  }

  // Close image modal when clicking outside the image
  document.addEventListener('click', function(event) {
    const imageModal = document.getElementById('imageModal');
    const modalImage = document.getElementById('modalImage');
    
    if (imageModal && !imageModal.classList.contains('hidden')) {
      if (event.target === imageModal && event.target !== modalImage) {
        closeImageModal();
      }
    }
  });

  // Close image modal with Escape key
  document.addEventListener('keydown', function(event) {
    if (event.key === 'Escape') {
      closeImageModal();
    }
  });

  (window as any).showMitraDetail = showMitraDetail;
  (window as any).closeMitraDetailModal = closeMitraDetailModal;
  (window as any).openImageModal = openImageModal;
  (window as any).closeImageModal = closeImageModal;

  // Chart.js Payment Chart Implementation
  let paymentChart: any = null;
  let chartUpdateInterval: NodeJS.Timeout | null = null;

  // Declare window Chart for TypeScript
  declare global {
    interface Window {
      Chart: any;
    }
  }

  function initializePaymentChart() {
    const ctx = document.getElementById('paymentChart');
    if (!ctx) return;

    // Check if device is mobile
    const isMobile = window.innerWidth <= 640;
    const isTablet = window.innerWidth > 640 && window.innerWidth <= 1024;

    // Initialize the chart with empty data
    paymentChart = new (window as any).Chart(ctx, {
      type: 'line',
      data: {
        labels: [],
        datasets: [
          {
            label: 'DP (Down Payment)',
            data: [],
            borderColor: 'rgb(245, 158, 11)',
            backgroundColor: 'rgba(245, 158, 11, 0.1)',
            borderWidth: isMobile ? 2 : 3,
            fill: true,
            tension: 0.4,
            pointRadius: isMobile ? 4 : 6,
            pointHoverRadius: isMobile ? 6 : 8,
            pointBackgroundColor: 'rgb(245, 158, 11)',
            pointBorderColor: '#fff',
            pointBorderWidth: 2,
          },
          {
            label: 'FP (Full Payment)',
            data: [],
            borderColor: 'rgb(239, 68, 68)',
            backgroundColor: 'rgba(239, 68, 68, 0.1)',
            borderWidth: isMobile ? 2 : 3,
            fill: true,
            tension: 0.4,
            pointRadius: isMobile ? 4 : 6,
            pointHoverRadius: isMobile ? 6 : 8,
            pointBackgroundColor: 'rgb(239, 68, 68)',
            pointBorderColor: '#fff',
            pointBorderWidth: 2,
          }
        ]
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        layout: {
          padding: {
            top: isMobile ? 10 : 20,
            bottom: isMobile ? 10 : 20,
            left: isMobile ? 5 : 10,
            right: isMobile ? 5 : 10
          }
        },
        plugins: {
          legend: {
            display: !isMobile, // Hide legend on mobile to save space
            position: 'top',
            labels: {
              usePointStyle: true,
              padding: isMobile ? 10 : 20,
              font: {
                size: isMobile ? 10 : 12,
                weight: '600'
              }
            }
          },
          tooltip: {
            backgroundColor: 'rgba(0, 0, 0, 0.8)',
            titleColor: '#fff',
            bodyColor: '#fff',
            borderColor: 'rgba(251, 191, 36, 0.5)',
            borderWidth: 1,
            cornerRadius: 8,
            displayColors: true,
            titleFont: {
              size: isMobile ? 12 : 14
            },
            bodyFont: {
              size: isMobile ? 11 : 13
            },
            padding: isMobile ? 8 : 12,
            callbacks: {
              label: function(context: any) {
                return context.dataset.label + ': ' + context.parsed.y + ' payments';
              }
            }
          }
        },
        scales: {
          x: {
            display: true,
            title: {
              display: !isMobile, // Hide title on mobile
              text: 'Waktu',
              color: '#6B7280',
              font: {
                size: isMobile ? 10 : 12,
                weight: '600'
              }
            },
            grid: {
              color: 'rgba(251, 191, 36, 0.1)',
              drawBorder: false,
            },
            ticks: {
              color: '#6B7280',
              font: {
                size: isMobile ? 9 : 11
              },
              maxTicksLimit: isMobile ? 6 : 10,
              maxRotation: isMobile ? 45 : 0
            }
          },
          y: {
            display: true,
            title: {
              display: !isMobile, // Hide title on mobile
              text: 'Jumlah Pembayaran',
              color: '#6B7280',
              font: {
                size: isMobile ? 10 : 12,
                weight: '600'
              }
            },
            beginAtZero: true,
            grid: {
              color: 'rgba(251, 191, 36, 0.1)',
              drawBorder: false,
            },
            ticks: {
              color: '#6B7280',
              font: {
                size: isMobile ? 9 : 11
              },
              stepSize: 1,
              padding: isMobile ? 5 : 10
            }
          }
        },
        animation: {
          duration: isMobile ? 500 : 1000,
          easing: 'easeInOutQuart'
        },
        interaction: {
          intersect: false,
          mode: 'index'
        }
      }
    });

    // Start real-time updates
    startRealTimeUpdates();

    // Handle window resize for responsive updates
    window.addEventListener('resize', function() {
      if (paymentChart) {
        const newIsMobile = window.innerWidth <= 640;
        const currentIsMobile = paymentChart.options.plugins.legend.display === false;
        
        // Only update if mobile state changed
        if (newIsMobile !== currentIsMobile) {
          setTimeout(() => {
            paymentChart.destroy();
            initializePaymentChart();
          }, 100);
        }
      }
    });
  }

  function startRealTimeUpdates() {
    // Initial load with real data
    updateChartDataFromAPI();
    
    // Update every 30 seconds
    chartUpdateInterval = setInterval(updateChartDataFromAPI, 30000);
  }

  async function updateChartDataFromAPI() {
    try {
      const token = localStorage.getItem('adminToken');
      if (!token) return;

      // Fetch mitra data (same as dashboard stats)
      const response = await fetch(`${API_URL}/api/admin/mitra`, {
        method: 'GET',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        }
      });

      if (response.ok) {
        const result = await response.json();
        if (result.success && result.data) {
          updateChartWithRealData(result.data);
        }
      } else {
        console.error('Failed to fetch mitra data for chart:', response.status);
      }
    } catch (error) {
      console.error('Error fetching mitra data for chart:', error);
    }
  }

  function formatRupiah(amount: number): string {
    return new Intl.NumberFormat('id-ID', {
      style: 'currency',
      currency: 'IDR',
      minimumFractionDigits: 0,
      maximumFractionDigits: 0
    }).format(amount);
  }

  // Initialize chart when DOM is ready
  document.addEventListener('DOMContentLoaded', function() {
    // Wait a bit for the DOM to be fully ready
    setTimeout(initializePaymentChart, 100);
  });

  // Clean up interval when page unloads
  window.addEventListener('beforeunload', function() {
    if (chartUpdateInterval) {
      clearInterval(chartUpdateInterval);
    }
  });
</script>
</Layout>