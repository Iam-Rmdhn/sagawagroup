---
// Admin Dashboard
import Layout from '../../layouts/Layout.astro';
import AdminSidebar from '../../components/admin/sidebar/AdminSidebar.astro';
import AdminNavbar from '../../components/admin/navbar/AdminNavbar.astro';
---
<Layout title="Admin Dashboard">
  <!-- Custom Styles for Dropdown -->
  <style>
    #users-dropdown.hidden {
      display: none;
    }
    #users-dropdown {
      transition: all 0.2s ease;
    }
    .dropdown-active {
      background-color: #f3f4f6;
      color: #1f2937;
    }
    .dark .dropdown-active {
      background-color: #374151;
      color: white;
    }
    
    /* Active menu styling */
    .active-menu {
      background-color: #f3f4f6;
      color: #1f2937;
    }
    .dark .active-menu {
      background-color: #374151;
      color: white;
    }
    
    /* Stats visibility and layout */
    .stats-set {
      display: grid;
      gap: 1rem;
      width: 100%;
    }
    .stats-set.hidden {
      display: none;
    }
    
    /* Dashboard stats - 4 cards in a row */
    .dashboard-stats {
      grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    }
    
    /* User stats - 2 cards side by side, centered */
    .user-stats {
      grid-template-columns: repeat(2, minmax(200px, 1fr));
      max-width: 600px;
      margin: 0 auto;
    }
    
    /* Responsive behavior */
    @media (max-width: 768px) {
      .stats-set {
        grid-template-columns: 1fr;
      }
      .user-stats {
        max-width: none;
        margin: 0;
      }
    }
    
    @media (min-width: 768px) and (max-width: 1024px) {
      .dashboard-stats {
        grid-template-columns: repeat(2, 1fr);
      }
    }
  </style>

  <!-- Authentication Protection Script -->
  <script>
    // Cek apakah user sudah login
    if (typeof window !== 'undefined') {
      const token = localStorage.getItem('adminToken');
      const user = localStorage.getItem('adminUser');
      
      if (!token || !user) {
        window.location.href = '/admin/login';
      }
    }
  </script>

  <AdminNavbar />

<AdminSidebar currentPage="dashboard" />

<div class="p-4 sm:ml-64">
   <div class="p-4 border-2 border-gray-200 border-dashed rounded-lg dark:border-gray-700 mt-14">
      <!-- Dynamic Stats Cards -->
      <div id="stats-container" class="mb-4">
         <!-- Dashboard Stats (default) -->
         <div class="stats-set dashboard-stats">
            <div class="bg-white dark:bg-gray-800 p-4 rounded-lg shadow">
               <h3 class="text-lg font-semibold text-gray-900 dark:text-white">Total Users</h3>
               <p class="text-2xl text-gray-900 dark:text-white" id="total-users">-</p>
            </div>
            <div class="bg-white dark:bg-gray-800 p-4 rounded-lg shadow">
               <h3 class="text-lg font-semibold text-gray-900 dark:text-white">DP Masuk</h3>
               <p class="text-2xl text-gray-900 dark:text-white" id="dp-masuk">-</p>
            </div>
            <div class="bg-white dark:bg-gray-800 p-4 rounded-lg shadow">
               <h3 class="text-lg font-semibold text-gray-900 dark:text-white">FP Masuk</h3>
               <p class="text-2xl text-gray-900 dark:text-white" id="fp-masuk">-</p>
            </div>
            <div class="bg-white dark:bg-gray-800 p-4 rounded-lg shadow">
               <h3 class="text-lg font-semibold text-gray-900 dark:text-white">Pending</h3>
               <p class="text-2xl text-gray-900 dark:text-white" id="pending-dashboard">-</p>
            </div>
         </div>
         
         <!-- User Stats (for User menu) -->
         <div class="stats-set user-stats hidden">
            <div class="bg-white dark:bg-gray-800 p-4 rounded-lg shadow">
               <h3 class="text-lg font-semibold text-gray-900 dark:text-white">Total Users</h3>
               <p class="text-2xl text-gray-900 dark:text-white" id="total-users-user">-</p>
            </div>
            <div class="bg-white dark:bg-gray-800 p-4 rounded-lg shadow">
               <h3 class="text-lg font-semibold text-gray-900 dark:text-white">Pending</h3>
               <p class="text-2xl text-gray-900 dark:text-white" id="pending-user">-</p>
            </div>
         </div>
      </div>

      <div class="mb-4 bg-white rounded-lg shadow dark:bg-gray-800">
         <div class="flex justify-between items-center p-4">
            <h3 class="text-xl font-semibold text-gray-900 dark:text-white">Mitra Management</h3>
            <button id="refresh-btn" class="px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600 transition">
               Refresh Data
            </button>
         </div>
         <div class="overflow-x-auto">
            <table class="w-full text-sm text-left text-gray-500 dark:text-gray-400">
               <thead class="text-xs text-gray-700 uppercase bg-gray-50 dark:bg-gray-700 dark:text-gray-400">
                  <tr>
                     <th scope="col" class="px-6 py-3">Nama Mitra</th>
                     <th scope="col" class="px-6 py-3">Email</th>
                     <th scope="col" class="px-6 py-3">No HP</th>
                     <th scope="col" class="px-6 py-3">Paket Usaha</th>
                     <th scope="col" class="px-6 py-3">Sub Brand</th>
                     <th scope="col" class="px-6 py-3">Status</th>
                     <th scope="col" class="px-6 py-3">Actions</th>
                  </tr>
               </thead>
               <tbody id="mitra-table-body">
                  <tr>
                     <td colspan="7" class="px-6 py-4 text-center text-gray-500">Loading...</td>
                  </tr>
               </tbody>
            </table>
         </div>
      </div>
   </div>
</div>

<!-- Modal untuk Detail Mitra -->
<div id="mitraDetailModal" class="hidden fixed inset-0 z-50 overflow-y-auto">
  <div class="flex items-center justify-center min-h-screen px-4 pt-4 pb-20 text-center sm:block sm:p-0">
    <!-- Background overlay -->
    <div class="fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity" onclick="closeMitraDetailModal()"></div>
    
    <!-- Modal panel -->
    <div class="inline-block align-bottom bg-white rounded-lg text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-4xl sm:w-full">
      <div class="bg-white px-4 pt-5 pb-4 sm:p-6 sm:pb-4">
        <div class="flex justify-between items-center mb-4">
          <h3 class="text-lg leading-6 font-medium text-gray-900">Detail Mitra</h3>
          <button onclick="closeMitraDetailModal()" class="text-gray-400 hover:text-gray-600">
            <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
            </svg>
          </button>
        </div>
        
        <!-- Modal Content -->
        <div id="mitraDetailContent" class="grid grid-cols-1 md:grid-cols-2 gap-6"></div>
        
        <!-- Modal Footer -->
        <div class="mt-6 flex justify-end space-x-3">
          <button onclick="closeMitraDetailModal()" class="px-4 py-2 bg-gray-300 text-gray-700 rounded hover:bg-gray-400 transition">
            Tutup
          </button>
        </div>
      </div>
    </div>
  </div>
</div>

<!-- Modals -->
<div id="imageModal" class="hidden fixed inset-0 z-50 overflow-y-auto bg-black bg-opacity-30">
  <div class="flex items-center justify-center w-full h-full p-4">
    <!-- Close button -->
    <button onclick="closeImageModal()" class="absolute top-4 right-4 text-white hover:text-gray-300 z-20">
      <svg class="w-8 h-8" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
      </svg>
    </button>
    
    <!-- Image container -->
    <div class="max-w-full max-h-full">
      <img id="modalImage" src="" alt="" class="max-w-full max-h-full object-contain">
      <p id="modalImageTitle" class="text-black text-center mt-4 text-lg font-medium"></p>
    </div>
  </div>
</div>

<script>
  // API URL configuration
  const API_URL = import.meta.env.PUBLIC_API_URL || 'http://localhost:4000';
  
  // Listen for navbar actions
  document.addEventListener('adminNavbarAction', function(event: Event) {
    const customEvent = event as CustomEvent;
    const action = customEvent.detail.action;
    
    if (action === 'logout') {
      // Konfirmasi logout
      if (confirm('Apakah Anda yakin ingin logout?')) {
        // Hapus data dari localStorage
        localStorage.removeItem('adminToken');
        localStorage.removeItem('adminUser');
        
        // Redirect ke login page
        window.location.href = '/admin/login';
      }
    }
  });

  // Load user information and update navbar
  document.addEventListener('DOMContentLoaded', function() {
    const userString = localStorage.getItem('adminUser');
    if (userString) {
      try {
        const user = JSON.parse(userString);
        
        // Update navbar user info using the exposed function
        if (typeof (window as any).adminNavbar !== 'undefined') {
          (window as any).adminNavbar.updateUserInfo(user);
        }
        
      } catch (error) {
        console.error('Error parsing user data:', error);
      }
    }

    // Load mitra data
    loadMitraData('dashboard');

    // Listen for sidebar actions
    document.addEventListener('adminSidebarAction', function(event: Event) {
      const customEvent = event as CustomEvent;
      const action = customEvent.detail.action;
      
      switch(action) {
        case 'showAllUsers':
          switchToUserStats();
          loadMitraData('all');
          break;
        case 'showApprovedMitra':
          switchToUserStats();
          loadMitraData('approved');
          break;
        case 'showPendingMitra':
          switchToUserStats();
          loadMitraData('pending');
          break;
        case 'showDashboard':
          switchToDashboardStats();
          loadMitraData('dashboard');
          break;
      }
    });

    // Navbar interactions are now handled by AdminNavbar component

    // Handle refresh button
    const refreshBtn = document.getElementById('refresh-btn');
    if (refreshBtn) {
      refreshBtn.addEventListener('click', function(e) {
        e.preventDefault();
        // Get current active filter
        const activeFilter = getCurrentActiveFilter();
        loadMitraData(activeFilter);
      });
    }

    // Sidebar toggle is now handled by AdminNavbar component
  });

  // Function to switch to User stats
  function switchToUserStats() {
    const dashboardStats = document.querySelector('.dashboard-stats');
    const userStats = document.querySelector('.user-stats');
    
    if (dashboardStats && userStats) {
      dashboardStats.classList.add('hidden');
      userStats.classList.remove('hidden');
    }
  }

  // Function to switch to Dashboard stats
  function switchToDashboardStats() {
    const dashboardStats = document.querySelector('.dashboard-stats');
    const userStats = document.querySelector('.user-stats');
    const usersDropdown = document.getElementById('users-dropdown');
    
    if (dashboardStats && userStats) {
      userStats.classList.add('hidden');
      dashboardStats.classList.remove('hidden');
    }
    
    // Close users dropdown when switching to dashboard
    if (usersDropdown) {
      usersDropdown.classList.add('hidden');
    }
  }

  // Function to update stats based on data
  function updateStats(mitras: any[], isUserMenu: boolean = false) {
    const totalUsers = mitras.length;
    const pendingCount = mitras.filter(m => m.status === 'pending').length;
    const approvedCount = mitras.filter(m => m.status === 'approved').length;
    
    // Calculate DP and FP totals
    const dpTotal = mitras
      .filter(m => m.nilaiPaketUsaha === 'DP')
      .reduce((sum, m) => sum + (m.yangHarusDibayar || 0), 0);
      
    const fpTotal = mitras
      .filter(m => m.nilaiPaketUsaha === 'Full Payment')
      .reduce((sum, m) => sum + (m.yangHarusDibayar || 0), 0);

    if (isUserMenu) {
      // Update User stats
      const totalUsersEl = document.getElementById('total-users-user');
      const pendingUserEl = document.getElementById('pending-user');
      
      if (totalUsersEl) totalUsersEl.textContent = totalUsers.toString();
      if (pendingUserEl) pendingUserEl.textContent = pendingCount.toString();
    } else {
      // Update Dashboard stats
      const totalUsersEl = document.getElementById('total-users');
      const dpMasukEl = document.getElementById('dp-masuk');
      const fpMasukEl = document.getElementById('fp-masuk');
      const pendingEl = document.getElementById('pending-dashboard');
      
      if (totalUsersEl) totalUsersEl.textContent = totalUsers.toString();
      if (dpMasukEl) dpMasukEl.textContent = formatCurrency(dpTotal);
      if (fpMasukEl) fpMasukEl.textContent = formatCurrency(fpTotal);
      if (pendingEl) pendingEl.textContent = pendingCount.toString();
    }
  }

  // Helper function to format currency
  function formatCurrency(amount: number): string {
    return new Intl.NumberFormat('id-ID', {
      style: 'currency',
      currency: 'IDR',
      minimumFractionDigits: 0,
      maximumFractionDigits: 0
    }).format(amount);
  }

  // Active menu management functions are now handled by the AdminSidebar component
  // Access them via window.adminSidebar if needed

  // Function to get current active filter
  function getCurrentActiveFilter(): string {
    const dashboardBtn = document.getElementById('dashboard-menu-btn');
    const showAllUsers = document.getElementById('show-all-users');
    const showApprovedMitra = document.getElementById('show-approved-mitra');
    const showPendingMitra = document.getElementById('show-pending-mitra');
    
    // Check if dashboard menu is active
    if (dashboardBtn && dashboardBtn.classList.contains('active-menu')) {
      return 'dashboard';
    }
    
    // Check if we're in dashboard stats mode
    const dashboardStats = document.querySelector('.dashboard-stats');
    const userStats = document.querySelector('.user-stats');
    
    if (dashboardStats && !dashboardStats.classList.contains('hidden')) {
      return 'dashboard';
    }

    if (showAllUsers && showAllUsers.classList.contains('bg-gray-100')) {
      return 'all';
    } else if (showApprovedMitra && showApprovedMitra.classList.contains('bg-gray-100')) {
      return 'approved';
    } else if (showPendingMitra && showPendingMitra.classList.contains('bg-gray-100')) {
      return 'pending';
    }
    
    return 'dashboard'; // default to dashboard
  }

  // Function to load mitra data
  async function loadMitraData(filter: string = 'all') {
    const tableBody = document.getElementById('mitra-table-body') as HTMLTableSectionElement | null;
    const token = localStorage.getItem('adminToken');

    if (!token) {
      window.location.href = '/admin/login';
      return;
    }

    if (!tableBody) return;

    try {
      tableBody.innerHTML = '<tr><td colspan="7" class="px-6 py-4 text-center text-gray-500">Loading...</td></tr>';

      const response = await fetch(`${API_URL}/api/admin/mitra`, {
        method: 'GET',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json',
        },
      });

      if (!response.ok) {
        throw new Error('Failed to fetch mitra data');
      }

      const result = await response.json();

      if (result.success && result.data) {
        let mitras = result.data;

        // Apply filter based on the filter parameter
        if (filter === 'approved') {
          mitras = mitras.filter((mitra: any) => mitra.status === 'approved');
        } else if (filter === 'pending') {
          mitras = mitras.filter((mitra: any) => mitra.status === 'pending');
        }
        // 'all' and 'dashboard' shows everything, no filtering needed

        // Update page title based on filter
        const titleElement = document.querySelector('.text-xl.font-semibold.text-gray-900.dark\\:text-white');
        if (titleElement) {
          let titleText = 'Mitra Management';
          if (filter === 'approved') {
            titleText = 'Mitra Sagawa (Disetujui)';
          } else if (filter === 'pending') {
            titleText = 'Menunggu Persetujuan';
          } else if (filter === 'all') {
            titleText = 'Semua User & Mitra';
          } else if (filter === 'dashboard') {
            titleText = 'Mitra Management';
          }
          titleElement.textContent = titleText;
        }

        if (mitras.length === 0) {
          let emptyMessage = 'Tidak ada data mitra';
          if (filter === 'approved') {
            emptyMessage = 'Tidak ada mitra yang disetujui';
          } else if (filter === 'pending') {
            emptyMessage = 'Tidak ada mitra yang menunggu persetujuan';
          }
          tableBody.innerHTML = `<tr><td colspan="7" class="px-6 py-4 text-center text-gray-500">${emptyMessage}</td></tr>`;
          
          // Still update stats even if no data
          const isUserMenu = filter !== 'dashboard';
          updateStats(result.data, isUserMenu);
          return;
        }

        let tableHTML = '';
        mitras.forEach((mitra: any) => {
          const statusColor = mitra.status === 'pending' ? 'bg-yellow-100 text-yellow-800' :
                             mitra.status === 'approved' ? 'bg-green-100 text-green-800' :
                             'bg-red-100 text-red-800';
          
          const actionButtons = `
            <div class="flex flex-wrap gap-1">
              <button onclick="showMitraDetail('${mitra._id}')" class="px-2 py-1 bg-blue-500 text-white text-xs rounded hover:bg-blue-600 transition">
                Detail
              </button>
              ${mitra.status === 'pending' ? 
                `<button onclick="approveMitra('${mitra._id}', 'approve')" class="px-2 py-1 bg-green-500 text-white text-xs rounded hover:bg-green-600 transition">
                   Approve
                 </button>
                 <button onclick="approveMitra('${mitra._id}', 'reject')" class="px-2 py-1 bg-red-500 text-white text-xs rounded hover:bg-red-600 transition">
                   Reject
                 </button>` :
                `<span class="text-gray-500 text-xs">${mitra.status === 'approved' ? 'Disetujui' : 'Ditolak'}</span>`
              }
            </div>
          `;

          tableHTML += `
            <tr class="bg-white border-b dark:bg-gray-800 dark:border-gray-700">
              <th scope="row" class="px-6 py-4 font-medium text-gray-900 whitespace-nowrap dark:text-white">
                ${mitra.namaMitra || 'N/A'}
              </th>
              <td class="px-6 py-4">${mitra.email || 'N/A'}</td>
              <td class="px-6 py-4">${mitra.noHp || 'N/A'}</td>
              <td class="px-6 py-4">${mitra.paketUsaha || 'N/A'}</td>
              <td class="px-6 py-4">
                ${mitra.paketUsaha === 'RM Nusantara' && mitra.rmNusantaraSubMenu ? 
                  `<span class="px-2 py-1 text-xs bg-blue-100 text-blue-800 rounded-full">${mitra.rmNusantaraSubMenu}</span>` : 
                  '<span class="text-gray-400 text-xs">-</span>'
                }
              </td>
              <td class="px-6 py-4">
                <span class="px-2 py-1 text-xs font-medium rounded-full ${statusColor}">
                  ${mitra.status || 'pending'}
                </span>
              </td>
              <td class="px-6 py-4">
                ${actionButtons}
              </td>
            </tr>
          `;
        });

        tableBody.innerHTML = tableHTML;
        
        // Update stats based on current view
        const isUserMenu = filter !== 'dashboard';
        updateStats(result.data, isUserMenu);
      } else {
        tableBody.innerHTML = '<tr><td colspan="7" class="px-6 py-4 text-center text-red-500">Error loading data</td></tr>';
      }
    } catch (error: unknown) {
      console.error('Error loading mitra data:', error);
      const errorMessage = error instanceof Error ? error.message : 'Unknown error';
      tableBody.innerHTML = `<tr><td colspan="7" class="px-6 py-4 text-center text-red-500">Error: ${errorMessage}</td></tr>`;
    }
  }

  // Function to approve/reject mitra
  async function approveMitra(mitraId: string, action: 'approve' | 'reject') {
    const token = localStorage.getItem('adminToken');

    if (!token) {
      window.location.href = '/admin/login';
      return;
    }

    const actionText = action === 'approve' ? 'menyetujui' : 'menolak';
    const warningText = action === 'reject' ? 
      '\n\n⚠️ PERHATIAN: Data mitra yang ditolak akan DIHAPUS PERMANEN dari database!' : '';
    
    if (!confirm(`Apakah Anda yakin ingin ${actionText} mitra ini?${warningText}`)) {
      return;
    }

    try {
      const response = await fetch(`${API_URL}/api/admin/mitra/approve`, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          mitraId: mitraId,
          action: action
        }),
      });

      const result = await response.json();

      if (response.ok && result.success) {
        alert(result.message);
        // Reload mitra data with current filter
        const activeFilter = getCurrentActiveFilter();
        loadMitraData(activeFilter);
      } else {
        alert(result.error || 'Gagal memproses permintaan');
      }
    } catch (error: unknown) {
      console.error('Error approving mitra:', error);
      const errorMessage = error instanceof Error ? error.message : 'Unknown error';
      alert(`Terjadi kesalahan saat memproses permintaan: ${errorMessage}`);
    }
  }

  // Make functions globally available by extending Window interface
  declare global {
    interface Window {
      approveMitra: (mitraId: string, action: 'approve' | 'reject') => Promise<void>;
      showMitraDetail: (mitraId: string) => Promise<void>;
      closeMitraDetailModal: () => void;
      openImageModal: (imageData: string, title: string) => void;
      closeImageModal: () => void;
    }
  }

  (window as any).approveMitra = approveMitra;

  // Function to show mitra detail modal
  async function showMitraDetail(mitraId: string) {
    const token = localStorage.getItem('adminToken');
    const modal = document.getElementById('mitraDetailModal');
    const content = document.getElementById('mitraDetailContent');

    if (!token || !modal || !content) {
      return;
    }

    try {
      // Show modal first
      modal.classList.remove('hidden');
      content.innerHTML = '<div class="col-span-2 text-center">Loading...</div>';

      const response = await fetch(`${API_URL}/api/admin/mitra/${mitraId}`, {
        method: 'GET',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json',
        },
      });

      if (!response.ok) {
        throw new Error('Failed to fetch mitra detail');
      }

      const result = await response.json();

      if (result.success && result.data) {
        const mitra = result.data;
        displayMitraDetail(mitra);
      } else {
        content.innerHTML = '<div class="col-span-2 text-center text-red-500">Error loading detail</div>';
      }
    } catch (error: unknown) {
      console.error('Error loading mitra detail:', error);
      const errorMessage = error instanceof Error ? error.message : 'Unknown error';
      content.innerHTML = `<div class="col-span-2 text-center text-red-500">Error: ${errorMessage}</div>`;
    }
  }

  // Function to display mitra detail in modal
  function displayMitraDetail(mitra: any) {
    const content = document.getElementById('mitraDetailContent');
    if (!content) return;

    const formatCurrency = (amount: number) => {
      return new Intl.NumberFormat('id-ID', {
        style: 'currency',
        currency: 'IDR'
      }).format(amount);
    };

    const formatDate = (dateString: string) => {
      return new Date(dateString).toLocaleDateString('id-ID', {
        year: 'numeric',
        month: 'long',
        day: 'numeric',
        hour: '2-digit',
        minute: '2-digit'
      });
    };

    content.innerHTML = `


      <!-- Informasi Data Pribadi -->
      <div class="bg-gray-50 p-4 rounded-lg">
        <h4 class="font-semibold text-gray-900 mb-3">Informasi Data Pribadi</h4>
        <div class="space-y-2">
          <div><strong>Nama Mitra:</strong> ${mitra.namaMitra || 'N/A'}</div>
          <div><strong>Email:</strong> ${mitra.email || 'N/A'}</div>
          <div><strong>No HP:</strong> ${mitra.noHp || 'N/A'}</div>
          <div><strong>Alamat:</strong> ${mitra.alamatMitra || 'N/A'}</div>
          <div><strong>Status:</strong> 
            <span class="px-2 py-1 text-xs rounded-full ${mitra.status === 'pending' ? 'bg-yellow-100 text-yellow-800' : mitra.status === 'approved' ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'}">
              ${mitra.status || 'pending'}
            </span>
          </div>
        </div>
      </div>

      <!-- Informasi Kemitraan -->
      <div class="bg-gray-50 p-4 rounded-lg">
        <h4 class="font-semibold text-gray-900 mb-3">Informasi Kemitraan</h4>
        <div class="space-y-2">
          <div><strong>Sistem Kemitraan:</strong> ${mitra.sistemKemitraan || 'N/A'}</div>
          <div><strong>Sales:</strong> ${mitra.sales || 'N/A'}</div>
          <div><strong>Paket Usaha:</strong> ${mitra.paketUsaha || 'N/A'}</div>
          ${mitra.paketUsaha === 'RM Nusantara' && mitra.rmNusantaraSubMenu ? `<div><strong>Sub Brand:</strong> ${mitra.rmNusantaraSubMenu}</div>` : ''}
        </div>
      </div>

      <!-- Informasi Keuangan -->
      <div class="bg-gray-50 p-4 rounded-lg">
        <h4 class="font-semibold text-gray-900 mb-3">Informasi Keuangan</h4>
        <div class="space-y-2">
          <div><strong>Nilai Paket:</strong> ${mitra.nilaiPaketUsaha || 'N/A'}</div>
          <div><strong>Harga Paket:</strong> ${mitra.hargaPaket ? formatCurrency(mitra.hargaPaket) : 'N/A'}</div>
          <div><strong>Nominal DP:</strong> ${mitra.nominalDP ? formatCurrency(mitra.nominalDP) : 'N/A'}</div>
          <div><strong>Nominal Full:</strong> ${mitra.nominalFull ? formatCurrency(mitra.nominalFull) : 'N/A'}</div>
          <div><strong>Yang Harus Dibayar:</strong> ${mitra.yangHarusDibayar ? formatCurrency(mitra.yangHarusDibayar) : 'N/A'}</div>
          <div><strong>Kekurangan:</strong> ${mitra.kekurangan ? formatCurrency(mitra.kekurangan) : 'N/A'}</div>
        </div>
      </div>

      <!-- Informasi Pembayaran -->
      <div class="bg-gray-50 p-4 rounded-lg">
        <h4 class="font-semibold text-gray-900 mb-3">Informasi Pembayaran</h4>
        <div class="space-y-2">
          <div><strong>Metode Pembayaran:</strong> Transfer</div>
          <div><strong>Bank Pengirim:</strong> ${mitra.bankPengirim || 'N/A'}</div>
          <div><strong>No Rekening:</strong> ${mitra.noRekPengirim || 'N/A'}</div>
          <div><strong>Nama Pengirim:</strong> ${mitra.namaPengirim || 'N/A'}</div>
        </div>
      </div>

      <!-- File Dokumen -->
      <div class="bg-gray-50 p-4 rounded-lg col-span-2">
        <h4 class="font-semibold text-gray-900 mb-4">Dokumen & Foto</h4>
        <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
          <!-- Foto KTP -->
          <div class="space-y-2">
            <strong>Foto KTP, NPWP & Foto Mitra:</strong>
            ${mitra.fotoKTP && mitra.fotoKTP !== '' ? `
              <div class="mt-2">
                <div class="border rounded-lg overflow-hidden bg-white shadow-sm">
                  <img src="${mitra.fotoKTP}" 
                       alt="Foto KTP" 
                       class="w-full h-48 object-contain bg-gray-50 cursor-pointer hover:bg-gray-100 transition-all"
                       onclick="openImageModal('${mitra.fotoKTP}', 'Foto KTP - ${mitra.namaMitra}')"
                       onerror="this.style.display='none'; this.nextElementSibling.style.display='block';">
                  <div class="text-red-500 text-sm p-4 hidden text-center">
                    <p>Gagal memuat gambar KTP</p>
                  </div>
                </div>
                <p class="text-xs text-gray-500 mt-2 text-center">Klik untuk memperbesar</p>
              </div>
            ` : '<span class="text-gray-500">Tidak ada foto KTP</span>'}
          </div>
          
          <!-- Bukti Transfer -->
          <div class="space-y-2">
            <strong>Bukti Transfer:</strong>
            ${mitra.buktiTransfer && mitra.buktiTransfer !== '' ? `
              <div class="mt-2">
                <div class="border rounded-lg overflow-hidden bg-white shadow-sm">
                  <img src="${mitra.buktiTransfer}" 
                       alt="Bukti Transfer" 
                       class="w-full h-48 object-contain bg-gray-50 cursor-pointer hover:bg-gray-100 transition-all"
                       onclick="openImageModal('${mitra.buktiTransfer}', 'Bukti Transfer - ${mitra.namaMitra}')"
                       onerror="this.style.display='none'; this.nextElementSibling.style.display='block';">
                  <div class="text-red-500 text-sm p-4 hidden text-center">
                    <p>Gagal memuat bukti transfer</p>
                  </div>
                </div>
                <p class="text-xs text-gray-500 mt-2 text-center">Klik untuk memperbesar</p>
              </div>
            ` : '<span class="text-gray-500">Tidak ada bukti transfer</span>'}
          </div>
        </div>
      </div>

      <!-- Informasi Waktu -->
      <div class="bg-gray-50 p-4 rounded-lg col-span-2">
        <h4 class="font-semibold text-gray-900 mb-3">Informasi Waktu</h4>
        <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div><strong>Dibuat:</strong> ${mitra.createdAt ? formatDate(mitra.createdAt) : 'N/A'}</div>
          <div><strong>Diupdate:</strong> ${mitra.updatedAt ? formatDate(mitra.updatedAt) : 'N/A'}</div>
        </div>
      </div>
    `;
  }

  // Function to close mitra detail modal
  function closeMitraDetailModal() {
    const modal = document.getElementById('mitraDetailModal');
    if (modal) {
      modal.classList.add('hidden');
    }
  }
  
  function isBase64OrDataUrl(str: string): boolean {
    if (!str) return false;
    // Cek jika string dimulai dengan data URL
    if (str.startsWith('data:')) return true;
    if (str.length > 50) return true;
    return false;
  }

  // Function to open image modal
  function openImageModal(imageData: string, title: string) {
    const modal = document.getElementById('imageModal');
    const image = document.getElementById('modalImage') as HTMLImageElement;
    const titleElement = document.getElementById('modalImageTitle');
    
    if (modal && image && titleElement) {
      // Show modal first
      modal.classList.remove('hidden');
      
      // Handle different image data formats
      let imageSrc = '';
      if (imageData.startsWith('data:')) {
        // Already a data URL
        imageSrc = imageData;
      } else {
        // Assume base64 data, add data URL prefix
        imageSrc = `${imageData}`;
      }
      
      console.log('Opening image modal with:', { title, imageSrc: imageSrc.substring(0, 50) + '...' });
      
      image.src = imageSrc;
      image.alt = title;
      titleElement.textContent = title;
      
      image.onerror = function() {
        console.error('Failed to load image:', imageSrc.substring(0, 100));
        titleElement.textContent = title + ' (Gagal memuat gambar)';
        // Show a placeholder message
        image.style.display = 'none';
        const errorMsg = document.createElement('div');
        errorMsg.className = 'text-white text-center p-8';
        errorMsg.innerHTML = `
          <div class="text-red-500 bg-white p-4 rounded">
            <p class="text-lg">Gagal memuat gambar</p>
            <p class="text-sm mt-2">Data gambar mungkin rusak</p>
          </div>
        `;
        image.parentElement?.appendChild(errorMsg);
      };
    }
  }

  // Function to close image modal
  function closeImageModal() {
    const modal = document.getElementById('imageModal');
    if (modal) {
      modal.classList.add('hidden');
    }
  }

  // Close image modal when clicking outside the image
  document.addEventListener('click', function(event) {
    const imageModal = document.getElementById('imageModal');
    const modalImage = document.getElementById('modalImage');
    
    if (imageModal && !imageModal.classList.contains('hidden')) {
      if (event.target === imageModal && event.target !== modalImage) {
        closeImageModal();
      }
    }
  });

  // Close image modal with Escape key
  document.addEventListener('keydown', function(event) {
    if (event.key === 'Escape') {
      closeImageModal();
    }
  });

  (window as any).showMitraDetail = showMitraDetail;
  (window as any).closeMitraDetailModal = closeMitraDetailModal;
  (window as any).openImageModal = openImageModal;
  (window as any).closeImageModal = closeImageModal;
</script>
</Layout>