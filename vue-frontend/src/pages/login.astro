---
import Layout from '../layouts/Layout.astro';
---
<Layout title="Login">
  <main class="min-h-screen flex items-center justify-center bg-gradient-to-br from-amber-100 to-orange-100">
    <div class="w-full max-w-md bg-white rounded-2xl shadow-2xl p-8 sm:p-10 flex flex-col gap-6 animate-fade-in-up">
      <h1 class="text-2xl font-bold text-center text-amber-600 mb-2">Login</h1>
      
      <!-- Error/Success Messages -->
      <div id="error-message" class="hidden bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative">
        <span id="error-text"></span>
      </div>
      <div id="success-message" class="hidden bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded relative">
        <span id="success-text"></span>
      </div>
      
      <form id="login-form" class="flex flex-col gap-4">
        <div>
          <label class="block text-sm font-medium text-gray-700 mb-1">Email atau No. Telp</label>
          <input id="email" type="text" placeholder="Email atau No. Telp" class="w-full px-4 py-2 rounded-lg border border-gray-300 focus:outline-none focus:ring-2 focus:ring-amber-500 transition" required />
        </div>
        <div>
          <label class="block text-sm font-medium text-gray-700 mb-1">Password</label>
          <div class="relative">
            <input id="password" type="password" placeholder="Password" class="w-full px-4 py-2 pr-12 rounded-lg border border-gray-300 focus:outline-none focus:ring-2 focus:ring-amber-500 transition" required />
            <button type="button" id="togglePassword" class="absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-500 hover:text-gray-700 focus:outline-none">
              <svg id="eyeOpen" class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path>
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"></path>
              </svg>
              <svg id="eyeClosed" class="w-5 h-5 hidden" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3.98 8.223A10.477 10.477 0 0 0 1.934 12C3.226 16.338 7.244 19.5 12 19.5c.993 0 1.953-.138 2.863-.395M6.228 6.228A10.451 10.451 0 0 1 12 4.5c4.756 0 8.773 3.162 10.065 7.498a10.522 10.522 0 0 1-4.293 5.774M6.228 6.228 3 3m3.228 3.228 3.65 3.65m7.894 7.894L21 21m-3.228-3.228-3.65-3.65m0 0a3 3 0 1 0-4.243-4.243m4.242 4.242L9.88 9.88"></path>
              </svg>
            </button>
          </div>
        </div>
        <button id="login-btn" type="submit" class="w-full py-2 bg-gradient-to-r from-amber-500 to-orange-500 text-white font-semibold rounded-lg shadow-lg hover:scale-105 transition">
          <span id="login-text">Login</span>
          <span id="login-loading" class="hidden">Loading...</span>
        </button>
      </form>
  </main>

  <script>
    // API URL configuration
    const API_URL = import.meta.env.PUBLIC_API_URL || 'http://localhost:4000';

    document.addEventListener('DOMContentLoaded', function() {
      const loginForm = document.getElementById('login-form');
      const emailInput = document.getElementById('email') as HTMLInputElement;
      const passwordInput = document.getElementById('password') as HTMLInputElement;
      const loginBtn = document.getElementById('login-btn') as HTMLButtonElement;
      const loginText = document.getElementById('login-text');
      const loginLoading = document.getElementById('login-loading');
      const errorMessage = document.getElementById('error-message');
      const errorText = document.getElementById('error-text');
      const successMessage = document.getElementById('success-message');
      const successText = document.getElementById('success-text');
      const togglePasswordBtn = document.getElementById('togglePassword');
      const eyeOpen = document.getElementById('eyeOpen');
      const eyeClosed = document.getElementById('eyeClosed');

      // Check if user is already logged in
      if (typeof window !== 'undefined') {
        const token = localStorage.getItem('mitraToken');
        const user = localStorage.getItem('mitraUser');
        
        if (token && user) {
          window.location.href = '/user/dashboard';
          return;
        }
      }

      function showError(message: string) {
        if (errorMessage && errorText) {
          errorText.textContent = message;
          errorMessage.classList.remove('hidden');
          successMessage?.classList.add('hidden');
        }
      }

      function showSuccess(message: string) {
        if (successMessage && successText) {
          successText.textContent = message;
          successMessage.classList.remove('hidden');
          errorMessage?.classList.add('hidden');
        }
      }

      function hideMessages() {
        errorMessage?.classList.add('hidden');
        successMessage?.classList.add('hidden');
      }

      function setLoading(isLoading: boolean) {
        if (loginBtn && loginText && loginLoading) {
          loginBtn.disabled = isLoading;
          if (isLoading) {
            loginText.classList.add('hidden');
            loginLoading.classList.remove('hidden');
            loginBtn.classList.add('opacity-50', 'cursor-not-allowed');
          } else {
            loginText.classList.remove('hidden');
            loginLoading.classList.add('hidden');
            loginBtn.classList.remove('opacity-50', 'cursor-not-allowed');
          }
        }
      }

      if (loginForm) {
        loginForm.addEventListener('submit', async function(e) {
          e.preventDefault();
          
          if (!emailInput || !passwordInput) return;
          
          const email = emailInput.value.trim();
          const password = passwordInput.value.trim();

          if (!email || !password) {
            showError('Email dan password harus diisi!');
            return;
          }

          setLoading(true);
          hideMessages();

          try {
            const response = await fetch(`${API_URL}/api/auth/login`, {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
              },
              body: JSON.stringify({
                email: email,
                password: password
              }),
            });

            const result = await response.json();

            if (response.ok && result.success) {
              // Login berhasil
              showSuccess('Login berhasil! Mengalihkan ke dashboard...');
              
              // Simpan data ke localStorage
              localStorage.setItem('mitraToken', result.data.token);
              localStorage.setItem('mitraUser', JSON.stringify(result.data.user));
              
              // Redirect ke dashboard setelah delay singkat
              setTimeout(() => {
                window.location.href = '/user/dashboard';
              }, 1000);

            } else {
              // Login gagal
              showError(result.error || 'Login gagal. Periksa email dan password Anda.');
            }

          } catch (error) {
            console.error('Login error:', error);
            showError('Terjadi kesalahan saat login. Silakan coba lagi.');
          } finally {
            setLoading(false);
          }
        });
      }

      // Password visibility toggle
      if (togglePasswordBtn && passwordInput && eyeOpen && eyeClosed) {
        togglePasswordBtn.addEventListener('click', function() {
          const isPassword = passwordInput.type === 'password';
          passwordInput.type = isPassword ? 'text' : 'password';
          
          if (isPassword) {
            eyeOpen.classList.add('hidden');
            eyeClosed.classList.remove('hidden');
          } else {
            eyeOpen.classList.remove('hidden');
            eyeClosed.classList.add('hidden');
          }
        });
      }

      // Clear messages when user starts typing
      [emailInput, passwordInput].forEach(input => {
        if (input) {
          input.addEventListener('input', hideMessages);
        }
      });
    });
  </script>
</Layout>
